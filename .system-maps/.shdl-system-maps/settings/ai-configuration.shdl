@context{domain:settings, type:ai_configuration}
@meta{
  featureName:"ai-configuration",
  featureGroup:"settings", 
  parentFile:"./settings.map.json",
  domain:"settings",
  lastUpdated:"2025-01-01T00:00:00Z",
  mappingVersion:"2.0.0"
}

#ROOT
  ##aiConfiguration{id:ai_config_feature, type:complete_mapping, @comprehensive}
    "AI provider selection, model configuration, transcription settings, and memory detection"
    
    ##userFlow{id:user_workflow, type:user_journey, @sequential}
      "User interaction workflow for configuring AI settings"
      @processing{
        step1:"User navigates to Settings and clicks AI Configuration section",
        step2:"User selects AI provider (OpenAI/Google) and specific model", 
        step3:"User configures transcription provider and language",
        step4:"User configures memory detection settings and saves"
      }
    
    ##systemFlow{id:system_workflow, type:system_processing, @sequential}
      "System processing workflow for AI configuration updates"
      @processing{
        process1:"Dynamic model list loaded based on provider selection",
        process2:"Form validates provider/model compatibility",
        process3:"API updates AI configuration in user record",
        process4:"AI services use new configuration for subsequent requests"
      }
    
    ##dataFlowTrace{id:data_flow, type:request_response, @critical}
      "Complete request/response cycle for AI configuration"
      
      ##userAction{id:trigger, type:interaction, @blocking}
        "User configures AI provider and model settings"
        @processing{
          provider_selection→model_selection→transcription_config→memory_config→save
        }
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side request processing and state management"
        
        ##triggerComponent{id:initiator}
          "AiConfigurationSettings component"
          @ref:AiConfigurationSettings.tsx
        
        ##eventHandlers{id:handlers}
          @cluster{functions, type:handlers}
            "Select onValueChange for providers"
            "Select onValueChange for models"
            "Switch onCheckedChange for auto-selection"
          @/cluster
        
        ##stateChanges{id:react_state}
          @cluster{updates, type:react_state}
            "form state for aiProvider"
            "form state for aiModel"
            "form state for transcriptionProvider"
            "form state for preferredLanguage"
            "form state for automaticModelSelection"
            "form state for memoryDetectionProvider"
            "form state for memoryDetectionModel"
          @/cluster
        
        ##reactQueryHooks{id:query_system}
          @cluster{hooks, type:tanstack_query}
            "useAiModels hook for available models"
          @/cluster
        
        ##apiCalls{id:network_requests, @critical}
          "API call configuration and routing"
          @processing{
            endpoint:"/api/settings",
            method:"PATCH",
            requestPayload:"{aiProvider, aiModel, transcriptionProvider, preferredLanguage, automaticModelSelection, memoryDetectionProvider, memoryDetectionModel}"
          }
      
      ##networkLayer{id:transport, type:layer}
        "Network transport and routing layer"
        @processing{
          requestRoute:"PATCH /api/settings",
          routeHandler:"settings-routes.ts"
        }
      
      ##backendFlow{id:server_processing, type:layer, @sequential}
        "Server-side request processing and data operations"
        
        ##routeHandler{id:entry_point}
          "app.patch('/api/settings') in settings-routes.ts"
          @ref:enhancedSettingsUpdateSchema validation
        
        ##servicesCalled{id:business_logic}
          @cluster{services, type:business_logic}
            "storage.updateUserSettings()"
          @/cluster
        
        ##databaseOperations{id:data_layer, @critical}
          "Database interaction patterns"
          @cluster{queries, type:sql}
            "UPDATE users SET aiProvider=$1, aiModel=$2, transcriptionProvider=$3, preferredLanguage=$4, automaticModelSelection=$5, memoryDetectionProvider=$6, memoryDetectionModel=$7 WHERE id=$8"
          @/cluster
          @cluster{tables, type:schema}
            "users table - AI configuration columns"
          @/cluster
          @cluster{operations, type:crud}
            "UPDATE aiProvider"
            "UPDATE aiModel"
            "UPDATE transcriptionProvider"
            "UPDATE preferredLanguage"
            "UPDATE automaticModelSelection"
            "UPDATE memoryDetectionProvider"
            "UPDATE memoryDetectionModel"
          @/cluster
      
      ##responseFlow{id:response_processing, type:layer, @sequential}
        "Response data transformation and delivery"
        @cluster{dataTransformation, type:processing}
          "Updated user object with AI settings"
        @/cluster
        @processing{
          responsePayload:"Complete updated settings object",
          statusCodes:"200 OK, 400 Bad Request, 500 Server Error"
        }
      
      ##frontendUpdateFlow{id:ui_refresh, type:layer}
        "Frontend state updates and UI refresh patterns"
        @cluster{reactQueryInvalidation, type:cache_invalidation}
          "queryClient.invalidateQueries(['userSettings', '/api/settings'])"
        @/cluster
        @cluster{stateUpdates, type:component_state}
          "Form values updated"
          "Model dropdown refreshed based on provider"
        @/cluster
        @cluster{userFeedback, type:ux}
          "Success toast notification"
          "Model list dynamically updates"
        @/cluster
    
    ##architecturalLayers{id:system_layers, type:architecture, @comprehensive}
      "Complete architectural layer dependency mapping"
      
      ##presentation{id:frontend_layer, type:ui_layer}
        "Frontend presentation layer components and utilities"
        
        ##components{id:ui_components, @critical}
          @cluster{primary, type:main_features}
            "/client/src/components/settings/AiConfigurationSettings.tsx"
            "/client/src/components/SettingsSection.tsx"
          @/cluster
          @cluster{supporting, type:helpers}
            "/client/src/components/ui/select.tsx"
            "/client/src/components/ui/switch.tsx"
            "/client/src/components/ui/card.tsx"
          @/cluster
        
        ##hooks{id:custom_hooks}
          @cluster{react_hooks, type:state_logic}
            "/client/src/hooks/useAiModels.ts"
            "useFormContext from react-hook-form"
          @/cluster
        
        ##types{id:frontend_types}
          @cluster{typescript_interfaces, type:type_definitions}
            "UserSettingsFormValues interface"
            "AvailableAiModels type"
            "AiModelInfo type"
            "supportedLanguages constant"
          @/cluster
      
      ##businessLogic{id:backend_layer, type:server_layer}
        "Server-side business logic and processing"
        
        ##routes{id:api_routes, @critical}
          @cluster{express_handlers, type:route_handlers}
            "/server/routes/settings-routes.ts"
          @/cluster
        
        ##services{id:business_services, @critical}
          @cluster{logic_services, type:business_logic}
            "/server/storage.ts - updateUserSettings()"
          @/cluster
        
        ##types{id:shared_types}
          @cluster{common_types, type:shared_definitions}
            "/shared/schema.ts - User AI fields"
            "transcriptionProviders type"
            "supportedLanguages array"
          @/cluster
      
      ##dataLayer{id:persistence_layer, type:data_layer}
        "Data persistence and storage mechanisms"
        
        ##database{id:relational_db, @critical}
          @cluster{tables, type:schema}
            "users table - AI configuration columns"
          @/cluster
          @cluster{operations, type:crud}
            "UPDATE AI provider and model fields"
          @/cluster
    
    ##integration{id:external_layer, type:integration_layer}
      "External service integrations and APIs"
      
      ##externalApis{id:third_party_apis}
        @cluster{services, type:external_services}
            "OpenAI API for GPT models"
            "Google AI API for Gemini models"
            "OpenAI Whisper for transcription"
            "Google Speech-to-Text API"
        @/cluster
    
    ##errorBoundaries{id:error_management, type:error_system}
      "Error handling and recovery strategy"
      
      ##frontendErrors{id:client_errors, type:ui_errors}
        @cluster{validationErrors, type:form_validation}
          "Invalid provider/model combination"
          "Model loading failures"
        @/cluster
      
      ##backendErrors{id:server_errors, type:backend_failures}
        @cluster{validationErrors, type:request_validation}
          "Invalid AI provider enum"
          "Invalid transcription provider"
        @/cluster
    
    ##performanceConsiderations{id:optimization, type:efficiency_mapping}
      "Performance optimization strategies"
      
      ##frontendOptimizations{id:client_performance, type:ui_optimization}
        @cluster{cacheStrategy, type:client_cache}
          "AI models list cached"
          "Provider-specific model filtering"
        @/cluster
    
    ##securityConsiderations{id:security, type:protection_mapping}
      "Security and privacy protection"
      
      ##dataProtection{id:data_security, type:privacy_protection}
        @cluster{sensitiveData, type:pii_handling}
          "AI provider API keys not exposed to client"
          "Model selection validated server-side"
        @/cluster
    
    ##integrationEvidence{id:validation, type:evidence_tracking}
      "Integration validation and evidence"
      @processing{
        status:"active",
        lastVerified:"2025-01-01T00:00:00Z",
        verificationMethod:"manual",
        evidenceLocation:"Component actively configures AI services"
      }
    
    ##dependencies{id:feature_dependencies, type:dependency_tracking}
      @cluster{internal, type:internal_features}
        "AI service provider abstraction"
        "Transcription service integration"
        "Memory detection system"
      @/cluster
      @cluster{external, type:third_party}
        "OpenAI API integration"
        "Google AI API integration"
      @/cluster
    
    ##impacts{id:feature_impacts, type:impact_analysis}
      @cluster{affects, type:affected_features}
        "Chat responses (uses selected AI model)"
        "Voice transcription (uses transcription provider)"
        "Memory detection (uses memory detection settings)"
        "Model auto-selection logic"
      @/cluster
      @cluster{sharedServices, type:shared_logic}
        "AI provider service"
        "Transcription service"
      @/cluster

@processing{
  mapping_sequence:[userFlow, systemFlow, dataFlowTrace, architecturalLayers],
  quality_gates:[errorBoundaries, performanceConsiderations, securityConsiderations],
  validation_requirements:[integrationEvidence],
  relationship_analysis:[dependencies, impacts]
}