
{
  "_tableOfContents": {
    "domain": "file-manager",
    "features": [
      "go-acceleration",
      "compression-optimization",
      "metadata-extraction",
      "retention-policies",
      "file-lifecycle",
      "universal-file-service",
      "smart-routing"
    ],
    "totalFeatures": 7,
    "lastUpdated": "2025-07-11"
  },
  "go-acceleration": {
    "_meta": {
      "feature": "go-acceleration",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "Large data files (>5MB XML/JSON/CSV) detected during upload compression only",
    "dataFlow": {
      "request": "compressFile() → UniversalFileService.initialize() → FileAccelerationService.initialize() → /api/accelerate/health GET (lazy) → /api/accelerate/start POST → Go service spawn",
      "response": "Go service → compressed file → upload completion | Health check → service availability detection",
      "sideEffects": ["Lazy Go service startup only when compressing", "90%+ compression ratios", "Graceful fallback to TypeScript", "No periodic health checks", "Silent 503 handling"]
    },
    "files": {
      "ui": ["client/src/services/universal-file-service.ts", "client/src/services/file-acceleration-service.ts", "useFileUpload.ts"],
      "api": ["server/routes/file-routes.ts", "server/routes/shared-utils.ts", "server/services/logger-service.ts"],
      "data": ["files"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": ["AccelerationCapabilities"],
      "triggers": ["go-service-startup", "compression-processing", "lazy-health-check"]
    },
    "errorPaths": {
      "network": "Fallback to TypeScript processing with timeout handling",
      "validation": "File size/type validation with graceful degradation",
      "business": "Go service availability check with suppressed 503 warning logs"
    },
    "dependencies": {
      "internal": ["universal-file-service", "compression-optimization"],
      "external": ["Go file service"],
      "shared": ["UniversalFileService", "FileAccelerationService"]
    }
  },
  "compression-optimization": {
    "_meta": {
      "feature": "compression-optimization",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "File upload triggers compression analysis",
    "dataFlow": {
      "request": "UniversalFileService.compressFile → optimal compression method → file processing",
      "response": "Compressed file → compression metrics → upload completion",
      "sideEffects": ["Bandwidth reduction", "Storage optimization", "Processing time tracking"]
    },
    "files": {
      "ui": ["UniversalFileService.ts", "FileCompressionService.ts", "FileAccelerationService.ts"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": ["compression-processing"]
    },
    "errorPaths": {
      "network": "Uncompressed file upload",
      "validation": "File format compatibility check",
      "business": "Compression benefit analysis"
    },
    "dependencies": {
      "internal": ["smart-routing"],
      "external": ["Compression algorithms"],
      "shared": ["UniversalFileService", "FileCompressionService"]
    }
  },
  "metadata-extraction": {
    "_meta": {
      "feature": "metadata-extraction",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "File upload triggers parallel metadata extraction",
    "dataFlow": {
      "request": "GoFileService → metadata extraction → files.metadata JSON field",
      "response": "Extracted metadata → database storage → UI display",
      "sideEffects": ["MD5 hash generation", "Perceptual hash for duplicates", "EXIF data extraction", "Thumbnail creation"]
    },
    "files": {
      "ui": ["GoFileService.ts"],
      "api": ["go-file-service/main.go"],
      "data": ["files"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": ["FileList"],
      "triggers": ["metadata-processing"]
    },
    "errorPaths": {
      "network": "Metadata extraction skip",
      "validation": "File format support check",
      "business": "Graceful metadata failure handling"
    },
    "dependencies": {
      "internal": ["go-acceleration"],
      "external": ["Go file service", "Image processing libraries"],
      "shared": ["GoFileService"]
    }
  },
  "retention-policies": {
    "_meta": {
      "feature": "retention-policies",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "File upload triggers retention policy analysis",
    "dataFlow": {
      "request": "AttachmentRetentionService → content analysis → retention assignment",
      "response": "Retention policy → files table storage → user notification",
      "sideEffects": ["Medical files: permanent retention", "Fitness files: 365 days", "General files: 90 days"]
    },
    "files": {
      "ui": ["useFileUpload.ts"],
      "api": ["AttachmentRetentionService.ts"],
      "data": ["files"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": ["retention-assignment"]
    },
    "errorPaths": {
      "network": "Default retention policy",
      "validation": "Content analysis failure",
      "business": "Retention policy fallback"
    },
    "dependencies": {
      "internal": ["file-lifecycle"],
      "external": ["Content analysis AI"],
      "shared": ["AttachmentRetentionService"]
    }
  },
  "file-lifecycle": {
    "_meta": {
      "feature": "file-lifecycle",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "Background service monitors file expiration",
    "dataFlow": {
      "request": "Background service → expiration check → scheduled deletion",
      "response": "Expired files → isDeleted flag → cleanup service",
      "sideEffects": ["Automatic file cleanup", "Storage optimization"]
    },
    "files": {
      "ui": [],
      "api": ["AttachmentRetentionService.ts"],
      "data": ["files"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": ["query:files"],
      "refreshes": ["FileList"],
      "triggers": ["file-cleanup"]
    },
    "errorPaths": {
      "network": "Retry cleanup operation",
      "validation": "File lock check",
      "business": "Retention policy verification"
    },
    "dependencies": {
      "internal": ["retention-policies"],
      "external": ["Background job scheduler"],
      "shared": ["AttachmentRetentionService"]
    }
  },
  "universal-file-service": {
    "_meta": {
      "feature": "universal-file-service",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "File compression triggers lazy universal file service initialization",
    "dataFlow": {
      "request": "compressFile() → UniversalFileService.initialize() → platform detection → capability assessment",
      "response": "Service routing configuration → unified interface",
      "sideEffects": ["Lazy platform capability detection", "Service routing setup only when needed"]
    },
    "files": {
      "ui": ["UniversalFileService.ts", "FileAccelerationService.ts", "FileCompressionService.ts"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": ["service-initialization"]
    },
    "errorPaths": {
      "network": "Fallback to basic file operations",
      "validation": "Platform compatibility check",
      "business": "Service availability validation"
    },
    "dependencies": {
      "internal": ["smart-routing"],
      "external": ["Platform detection APIs"],
      "shared": ["FileAccelerationService", "FileCompressionService"]
    }
  },
  "smart-routing": {
    "_meta": {
      "feature": "smart-routing",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "File characteristics analysis triggers routing decision",
    "dataFlow": {
      "request": "File analysis → routing decision → optimal service selection",
      "response": "Service routing → processing execution → performance tracking",
      "sideEffects": ["Go acceleration for large files", "TypeScript fallback", "Performance metrics"]
    },
    "files": {
      "ui": ["UniversalFileService.ts", "FileAccelerationService.ts"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": ["routing-decision"]
    },
    "errorPaths": {
      "network": "Automatic fallback to TypeScript",
      "validation": "File characteristics validation",
      "business": "Service availability check"
    },
    "dependencies": {
      "internal": ["go-acceleration", "compression-optimization"],
      "external": ["Performance monitoring"],
      "shared": ["UniversalFileService", "FileAccelerationService"]
    }
  }
}
