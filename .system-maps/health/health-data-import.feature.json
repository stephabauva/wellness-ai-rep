
{
  "_metadata": {
    "featureName": "health-data-import",
    "featureGroup": "data-operations", 
    "parentFile": "./dashboard.map.json",
    "domain": "health"
  },
  "integrationStatus": {
    "status": "partial",
    "lastVerified": "2025-01-28",
    "knownIssues": [
      "Large file upload optimization pending",
      "Background processing not fully implemented",
      "Error recovery for corrupted files needs enhancement"
    ]
  },
  "description": "Comprehensive health data import system supporting multiple file formats from various health platforms and devices.",
  "userFlow": [
    "User clicks 'Import Health Data' button in HealthDataSection.",
    "HealthDataImport component renders with file upload interface.",
    "User selects health data file (Apple Health XML, Google Fit JSON, CSV, etc.).",
    "File is validated for format and size constraints.",
    "Health data parser processes the file based on detected format.",
    "Deduplication service identifies and handles duplicate records.",
    "User reviews import preview with statistics (new records, duplicates, errors).",
    "User confirms import or adjusts settings.",
    "Data is batch imported into the database.",
    "Health dashboard refreshes with new data.",
    "Import results are displayed to user."
  ],
  "components": {
    "$ref": "../dashboard.map.json#/components"
  },
  "apiEndpoints": {
    "$ref": "../dashboard.map.json#/apiEndpoints"
  },
  "logging": {
    "$ref": "/.system-maps/infrastructure/logging.map.json#/health-logging"
  },
  "performance": {
    "$ref": "/.system-maps/infrastructure/performance.map.json#/health-performance"
  },
  "featureComponents": [
    "HealthDataImport",
    "HealthDataParser",
    "HealthDataDeduplicationService",
    "useFileUpload",
    "useOptimizedUpload"
  ],
  "supportedFormats": [
    {
      "format": "Apple Health Export",
      "fileType": "XML",
      "description": "Complete health data export from iOS Health app",
      "maxSize": "100MB",
      "parser": "AppleHealthXMLParser"
    },
    {
      "format": "Google Fit Export",
      "fileType": "JSON",
      "description": "Google Takeout health and fitness data",
      "maxSize": "50MB",
      "parser": "GoogleFitJSONParser"
    },
    {
      "format": "Generic CSV",
      "fileType": "CSV",
      "description": "Custom CSV format with date, metric, value columns",
      "maxSize": "10MB",
      "parser": "GenericCSVParser"
    },
    {
      "format": "Fitbit Export",
      "fileType": "JSON",
      "description": "Fitbit data export files",
      "maxSize": "25MB",
      "parser": "FitbitJSONParser"
    }
  ],
  "systemFlow": [
    "HealthDataImport component validates file size and format",
    "useFileUpload handles secure file transmission to server",
    "POST /api/health-data/import processes file with HealthDataParser",
    "HealthDataDeduplicationService identifies duplicate records",
    "Server performs batch insertion into healthData table",
    "React Query invalidates 'query:healthData' cache",
    "HealthDataSection re-renders with imported data"
  ],
  "apiIntegration": {
    "expectedEndpoints": ["POST /api/health-data/import"],
    "actualEndpoints": ["POST /api/health-data/import"],
    "integrationGaps": [],
    "endpoint": "POST /api/health-data/import",
    "processingSteps": [
      "File validation and virus scanning",
      "Format detection and parser selection",
      "Data extraction and normalization",
      "Duplicate detection and resolution",
      "Batch database insertion",
      "Cache invalidation and UI updates"
    ]
  },
  "errorHandling": [
    "Invalid file format detection",
    "Corrupted data recovery",
    "Partial import continuation",
    "User-friendly error messages",
    "Import rollback on critical failures"
  ],
  "performance": {
    "streaming": "Large files processed in chunks to prevent memory issues",
    "batchSize": "1000 records per database transaction",
    "progressTracking": "Real-time progress updates for user feedback",
    "backgroundProcessing": "Long imports handled asynchronously"
  }
}
