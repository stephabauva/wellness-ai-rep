@context{domain:chat, feature:message_display}
@meta{
  featureName:"message-display",
  featureGroup:"core-messaging", 
  parentFile:"./chat-domain.shdl",
  domain:"chat",
  lastUpdated:"2025-01-01T00:00:00Z",
  mappingVersion:"2.0.0"
}

#ROOT
  ##messageDisplay{id:message_display_feature, type:complete_mapping, @comprehensive}
    "Display chat messages with proper formatting and interaction controls"
    
    ##userFlow{id:user_workflow, type:user_journey, @sequential}
      "User experience for viewing messages"
      @processing{
        step1:"User sees messages in chronological order",
        step2:"User messages appear on the right, AI on left",
        step3:"Timestamps and attachments are visible", 
        step4:"Messages auto-scroll to newest",
        step5:"User can scroll up to view history"
      }
    
    ##systemFlow{id:system_workflow, type:system_processing, @sequential}
      "System rendering of message display"
      @processing{
        process1:"Fetch messages from context/database",
        process2:"Sort messages by timestamp",
        process3:"Apply virtual scrolling for performance",
        process4:"Render with appropriate styling",
        process5:"Handle attachment previews"
      }
    
    ##dataFlowTrace{id:data_flow, type:request_response, @critical}
      "Message display data flow and rendering"
      
      ##dataSource{id:message_source, type:data_origin, @blocking}
        "Messages originate from multiple sources"
        @processing{
          sources:[
            "AppContext optimistic messages",
            "Database persisted messages",
            "Streaming message in progress"
          ]
        }
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side message rendering pipeline"
        
        ##triggerComponent{id:initiator}
          "MessageDisplayArea component"
          @ref:MessageDisplayArea.tsx
        
        ##dataProcessing{id:message_processing}
          @cluster{processing_steps, type:data_transform}
            "Combine optimistic + DB messages",
            "Sort by timestamp",
            "Apply search filtering if active",
            "Process for virtual scrolling"
          @/cluster
        
        ##stateManagement{id:react_state}
          @cluster{local_state, type:component_state}
            "containerHeight for virtual scroll",
            "showScrollToBottom indicator",
            "processedMessages from worker",
            "messageAnimationKeys for effects"
          @/cluster
        
        ##renderingLogic{id:display_logic}
          @cluster{render_decisions, type:conditional_rendering}
            "Show loading skeleton if loading",
            "Show empty state if no messages",
            "Apply virtual scrolling if enabled",
            "Show scroll-to-bottom button"
          @/cluster
      
      ##componentStructure{id:ui_components, type:layer}
        "Component hierarchy for message display"
        @processing{
          hierarchy:[
            "MessageDisplayArea (container)",
            "ChatMessage (individual message)",
            "SmoothStreamingText (for AI streaming)",
            "AttachmentDisplay (for files)"
          ]
        }
        @cluster{features, type:ui_features}
          "Virtual scrolling support",
          "Pagination for large sets",
          "Web Worker for heavy processing",
          "Smooth animations"
        @/cluster
      
      ##messageFormatting{id:message_styling, type:layer, @sequential}
        "Message appearance and layout"
        
        ##userMessages{id:user_style}
          @cluster{styling, type:css_classes}
            "Right-aligned positioning",
            "Blue background color",
            "White text color",
            "Rounded corners"
          @/cluster
        
        ##aiMessages{id:ai_style}
          @cluster{styling, type:css_classes}
            "Left-aligned positioning",
            "Gray background color",
            "Dark text color",
            "Markdown rendering support"
          @/cluster
        
        ##metadataDisplay{id:message_metadata}
          @cluster{elements, type:ui_elements}
            "Timestamp formatting",
            "Attachment indicators",
            "Message status icons"
          @/cluster
      
      ##performanceFeatures{id:performance_layer, type:optimization}
        "Performance optimizations for large message lists"
        
        ##virtualScrolling{id:virtual_scroll}
          "Render only visible messages"
          @cluster{implementation, type:optimization}
            "useVirtualScrolling hook",
            "Calculate visible range",
            "Offset positioning",
            "Buffer for smooth scrolling"
          @/cluster
        
        ##pagination{id:message_pagination}
          "Load messages in chunks"
          @cluster{implementation, type:pagination}
            "useMessagePagination hook",
            "50 messages per page",
            "Load more on scroll up",
            "Maintain scroll position"
          @/cluster
        
        ##webWorker{id:worker_processing}
          "Offload heavy processing"
          @cluster{tasks, type:background_processing}
            "Message parsing",
            "Search filtering",
            "Markdown processing"
          @/cluster

    ##architecturalLayers{id:architecture, type:dependency_analysis}
      "Message display architecture"
      
      ##presentation{id:frontend_layer, type:ui_layer}
        ##components{id:ui_components, @critical}
          @cluster{primary, type:main_features}
            "MessageDisplayArea.tsx - Main container",
            "chat-message.tsx - Individual messages"
          @/cluster
          @cluster{supporting, type:helpers}
            "SmoothStreamingText.tsx - AI streaming",
            "ScrollArea.tsx - Scroll container",
            "Button.tsx - Scroll to bottom"
          @/cluster
        
        ##hooks{id:custom_hooks}
          @cluster{react_hooks, type:state_logic}
            "useVirtualScrolling - Performance",
            "useMessagePagination - Data loading",
            "useWebWorker - Background processing"
          @/cluster
        
        ##styles{id:message_styles}
          @cluster{animations, type:css}
            "messageAppear - Fade in effect",
            "Message alignment classes",
            "Responsive design utilities"
          @/cluster
      
      ##businessLogic{id:backend_layer, type:server_layer}
        ##messageRetrieval{id:data_fetching}
          @cluster{endpoints, type:api_routes}
            "GET /api/messages - All messages",
            "GET /api/conversations/:id/messages"
          @/cluster
        
        ##dataTransformation{id:message_processing}
          @cluster{processing, type:business_logic}
            "Message formatting",
            "Attachment URL generation",
            "Timestamp formatting"
          @/cluster
      
      ##dataLayer{id:persistence_layer, type:data_layer}
        ##database{id:message_storage}
          @cluster{tables, type:schema}
            "chatMessages - Legacy messages",
            "conversationMessages - New structure"
          @/cluster
          @cluster{queries, type:data_access}
            "ORDER BY timestamp/createdAt",
            "JOIN with attachments",
            "User filtering"
          @/cluster

    ##errorBoundaries{id:error_handling, type:resilience_mapping}
      ##renderingErrors{id:display_errors, type:ui_errors}
        @cluster{errorHandling, type:react_errors}
          "Message render failures",
          "Invalid attachment URLs",
          "Missing message data"
        @/cluster
      
      ##dataErrors{id:loading_errors, type:data_failures}
        @cluster{errorStates, type:ui_feedback}
          "Failed to load messages",
          "Network timeout",
          "Invalid response format"
        @/cluster

    ##performanceConsiderations{id:optimization, type:efficiency_mapping}
      ##renderOptimization{id:react_performance, type:ui_optimization}
        @cluster{techniques, type:optimization}
          "React.memo for messages",
          "Key-based reconciliation",
          "Lazy loading components"
        @/cluster
      
      ##scrollPerformance{id:scroll_optimization, type:performance}
        @cluster{features, type:scroll_handling}
          "Virtual scrolling for >100 messages",
          "Intersection Observer for visibility",
          "RequestAnimationFrame for smoothness"
        @/cluster

    ##integrationEvidence{id:validation, type:evidence_tracking}
      ##implementationStatus{id:feature_status, type:status_tracking}
        @processing{
          status:"active",
          lastVerified:"2025-01-01T00:00:00Z",
          verificationMethod:"manual",
          evidenceLocation:"client/src/components/MessageDisplayArea.tsx"
        }
      
      ##testingEvidence{id:test_coverage, type:validation_evidence}
        @cluster{unitTests, type:component_tests}
          "MessageDisplayArea.test.tsx"
        @/cluster

    ##dependencies{id:feature_dependencies, type:dependency_tracking}
      @cluster{internal, type:internal_features}
        "Message Streaming",
        "Smooth Streaming Text",
        "Attachment Preview",
        "Virtual Scrolling"
      @/cluster
      @cluster{components, type:ui_dependencies}
        "ScrollArea", "Button", "Skeleton"
      @/cluster

    ##impacts{id:feature_impacts, type:impact_analysis}
      @cluster{affects, type:affected_features}
        "Send Message (display after send)",
        "Conversation History (message list)",
        "Message Pagination"
      @/cluster

@processing{
  mapping_sequence:[userFlow, systemFlow, dataFlowTrace, architecturalLayers],
  quality_gates:[errorBoundaries, performanceConsiderations],
  validation_requirements:[integrationEvidence],
  relationship_analysis:[dependencies, impacts]
}