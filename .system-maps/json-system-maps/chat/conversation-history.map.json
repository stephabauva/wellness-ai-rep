{
  "tableOfContents": {
    "conversation-management": {
      "features": [
        "conversation-list",
        "conversation-persistence",
        "conversation-navigation"
      ],
      "components": [
        "ConversationHistory",
        "ConversationListItem",
        "ConversationSearch"
      ],
      "endpoints": [
        "GET /api/conversations",
        "DELETE /api/conversations/:id",
        "PUT /api/conversations/:id"
      ]
    }
  },
  "integrationStatus": {
    "conversation-list": {
      "status": "active",
      "lastVerified": "2025-07-04",
      "knownIssues": [],
      "resolvedIssues": [
        "Latest conversations now appearing with metadata",
        "UI component fully integrated with enhanced API data",
        "Streaming endpoint now properly updates conversation history"
      ]
    },
    "conversation-persistence": {
      "status": "active",
      "lastVerified": "2025-07-04",
      "knownIssues": [],
      "resolvedIssues": [
        "Conversation update endpoint implemented",
        "Streaming endpoint (/api/messages/stream) now persists messages and updates conversation timestamps",
        "Query cache invalidation properly triggers history refresh"
      ]
    },
    "conversation-navigation": {
      "status": "active",
      "lastVerified": "2025-07-04",
      "knownIssues": [],
      "resolvedIssues": [
        "Users can now access and switch between previous conversations",
        "Conversation context switching working properly",
        "New chat → History flow now shows latest conversation"
      ]
    }
  },
  "lastUpdated": "2025-07-11T21:54:27.653Z",
  "dependencies": [
    "core-messaging",
    "memory"
  ],
  "featureGroups": {
    "conversation-management": {
      "description": "User interface and backend functionality for managing conversation history, including listing, searching, and navigating previous conversations",
      "features": {
        "conversation-list": {
          "description": "Display list of user's previous conversations with titles, timestamps, and preview text",
          "userFlow": [
            "User clicks on conversation history section",
            "System displays list of previous conversations",
            "User sees conversation titles, timestamps, and message previews",
            "User can scroll through paginated conversation list"
          ],
          "systemFlow": [
            "Fetch conversations from database ordered by last activity",
            "Generate conversation titles from first message or AI summary",
            "Apply pagination to conversation results",
            "Return formatted conversation metadata to frontend"
          ],
          "components": [
            "ConversationHistory",
            "ConversationListItem"
          ],
          "dataFlowTrace": {
            "userAction": "User clicks History button to view previous conversations",
            "frontendFlow": {
              "triggerComponent": "ConversationHistory.tsx",
              "eventHandlers": [
                "useQuery hook triggers on mount"
              ],
              "stateChanges": [
                "Loading state",
                "Conversations data populated"
              ],
              "reactQueryHooks": [
                "useQuery: ['/api/conversations']"
              ],
              "apiCalls": {
                "endpoint": "/api/conversations",
                "method": "GET",
                "requestPath": [
                  "ConversationHistory component → useQuery → GET /api/conversations"
                ],
                "requestPayload": "none",
                "headers": [
                  "Content-Type: application/json"
                ]
              }
            },
            "networkLayer": {
              "requestRoute": "Frontend → GET /api/conversations",
              "middlewares": [],
              "routeHandler": "server/routes/chat-routes.ts:app.get('/api/conversations')"
            },
            "backendFlow": {
              "routeHandler": "server/routes/chat-routes.ts:GET /api/conversations",
              "servicesCalled": [],
              "databaseOperations": {
                "queries": [
                  "SELECT id, title, createdAt, updatedAt FROM conversations WHERE userId = 1 ORDER BY updatedAt DESC"
                ],
                "tables": [
                  "conversations"
                ],
                "operations": [
                  "READ"
                ],
                "transactions": []
              },
              "cacheOperations": [
                "React Query cache read/write"
              ]
            },
            "responseFlow": {
              "backendResponse": "Array of conversation objects with metadata",
              "frontendHandling": "React Query updates component state",
              "uiUpdate": "ConversationHistory renders list of conversations"
            },
            "requestPath": [
              "Frontend: ConversationHistory.tsx",
              "Hook: useQuery",
              "API: GET /api/conversations",
              "Handler: server/routes/chat-routes.ts",
              "Database: conversations"
            ],
            "expectedPath": [
              "Frontend: ConversationHistory.tsx",
              "Hook: useQuery",
              "API: GET /api/conversations",
              "Handler: server/routes/chat-routes.ts",
              "Database: conversations"
            ],
            "pathVerified": true,
            "bypassedComponents": [],
            "actualHandler": "server/routes/chat-routes.ts:GET /api/conversations",
            "streamingPattern": "Standard REST API retrieval with React Query caching"
          },
          "apiIntegration": {
            "expectedEndpoints": [
              "GET /api/conversations"
            ],
            "actualEndpoints": [
              "GET /api/conversations"
            ],
            "integrationGaps": [],
            "resolvedGaps": [
              "Frontend now properly consuming enhanced conversation data",
              "Conversation metadata generation working",
              "React Query cache invalidation implemented",
              "Go AI Gateway dependency disabled"
            ],
            "cacheDependencies": {
              "invalidates": [
                "query:conversations"
              ],
              "refreshesComponents": [
                "ConversationHistory",
                "ChatSection"
              ]
            },
            "uiConsistencyValidation": {
              "tested": true,
              "knownIssues": [],
              "resolvedIssues": [
                "Latest conversations displaying with metadata",
                "Conversation list properly populated"
              ]
            }
          },
          "logging": {
            "$ref": "../infrastructure/logging.map.json#/conversation-logging"
          },
          "performance": {
            "$ref": "../infrastructure/performance.map.json#/conversation-performance"
          },
          "tests": []
        },
        "conversation-persistence": {
          "description": "Automatic saving and persistence of conversation data with proper metadata",
          "userFlow": [
            "User engages in chat conversation",
            "System automatically saves conversation with metadata",
            "Conversation appears in history with proper title and timestamp",
            "User can access saved conversation later"
          ],
          "systemFlow": [
            "Create conversation record on first message",
            "Update conversation metadata on each new message",
            "Generate or update conversation title based on content",
            "Store conversation with proper indexing for retrieval"
          ],
          "components": [
            "ChatSection",
            "ConversationHistory"
          ],
          "dataFlowTrace": {
            "userAction": "User sends a message in chat interface",
            "frontendFlow": {
              "triggerComponent": "ChatSection.tsx",
              "eventHandlers": [
                "sendMessage from AppContext"
              ],
              "stateChanges": [
                "Optimistic message added",
                "Streaming state activated"
              ],
              "reactQueryHooks": [
                "useMutation: sendMessageMutation"
              ],
              "apiCalls": {
                "endpoint": "/api/messages/stream",
                "method": "POST",
                "requestPath": [
                  "ChatSection → AppContext.sendMessage → POST /api/messages/stream"
                ],
                "requestPayload": "{content, conversationId, coachingMode, aiProvider, aiModel, attachments, automaticModelSelection}",
                "headers": [
                  "Content-Type: application/json"
                ]
              }
            },
            "networkLayer": {
              "requestRoute": "Frontend → POST /api/messages/stream",
              "middlewares": [
                "messageSchema validation"
              ],
              "routeHandler": "server/routes/chat-routes.ts:app.post('/api/messages/stream')"
            },
            "backendFlow": {
              "routeHandler": "server/routes/chat-routes.ts:POST /api/messages/stream",
              "servicesCalled": [
                "aiService.getChatResponseStream",
                "storage.getUser"
              ],
              "databaseOperations": {
                "queries": [
                  "INSERT INTO conversations (userId, title) VALUES (1, $title) RETURNING *",
                  "INSERT INTO conversationMessages (conversationId, role, content, metadata) VALUES ($id, 'user', $content, $attachments) RETURNING *",
                  "INSERT INTO conversationMessages (conversationId, role, content) VALUES ($id, 'assistant', $response) RETURNING *",
                  "UPDATE conversations SET updatedAt = NOW() WHERE id = $conversationId RETURNING *"
                ],
                "tables": [
                  "conversations",
                  "conversationMessages"
                ],
                "operations": [
                  "CREATE",
                  "UPDATE"
                ],
                "transactions": [
                  "Message save and conversation update in sequence"
                ]
              },
              "cacheOperations": [
                "React Query invalidation triggered by frontend on success"
              ]
            },
            "responseFlow": {
              "backendResponse": "Server-Sent Events stream with chunks, complete, and done events",
              "frontendHandling": "AppContext processes streaming response and updates state",
              "uiUpdate": "Messages rendered in real-time, conversation cache invalidated"
            },
            "requestPath": [
              "Frontend: ChatSection.tsx",
              "Context: AppContext.sendMessage",
              "API: POST /api/messages/stream",
              "Handler: server/routes/chat-routes.ts",
              "Service: aiService",
              "Database: conversations, conversationMessages"
            ],
            "expectedPath": [
              "Frontend: ChatSection.tsx",
              "Context: AppContext.sendMessage",
              "API: POST /api/messages/stream",
              "Handler: server/routes/chat-routes.ts",
              "Service: aiService",
              "Database: conversations, conversationMessages"
            ],
            "pathVerified": true,
            "bypassedComponents": [],
            "actualHandler": "server/routes/chat-routes.ts:POST /api/messages/stream",
            "streamingPattern": "Real-time SSE streaming with database persistence and conversation timestamp updates"
          },
          "apiIntegration": {
            "expectedEndpoints": [
              "POST /api/chat",
              "PUT /api/conversations/:id"
            ],
            "actualEndpoints": [
              "POST /api/chat",
              "PUT /api/conversations/:id"
            ],
            "integrationGaps": [],
            "resolvedGaps": [
              "Conversation update endpoint implemented",
              "Streaming endpoint now saves messages to database",
              "Conversation timestamps properly updated after each message"
            ],
            "cacheDependencies": {
              "invalidates": [
                "query:conversations",
                "query:messages"
              ],
              "refreshesComponents": [
                "ConversationHistory",
                "ChatSection"
              ]
            },
            "uiConsistencyValidation": {
              "tested": true,
              "knownIssues": []
            }
          },
          "logging": {
            "$ref": "../infrastructure/logging.map.json#/conversation-persistence-logging"
          },
          "performance": {
            "$ref": "../infrastructure/performance.map.json#/conversation-persistence-performance"
          },
          "tests": []
        },
        "conversation-navigation": {
          "description": "Allow users to click on previous conversations and resume them in the chat interface",
          "userFlow": [
            "User views conversation history",
            "User clicks on a previous conversation",
            "System loads conversation messages in chat interface",
            "User can continue conversation from where they left off"
          ],
          "systemFlow": [
            "Receive conversation selection from frontend",
            "Load conversation messages from database",
            "Set active conversation context",
            "Update chat interface with conversation history",
            "Enable continuation of selected conversation"
          ],
          "components": [
            "ConversationHistory",
            "ChatSection",
            "MessageDisplayArea"
          ],
          "dataFlowTrace": {
            "userAction": "User clicks on a previous conversation in history list",
            "frontendFlow": {
              "triggerComponent": "ConversationHistory.tsx",
              "eventHandlers": [
                "AppContext.selectConversation"
              ],
              "stateChanges": [
                "currentConversationId updated",
                "messages cleared and reloaded"
              ],
              "reactQueryHooks": [
                "Messages useEffect triggers conversation loading"
              ],
              "apiCalls": {
                "endpoint": "/api/conversations/:id/messages",
                "method": "GET",
                "requestPath": [
                  "ConversationHistory → AppContext.selectConversation → useEffect → GET /api/conversations/:id/messages"
                ],
                "requestPayload": "conversationId in URL params",
                "headers": [
                  "Content-Type: application/json"
                ]
              }
            },
            "networkLayer": {
              "requestRoute": "Frontend → GET /api/conversations/:id/messages",
              "middlewares": [],
              "routeHandler": "server/routes/chat-routes.ts:app.get('/api/conversations/:id/messages')"
            },
            "backendFlow": {
              "routeHandler": "server/routes/chat-routes.ts:GET /api/conversations/:id/messages",
              "servicesCalled": [],
              "databaseOperations": {
                "queries": [
                  "SELECT * FROM conversationMessages WHERE conversationId = $id ORDER BY createdAt"
                ],
                "tables": [
                  "conversationMessages"
                ],
                "operations": [
                  "READ"
                ],
                "transactions": []
              },
              "cacheOperations": []
            },
            "responseFlow": {
              "backendResponse": "Array of message objects for the conversation",
              "frontendHandling": "AppContext loads messages into state",
              "uiUpdate": "ChatSection displays conversation history, ConversationHistory modal closes"
            },
            "requestPath": [
              "Frontend: ConversationHistory.tsx",
              "Context: AppContext.selectConversation",
              "API: GET /api/conversations/:id/messages",
              "Handler: server/routes/chat-routes.ts"
            ],
            "expectedPath": [
              "Frontend: ConversationHistory.tsx",
              "Context: AppContext.selectConversation",
              "API: GET /api/conversations/:id/messages",
              "Handler: server/routes/chat-routes.ts"
            ],
            "pathVerified": true,
            "bypassedComponents": [],
            "actualHandler": "server/routes/chat-routes.ts:GET /api/conversations/:id/messages",
            "streamingPattern": "Conversation context switching with message history loading"
          },
          "apiIntegration": {
            "expectedEndpoints": [
              "GET /api/conversations/:id/messages",
              "PUT /api/conversations/:id/select"
            ],
            "actualEndpoints": [
              "GET /api/conversations/:id/messages"
            ],
            "integrationGaps": [],
            "resolvedGaps": [
              "Conversation selection API working through AppContext",
              "Conversation context switching mechanism active",
              "Conversation history properly loads when selected from list"
            ],
            "cacheDependencies": {
              "invalidates": [
                "query:messages",
                "query:currentConversation"
              ],
              "refreshesComponents": [
                "MessageDisplayArea",
                "ChatSection",
                "ConversationHistory"
              ]
            },
            "uiConsistencyValidation": {
              "tested": true,
              "knownIssues": [],
              "resolvedIssues": [
                "Can click to load previous conversations",
                "Active conversation indication working"
              ]
            }
          },
          "logging": {
            "$ref": "../infrastructure/logging.map.json#/conversation-navigation-logging"
          },
          "performance": {
            "$ref": "../infrastructure/performance.map.json#/conversation-navigation-performance"
          },
          "tests": []
        }
      }
    }
  },
  "components": {
    "ConversationHistory": {
      "name": "ConversationHistory",
      "path": "client/src/components/ConversationHistory.tsx",
      "description": "Main conversation history interface displaying list of previous conversations",
      "uses": [
        "useChatMessages",
        "ConversationListItem",
        "ConversationSearch"
      ],
      "integrationIssues": [],
      "resolvedIssues": [
        "Now properly consuming enhanced conversation API data",
        "Click handlers for conversation selection implemented",
        "Real-time conversation list updates after sending messages"
      ],
      "actualUsage": {
        "usageCount": 1,
        "crossDomain": false,
        "usedBy": [
          {
            "file": "client/src/components/ChatSection.tsx",
            "domain": "chat"
          }
        ]
      }
    },
    "ConversationListItem": {
      "name": "ConversationListItem",
      "path": "client/src/components/ConversationListItem.tsx",
      "description": "Individual conversation item in history list with title, timestamp, and preview",
      "uses": [],
      "integrationIssues": [],
      "resolvedIssues": [
        "Component integrated into ConversationHistory component",
        "Conversation selection functionality working"
      ]
    },
    "ConversationSearch": {
      "name": "ConversationSearch",
      "path": "client/src/components/ConversationSearch.tsx",
      "description": "Search functionality for filtering conversation history",
      "uses": [],
      "integrationIssues": [],
      "resolvedIssues": [
        "Search functionality integrated into ConversationHistory component"
      ]
    }
  },
  "apiEndpoints": {
    "/api/conversations": {
      "method": "GET",
      "handler": "server/routes/chat-routes.ts",
      "description": "Retrieve user's conversation history with pagination, ordered by updatedAt DESC",
      "readsFrom": [
        "conversations"
      ],
      "modifies": [],
      "implementationStatus": "active",
      "debugLogging": "[CONVERSATIONS_FETCH_DEBUG] logs conversation count and metadata"
    },
    "/api/messages/stream": {
      "method": "POST",
      "handler": "server/routes/chat-routes.ts",
      "description": "Send message via streaming with real-time response and database persistence",
      "readsFrom": [
        "conversations",
        "users"
      ],
      "modifies": [
        "conversations",
        "conversationMessages"
      ],
      "implementationStatus": "active",
      "debugLogging": "[STREAMING_DEBUG] and [CONVERSATION_UPDATE_DEBUG] logs for conversation management",
      "criticalFix": "Now properly saves messages and updates conversation timestamps for history visibility"
    },
    "/api/conversations/:id": {
      "method": "PUT",
      "handler": "server/routes/chat-routes.ts",
      "description": "Update conversation metadata (title, etc.)",
      "readsFrom": [
        "conversations"
      ],
      "modifies": [
        "conversations"
      ],
      "implementationStatus": "active"
    },
    "/api/conversations/:id/messages": {
      "method": "GET",
      "handler": "server/routes/chat-routes.ts",
      "description": "Load messages for a specific conversation when user selects from history",
      "readsFrom": [
        "conversationMessages"
      ],
      "modifies": [],
      "implementationStatus": "active"
    }
  },
  "database": {
    "tables": {
      "conversations": {
        "description": "Chat conversation metadata and context",
        "columns": [
          "id",
          "title",
          "created_at",
          "updated_at",
          "user_id"
        ],
        "relations": [
          "conversation_messages"
        ],
        "indexes": [
          "user_id",
          "created_at"
        ],
        "integrationIssues": [],
        "resolvedIssues": [
          "Title generation logic working",
          "Conversation selection tracking active",
          "Timestamp updates now properly triggered by streaming endpoint"
        ]
      },
      "conversation_messages": {
        "description": "Individual chat messages within conversations",
        "columns": [
          "id",
          "conversation_id",
          "role",
          "content",
          "created_at",
          "message_type",
          "status"
        ],
        "relations": [
          "conversations",
          "message_attachments"
        ],
        "indexes": [
          "conversation_id",
          "created_at"
        ],
        "integrationIssues": [],
        "resolvedIssues": [
          "Messages properly linked to conversation history interface through API endpoints",
          "Streaming endpoint now persists both user and AI messages to database"
        ]
      }
    }
  },
  "dependencyAnalysis": {
    "lastAnalyzed": "2025-07-11T21:54:27.653Z",
    "crossDomainFiles": 3,
    "internalFiles": 7,
    "totalDependencies": 10
  }
}