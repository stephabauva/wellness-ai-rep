@context{domain:memory, target:semantic_search, complexity:high, enforcement:strict}
@meta{tokens:800, critical_paths:4, validation_rules:6, processing_priority:1}

#ROOT{confidence:1.0}
  ##semantic_search{id:semantic_search_feature, type:core_functionality, confidence:1.0, @critical}
    "Vector-based similarity search with embeddings for intelligent memory retrieval"
    @capabilities{
      embedding_generation,
      vector_similarity_search,
      semantic_understanding,
      multi_modal_search,
      hybrid_search
    }
    
    ##data_flow_tracing{id:semantic_search_flow, type:vector_pipeline, confidence:1.0}
      @cluster{embedding_generation, confidence:1.0}
        ##text_to_vector{id:embedding_creation, type:ai_processing, confidence:1.0}
          "Convert text content to vector embeddings"
          @providers{
            primary:OpenAI[text-embedding-3-small],
            fallback:Google[embedding-001]
          }
          @processing{
            text→tokenization→model_inference→vector[1536_dimensions]
          }
          @optimization{
            batch_processing:up_to_100,
            caching:embedding_cache
          }
          
        ##embedding_storage{id:vector_persistence, type:database_storage, confidence:1.0}
          @field:memoryEntries.embedding
          @type:vector(1536)
          @index:ivfflat
          @normalization:l2_normalized
      @/cluster

      @cluster{similarity_search, confidence:1.0}
        ##vector_query{id:similarity_calculation, type:database_operation, confidence:1.0}
          @query{
            method:cosine_similarity,
            operator:<->,
            threshold:configurable
          }
          @sql{
            SELECT:* FROM memory_entries,
            ORDER_BY:embedding <-> $1,
            LIMIT:initial_50
          }
          
        ##distance_metrics{id:similarity_measures, type:calculation, confidence:1.0}
          @metrics{
            cosine:default,
            euclidean:alternative,
            dot_product:for_normalized
          }
          @thresholds{
            exact_match:> 0.95,
            high_similarity:> 0.85,
            moderate:> 0.70,
            low:> 0.50
          }
      @/cluster

      @cluster{hybrid_search, confidence:1.0}
        ##combined_approach{id:vector_plus_keyword, type:search_strategy, confidence:1.0}
          @processing{
            vector_results→keyword_boost→reranking→final_results
          }
          @weights{
            vector_score:0.7,
            keyword_match:0.3
          }
          
        ##result_fusion{id:score_combination, type:ranking, confidence:1.0}
          @algorithm{
            normalize_scores,
            weighted_combination,
            diversity_injection
          }
      @/cluster

      @cluster{search_interface, confidence:1.0}
        ##user_search{id:memory_search_ui, type:frontend_component, confidence:1.0}
          @component:MemorySection.tsx[memory_search]
          @features{
            search_input,
            category_filter,
            importance_filter,
            result_display
          }
          
        ##api_endpoint{id:search_endpoint, type:http_api, confidence:1.0}
          @route:POST /api/memories/search
          @payload:{query, filters, limit}
          @response:{results, scores, total_count}
      @/cluster

    ##architectural_layers{id:semantic_architecture, type:comprehensive, confidence:1.0}
      ##presentation_layer{id:search_ui, type:react_components, confidence:1.0}
        @components{
          MemorySection.tsx:[SearchInput, SearchResults],
          SearchFilters:[CategoryFilter, ImportanceFilter]
        }
        @features{
          real_time_search,
          filter_chips,
          relevance_indicators
        }
      }

      ##business_logic_layer{id:search_services, type:vector_operations, confidence:1.0}
        @services{
          memory-service.ts:[semanticSearch, generateEmbedding],
          enhanced-memory-service.ts:[hybridSearch],
          go-memory-service.ts:[vectorOperations]
        }
        @caching{
          embeddingCache:Map<content_hash, vector>,
          searchCache:Map<query_hash, results>
        }
      }

      ##data_layer{id:vector_storage, type:postgresql_pgvector, confidence:1.0}
        @extension:pgvector
        @operations{
          vector_storage:vector(1536),
          similarity_search:ivfflat_index,
          distance_calculation:<->_operator
        }
        @optimization{
          index_lists:100,
          probes:10
        }
      }

      ##integration_layer{id:embedding_providers, type:external_apis, confidence:0.9}
        @providers{
          openai:{model:text-embedding-3-small, dimensions:1536},
          google:{model:embedding-001, dimensions:768}
        }
        @fallback_strategy{
          primary_failure→secondary_provider,
          all_fail→keyword_search_only
        }
      }

    ##error_boundaries{id:semantic_errors, type:error_handling, confidence:1.0}
      @cluster{embedding_errors, confidence:1.0}
        ##generation_failure{id:embedding_api_error, confidence:1.0}
          @fallback:cached_embedding_or_skip
          @retry:exponential_backoff
        }
        ##dimension_mismatch{id:vector_size_error, confidence:1.0}
          @validation:enforce_1536_dimensions
          @handling:reject_invalid_vectors
        }
      @/cluster

    ##performance_optimization{id:semantic_performance, type:optimization, confidence:1.0}
      @cluster{embedding_optimization, confidence:1.0}
        ##batch_generation{id:bulk_embedding, confidence:1.0}
          @batch_size:100_texts
          @parallel_requests:5
          @rate_limiting:respect_api_limits
        }
        ##cache_strategy{id:embedding_cache, confidence:1.0}
          @storage:LRU_10000_entries
          @key:content_hash
          @ttl:30_days
        }
      @/cluster

      @cluster{search_optimization, confidence:1.0}
        ##index_tuning{id:ivfflat_optimization, confidence:1.0}
          @parameters{
            lists:100,
            probes:10_for_speed_15_for_accuracy
          }
        }
        ##query_optimization{id:efficient_search, confidence:1.0}
          @strategies{
            pre_filter_by_category,
            limit_initial_results,
            progressive_loading
          }
        }
      @/cluster

    ##security_privacy{id:semantic_security, type:data_protection, confidence:1.0}
      @embedding_security{
        no_reverse_engineering,
        user_isolated_vectors,
        secure_api_keys
      }
      @search_isolation{
        user_specific_results,
        no_cross_contamination
      }

    ##integration_evidence{id:semantic_implementation, type:verification, confidence:1.0}
      @status:active
      @verification:2025-01-15
      @evidence{
        vector_search:operational,
        embedding_generation:functional,
        hybrid_search:tested
      }
      @performance{
        embedding_time:~200ms,
        search_time:~50ms,
        accuracy:92%
      }

@processing{
  critical_paths:[text→embedding→storage, query→vector→similarity→results],
  enforcement_points:[dimension_validation, user_isolation, threshold_filtering],
  quality_gates:[embedding_quality, search_relevance, performance_limits]
}

@validation{
  mandatory_checks:[valid_embeddings, user_authenticated, query_sanitized],
  performance_targets:[search_under_100ms, embedding_under_500ms],
  accuracy_requirements:[similarity_threshold_respected, relevant_results]
}