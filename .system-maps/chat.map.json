
{
  "tableOfContents": {
    "core-messaging": ["send-message", "receive-streaming-response", "conversation-history"],
    "input-enhancements": ["file-attachment", "camera-capture", "audio-recording"],
    "advanced-features": ["chatgpt-style-memory", "context-aware-prompts", "conversation-management"]
  },
  "lastUpdated": "2025-01-26T10:00:00Z",
  "dependencies": ["memory", "files"],
  "featureGroups": {
    "core-messaging": {
      "description": "Handles the fundamental real-time chat experience, including sending, receiving, and displaying messages.",
      "features": {
        "send-message": {
          "description": "Allows the user to send a text message, with or without attachments, to the AI coach.",
          "userFlow": [
            "User types a message in the ChatInputArea.",
            "User clicks the send button or presses Enter.",
            "The `useChatActions` hook calls `startStreaming` from `useStreamingChat`.",
            "A POST request is sent to `/api/messages/stream`."
          ],
          "components": [
            {
              "name": "ChatInputArea",
              "path": "client/src/components/ChatInputArea.tsx",
              "description": "The UI component for typing messages and handling send actions.",
              "uses": ["useChatActions", "AudioRecorder"]
            },
            {
              "name": "useChatActions",
              "path": "client/src/hooks/useChatActions.ts",
              "description": "A hook that consolidates all user actions within the chat interface, including sending messages and managing attachments.",
              "uses": ["useStreamingChat", "useAppContext", "useFileManagement"]
            }
          ]
        },
        "receive-streaming-response": {
          "description": "Displays the AI's response in real-time as it is being generated.",
          "userFlow": [
            "The frontend establishes a connection to the `/api/messages/stream` endpoint.",
            "Server-Sent Events (SSE) are received with message chunks.",
            "The `useStreamingChat` hook processes these events, updating the `streamingMessage` state.",
            "The `MessageDisplayArea` component renders the incoming message."
          ],
          "components": [
            {
              "name": "MessageDisplayArea",
              "path": "client/src/components/MessageDisplayArea.tsx",
              "description": "Renders the list of messages, including the live streaming message.",
              "uses": ["ChatMessage"]
            },
            {
              "name": "useStreamingChat",
              "path": "client/src/hooks/useStreamingChat.ts",
              "description": "Manages the real-time connection to the streaming API and handles incoming message events.",
              "calls": ["/api/messages/stream"]
            }
          ]
        },
        "conversation-history": {
          "description": "Allows the user to view past conversations and switch between them.",
          "userFlow": [
            "User clicks the 'History' button in the `ChatSection` header.",
            "The `ConversationHistory` modal opens, listing past conversations.",
            "User can search for specific conversations using the search input.",
            "User clicks on a conversation to load it.",
            "`useChatMessages` fetches the messages for the selected conversation."
          ],
          "components": [
            {
              "name": "ConversationHistory",
              "path": "client/src/components/ConversationHistory.tsx",
              "description": "A modal component that displays a searchable list of past conversations.",
              "uses": ["useChatMessages"],
              "calls": ["/api/conversations"]
            },
            {
              "name": "useChatMessages",
              "path": "client/src/hooks/useChatMessages.ts",
              "description": "Manages the state of messages for the current conversation.",
              "calls": ["/api/messages"]
            }
          ]
        }
      }
    },
    "input-enhancements": {
      "description": "Features that provide alternative methods for message input beyond typing.",
      "features": {
        "file-attachment": {
          "description": "Allows users to attach files to their messages. Files are displayed as mini previews in the chat and automatically added to file management.",
          "userFlow": [
            "User clicks the 'Paperclip' icon in `ChatInputArea`.",
            "The `useFileManagement` hook's `handleFileChange` function is triggered.",
            "A POST request is sent to `/api/upload` to upload the file.",
            "The server saves the file to the `/uploads` directory.",
            "The `AttachmentPreview` component renders the image using a URL like `/uploads/filename.png`.",
            "The server serves the `/uploads` directory statically, allowing the client to fetch the image.",
            "File is automatically added to file management system for retention period."
          ],
          "server-side": {
            "static-serving": {
              "path": "/uploads",
              "description": "The Express server is configured to statically serve the `uploads` directory, making uploaded files accessible to the client for previews."
            }
          },
          "components": [
            {
              "name": "useFileManagement",
              "path": "client/src/hooks/useFileManagement.ts",
              "description": "Handles file uploads, previews, and removal.",
              "calls": ["/api/upload"]
            },
            {
              "name": "AttachmentPreview",
              "path": "client/src/components/AttachmentPreview.tsx",
              "description": "Displays mini previews of attached files before sending, with remove functionality.",
            "tests": ["client/src/components/AttachmentPreview.test.tsx"]
            }
          ]
        },
        "camera-capture": {
          "description": "Allows users to take a photo using their device camera and attach it to their message.",
          "userFlow": [
            "User clicks the 'Camera' icon in `ChatInputArea`.",
            "A modal with the camera feed opens.",
            "User clicks 'Capture Photo'.",
            "The photo is sent to `useFileManagement`'s `uploadFileMutation`.",
            "Photo appears as mini image in attachment preview."
          ],
          "components": [
            {
              "name": "ChatInputArea",
              "path": "client/src/components/ChatInputArea.tsx",
              "description": "Contains the UI and logic for opening and managing the camera modal."
            }
          ]
        },
        "audio-recording": {
          "description": "Allows users to record their voice using browser's Web Speech API, which automatically transcribes to text in the input field.",
          "userFlow": [
            "User clicks the microphone icon in `AudioRecorder`.",
            "`useAudioRecording` hook starts recording using Web Speech API.",
            "Browser automatically transcribes speech to text in real-time.",
            "Transcribed text is set as the input message in the text field.",
            "Note: OpenAI and Google voice transcription endpoints are not currently working."
          ],
          "components": [
            {
              "name": "AudioRecorder",
              "path": "client/src/components/AudioRecorder.tsx",
              "description": "The UI component for the audio recording button and state, supporting Web Speech API.",
              "uses": ["useAudioRecording"]
            },
            {
              "name": "useAudioRecording",
              "path": "client/src/hooks/useAudioRecording.ts", 
              "description": "Handles the logic for recording audio using Web Speech API and transcribing to text.",
              "calls": ["/api/transcribe"]
            }
          ]
        }
      }
    },
    "advanced-features": {
      "description": "Enhancements built on top of the core messaging functionality.",
      "features": {
        "chatgpt-style-memory": {
          "description": "Provides the AI with context from past conversations through real-time deduplication and memory-enhanced system prompts when relevant.",
          "userFlow": [
            "When a user sends a message, the `aiService` on the backend calls `chatGPTMemoryEnhancement.buildEnhancedSystemPrompt`.",
            "AI coach accesses user's memory if it determines the context is relevant.",
            "In parallel, `chatGPTMemoryEnhancement.processWithDeduplication` is called to analyze the message for potential new memories.",
            "The AI response is generated with the enhanced context."
          ],
          "components": [
            {
              "name": "ChatGPTMemoryEnhancement",
              "path": "server/services/chatgpt-memory-enhancement.ts",
              "description": "The core service for providing ChatGPT-like memory capabilities.",
              "uses": ["memoryService", "db"]
            }
          ]
        },
        "context-aware-prompts": {
          "description": "Builds a detailed context for the AI, including persona, memories, and conversation history.",
          "userFlow": [
            "Before calling the AI provider, the `aiService` uses `chatContextService.buildChatContext`.",
            "This service gathers the coaching persona, relevant memories, and formats the conversation history.",
            "The final, context-rich prompt is sent to the AI."
          ],
          "components": [
            {
              "name": "ChatContextService",
              "path": "server/services/chat-context-service.ts",
              "description": "A service responsible for constructing the full context for an AI chat interaction.",
              "uses": ["memoryService"]
            }
          ]
        },
        "conversation-management": {
          "description": "Allows users to create new conversations and manage conversation state.",
          "userFlow": [
            "User clicks 'New Chat' button in ChatSection header.",
            "`handleNewChat` function is called from `useChatMessages`.",
            "Current conversation is cleared and new conversation context is initialized.",
            "User can start fresh conversation with AI coach."
          ],
          "components": [
            {
              "name": "ChatSection",
              "path": "client/src/components/ChatSection.tsx",
              "description": "Main chat interface component with new chat and history buttons.",
              "uses": ["useChatMessages", "useChatActions", "ConversationHistory"]
            }
          ]
        }
      }
    }
  },
  "components": {
    "ChatSection": {
      "path": "client/src/components/ChatSection.tsx",
      "description": "The main parent component for the entire chat interface.",
      "uses": [
        "useChatMessages",
        "useChatActions",
        "MessageDisplayArea",
        "ChatInputArea",
        "ConversationHistory"
      ]
    }
  },
  "apiEndpoints": {
    "/api/messages/stream": {
      "method": "POST",
      "description": "The primary endpoint for sending and receiving chat messages in real-time using Server-Sent Events (SSE).",
      "path": "server/routes.ts",
      "handler": "app.post('/api/messages/stream', ...)",
      "readsFrom": ["conversations", "conversationMessages", "users"],
      "modifies": ["conversations", "conversationMessages"],
      "calls": ["aiService.getChatResponseStream"]
    },
    "/api/messages": {
      "method": "GET", 
      "description": "Fetches the messages for a specific conversation.",
      "path": "server/routes.ts",
      "handler": "app.get('/api/messages', ...)",
      "readsFrom": ["chatMessages"],
      "modifies": []
    },
    "/api/conversations": {
      "method": "GET",
      "description": "Fetches the list of conversations for the conversation history modal.",
      "path": "server/routes.ts", 
      "handler": "app.get('/api/conversations', ...)",
      "readsFrom": ["conversations"],
      "modifies": []
    },
    "/api/upload": {
      "method": "POST",
      "description": "Uploads a file to be attached to a message and adds it to file management system.",
      "path": "server/routes.ts",
      "handler": "app.post('/api/upload', ...)",
      "readsFrom": [],
      "modifies": ["files"]
    },
    "/api/transcribe": {
      "method": "POST",
      "description": "Transcribes an audio file to text (currently not working for OpenAI/Google, Web Speech API used instead).",
      "path": "server/routes.ts",
      "handler": "app.post('/api/transcribe', ...)",
      "readsFrom": [],
      "modifies": []
    }
  },
  "database": {
    "tables": {
      "conversations": {
        "schema": "shared/schema.ts",
        "description": "Stores metadata for each conversation, such as the title and user ID."
      },
      "conversationMessages": {
        "schema": "shared/schema.ts", 
        "description": "Stores individual messages within each conversation, including the role (user/assistant) and content."
      },
      "chatMessages": {
        "schema": "shared/schema.ts",
        "description": "Legacy table for chat messages. New development should use `conversationMessages`."
      },
      "files": {
        "schema": "shared/schema.ts",
        "description": "Stores information about uploaded files, automatically populated from chat attachments."
      }
    }
  }
}
