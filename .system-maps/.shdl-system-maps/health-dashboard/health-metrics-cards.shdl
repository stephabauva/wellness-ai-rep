@context{domain:health_dashboard, feature:health_metrics_cards, version:1.0}

#ROOT
  ##healthMetricsCards{id:metric_card_display, type:feature, @critical}
    "Individual health metric cards showing detailed category metrics"
    
    ##dataFlowTrace{id:complete_cycle, type:workflow, @critical}
      "Data flow for health metrics card rendering"
      
      ##userAction{id:trigger, type:interaction, @passive}
        "Cards render based on category data and visibility"
        @processing{
          trigger:"Parent component provides categorized data",
          visibility:"User preferences filter displayed metrics"
        }
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side card rendering and interaction"
        
        ##componentProps{id:input_data}
          "Props received by HealthMetricsCard"
          @cluster{props, type:interface}
            "title: string - Card title"
            "category: string - Health category"
            "metrics: HealthMetric[] - Metric data array"
            "icon: ReactNode - Category icon"
            "color: string - Theme color"
            "isRemovalMode: boolean - Selection mode"
            "selectedMetricsForRemoval: string[] - Selected items"
            "onMetricSelectionChange: function - Selection handler"
            "visibilitySettings: object - User preferences"
          @/cluster
        
        ##dataProcessing{id:metric_aggregation}
          "Process metrics for display"
          @cluster{processing, type:logic}
            "Group metrics by dataType"
            "Get latest value per metric type"
            "Apply visibility filtering"
            "Sort by timestamp descending"
          @/cluster
        
        ##visibilityFiltering{id:display_control}
          "Filter metrics based on settings"
          @processing{
            logic:"Check hidden_metrics array",
            fallback:"Show all if no settings",
            result:"filteredMetrics object"
          }
        
        ##statusCalculation{id:health_status}
          "Calculate health status indicators"
          @cluster{ranges, type:health_ranges}
            {
              "blood_pressure_systolic": { min: 90, max: 140, optimal: { min: 100, max: 120 } },
              "heart_rate": { min: 60, max: 100, optimal: { min: 60, max: 80 } },
              "bmi": { min: 18.5, max: 25, optimal: { min: 18.5, max: 24.9 } }
            }
          @/cluster
          @processing{
            statusColors:"green (optimal), yellow (normal), red (abnormal)",
            calculation:"Compare value against defined ranges"
          }
      
      ##renderingLogic{id:card_generation, type:layer}
        "Generate card UI with metrics"
        
        ##cardStructure{id:layout}
          "Card component structure"
          @cluster{sections, type:ui_structure}
            "CardHeader with title and metric count"
            "CardContent with metric list"
            "Individual metric rows with details"
          @/cluster
        
        ##metricDisplay{id:metric_row}
          "Individual metric rendering"
          @cluster{elements, type:ui_components}
            "Metric icon (dynamic per type)"
            "Metric name (formatted)"
            "Source information"
            "Value with unit"
            "Status color coding"
            "Timestamp"
            "Selection checkbox (conditional)"
          @/cluster
        
        ##interactionHandling{id:user_interaction}
          "Handle user interactions"
          @cluster{handlers, type:events}
            "Checkbox selection toggle"
            "Update parent selection state"
            "Visual feedback for selection"
          @/cluster
    
    ##architecturalLayers{id:layers, type:architecture}
      "Component architecture layers"
      
      ##presentationLayer{id:ui_components}
        @cluster{components, type:react}
          "HealthMetricsCard.tsx - Main component"
          "Card, CardHeader, CardContent - Shadcn/ui"
          "Badge component for counts"
          "Checkbox for selection"
          "Icon components from lucide-react"
        @/cluster
        @cluster{styling, type:ui}
          "Tailwind classes for layout"
          "Dynamic color classes for status"
          "Responsive grid layouts"
          "Border and spacing utilities"
        @/cluster
      
      ##businessLogicLayer{id:card_logic}
        @cluster{helpers, type:functions}
          "getMetricIcon() - Icon mapping"
          "getStatusColor() - Health status colors"
          "formatMetricName() - Name formatting"
          "Latest value extraction logic"
        @/cluster
        @cluster{configurations, type:data}
          "Health range definitions"
          "Icon mappings per metric type"
          "Default values and units"
        @/cluster
      
      ##dataLayer{id:data_handling}
        @cluster{transformations, type:data}
          "Metric deduplication by type"
          "Timestamp-based sorting"
          "Visibility filtering"
          "Selection state management"
        @/cluster
    
    ##errorBoundaries{id:error_handling, type:reliability}
      "Error handling mechanisms"
      
      ##emptyStates{id:no_data}
        @cluster{handling, type:ui}
          "Return null for empty metrics"
          "Return null for all filtered metrics"
          "Graceful degradation"
        @/cluster
      
      ##dataValidation{id:safe_processing}
        @cluster{validation, type:safety}
          "Null checks for metric properties"
          "Default values for missing data"
          "Safe number parsing"
        @/cluster
    
    ##performanceConsiderations{id:optimization, type:performance}
      "Performance optimizations"
      
      ##dataReduction{id:efficient_display}
        @cluster{strategies, type:optimization}
          "Show only latest value per type"
          "Early return for empty data"
          "Reduce operation for deduplication"
        @/cluster
      
      ##renderingEfficiency{id:ui_performance}
        @cluster{optimizations, type:rendering}
          "Conditional rendering for modes"
          "Key-based list rendering"
          "Memoized helper functions"
        @/cluster
    
    ##securityConsiderations{id:security, type:protection}
      "Security and privacy measures"
      
      ##dataPrivacy{id:visibility_respect}
        @cluster{privacy, type:controls}
          "Honor visibility settings"
          "Filter sensitive metrics"
          "No data exposure in logs"
        @/cluster
    
    ##integrationEvidence{id:verified_integration, type:validation}
      "Integration verification"
      
      ##parentUsage{id:dashboard_integration}
        @evidence{
          file:"HealthDataSection.tsx",
          lines:"436-447",
          code:"<HealthMetricsCard ... metrics={categorizedData[cat.id]} ... />"
        }
      
      ##visibilityIntegration{id:filtering_logic}
        @evidence{
          file:"HealthMetricsCard.tsx",
          lines:"102-120",
          code:"const filteredMetrics = visibilitySettings ? ..."
        }
      
      ##statusCalculation{id:health_ranges}
        @evidence{
          file:"HealthMetricsCard.tsx",
          lines:"47-71",
          code:"const getStatusColor = (dataType: string, value: string): string => {...}"
        }
    
    ##dependencies{id:feature_dependencies, type:graph}
      "Component dependencies"
      
      ##dataDependencies{id:data_requirements}
        @cluster{inputs, type:dependency}
          "Categorized health metrics from parent"
          "Visibility settings from API"
          "Selection state from parent"
        @/cluster
      
      ##uiDependencies{id:component_libs}
        @cluster{libraries, type:dependency}
          "Shadcn/ui Card components"
          "lucide-react icons"
          "Tailwind CSS"
        @/cluster
    
    ##impacts{id:affected_features, type:graph}
      "Features affected by metric cards"
      
      ##visualHierarchy{id:dashboard_structure}
        @cluster{effects, type:impact}
          "Primary content of category views"
          "Defines metric detail level"
          "Sets visual patterns for health data"
        @/cluster
      
      ##dataInteraction{id:user_engagement}
        @cluster{effects, type:impact}
          "Metric selection affects visibility"
          "Status colors drive user attention"
          "Timestamp shows data freshness"
        @/cluster