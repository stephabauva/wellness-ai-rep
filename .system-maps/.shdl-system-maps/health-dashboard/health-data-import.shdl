@context{domain:health_dashboard, feature:health_data_import, version:1.0}

#ROOT
  ##healthDataImport{id:data_import_system, type:feature, @critical}
    "Health data import system for uploading and processing health files"
    
    ##dataFlowTrace{id:complete_cycle, type:workflow, @critical}
      "Complete data flow for health data import"
      
      ##userAction{id:trigger, type:interaction, @active}
        "User initiates health data import"
        @processing{
          trigger:"Click 'Import Data' button",
          fileSelection:"Choose health export file",
          supported_formats:["XML", "JSON", "CSV", "TXT", "GZ", "ZIP"]
        }
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side import handling"
        
        ##componentStructure{id:import_component}
          "HealthDataImport component"
          @file{path:"client/src/components/health/HealthDataImport.tsx"}
          @cluster{features, type:ui_elements}
            "File upload button"
            "Drag-and-drop zone"
            "Progress indicator"
            "Success/error feedback"
          @/cluster
        
        ##fileValidation{id:client_validation}
          "Client-side file validation"
          @processing{
            fileTypes:"Check MIME type and extension",
            sizeLimit:"1GB maximum file size",
            preview:"Show file info before upload"
          }
        
        ##uploadProcess{id:file_upload}
          "File upload to server"
          @cluster{upload_config, type:network}
            "multipart/form-data encoding"
            "Progress tracking"
            "Abort capability"
            "Retry on failure"
          @/cluster
        
        ##apiCall{id:import_endpoint, @critical}
          "API call for data import"
          @processing{
            endpoint:"/api/health-data/import",
            method:"POST",
            headers:"Content-Type: multipart/form-data",
            body:"FormData with file"
          }
      
      ##networkLayer{id:transport, type:layer}
        "Network handling and routing"
        @processing{
          route:"POST /api/health-data/import",
          middleware:"multer for file handling",
          handler:"health-routes.ts â†’ import handler"
        }
      
      ##backendFlow{id:server_processing, type:layer, @sequential}
        "Server-side import processing"
        
        ##fileReception{id:multer_handling}
          "Multer file handling"
          @evidence{
            file:"health-routes.ts",
            lines:"22-62",
            code:"const healthDataUpload = multer({...})"
          }
          @processing{
            destination:"uploads/ directory",
            filename:"health-{nanoid}-{originalname}",
            validation:"MIME type and extension checks"
          }
        
        ##goServiceActivation{id:acceleration_check}
          "Go service auto-start for large files"
          @evidence{
            file:"health-routes.ts",
            lines:"187-189",
            code:"if (fileSize > 5 * 1024 * 1024) { await startGoAccelerationService(); }"
          }
          @processing{
            threshold:"5MB file size",
            service:"go-file-accelerator",
            fallback:"TypeScript processing"
          }
        
        ##dataParsing{id:file_parsing}
          "Parse health data file"
          @cluster{parsers, type:processing}
            "Apple Health XML parser"
            "Google Fit JSON parser"
            "CDA XML parser"
            "Generic CSV parser"
          @/cluster
          @processing{
            service:"HealthDataParser.parseFile()",
            detection:"Auto-detect format",
            streaming:"For large files"
          }
        
        ##dataValidation{id:server_validation}
          "Validate parsed health data"
          @cluster{validation, type:checks}
            "Data type validation"
            "Value range checks"
            "Timestamp validation"
            "Category assignment"
          @/cluster
        
        ##databaseStorage{id:batch_insert, @critical}
          "Store health data in database"
          @evidence{
            file:"health-routes.ts",
            lines:"215",
            code:"await storage.createHealthDataBatch(validatedData);"
          }
          @processing{
            batching:"1000 records per batch",
            deduplication:"Check existing records",
            transaction:"Atomic operation"
          }
      
      ##responseFlow{id:import_response, type:layer}
        "Import result response"
        @processing{
          success:{
            success: true,
            totalRecords: "number",
            imported: "number",
            metadata: {}
          },
          error:{
            message: "error description",
            details: "parsing errors"
          }
        }
      
      ##frontendUpdate{id:post_import, type:layer}
        "Frontend post-import actions"
        @processing{
          refreshData:"refetchHealthData()",
          notification:"Success toast",
          dashboardUpdate:"Immediate visibility"
        }
    
    ##architecturalLayers{id:layers, type:architecture}
      "Import system architecture"
      
      ##presentationLayer{id:ui_components}
        @cluster{components, type:react}
          "HealthDataImport.tsx - Main component"
          "FileUpload component"
          "Progress indicators"
          "Toast notifications"
        @/cluster
      
      ##fileProcessingLayer{id:file_handling}
        @cluster{services, type:backend}
          "Multer file middleware"
          "File validation service"
          "Temporary file storage"
          "Cleanup routines"
        @/cluster
      
      ##parsingLayer{id:data_parsing}
        @cluster{parsers, type:services}
          "HealthDataParser service"
          "Format-specific parsers"
          "Streaming processors"
          "Go acceleration service"
        @/cluster
      
      ##dataLayer{id:storage}
        @cluster{database, type:persistence}
          "Batch insert operations"
          "Deduplication queries"
          "Transaction management"
          "Index optimization"
        @/cluster
    
    ##errorBoundaries{id:error_handling, type:reliability}
      "Import error handling"
      
      ##uploadErrors{id:network_errors}
        @cluster{handling, type:errors}
          "Network timeout handling"
          "File size exceeded"
          "Invalid file type"
          "Upload cancellation"
        @/cluster
      
      ##parsingErrors{id:parse_failures}
        @cluster{handling, type:errors}
          "Malformed file structure"
          "Unsupported format"
          "Partial parsing success"
          "Memory overflow protection"
        @/cluster
      
      ##storageErrors{id:database_errors}
        @cluster{handling, type:errors}
          "Duplicate data handling"
          "Transaction rollback"
          "Storage quota exceeded"
          "Connection failures"
        @/cluster
    
    ##performanceConsiderations{id:optimization, type:performance}
      "Import performance optimizations"
      
      ##largeFileHandling{id:file_optimization}
        @cluster{strategies, type:performance}
          "Streaming file processing"
          "Go service acceleration"
          "Chunk-based parsing"
          "Memory-efficient algorithms"
        @/cluster
      
      ##databasePerformance{id:storage_optimization}
        @cluster{optimizations, type:database}
          "Batch inserts (1000 records)"
          "Prepared statements"
          "Index-aware operations"
          "Connection pooling"
        @/cluster
    
    ##securityConsiderations{id:security, type:protection}
      "Import security measures"
      
      ##fileValidation{id:upload_security}
        @cluster{measures, type:security}
          "File type restrictions"
          "Size limitations"
          "Malware scanning hooks"
          "Sanitized filenames"
        @/cluster
      
      ##dataPrivacy{id:health_privacy}
        @cluster{protections, type:privacy}
          "User-scoped imports only"
          "No cross-user access"
          "Secure file storage"
          "Cleanup after processing"
        @/cluster
    
    ##integrationEvidence{id:verified_integration, type:validation}
      "Integration verification"
      
      ##apiEndpoint{id:import_route}
        @evidence{
          file:"health-routes.ts",
          lines:"177-227",
          code:"app.post('/api/health-data/import', healthDataUpload.single('file'), ...)"
        }
      
      ##parserService{id:parsing_logic}
        @evidence{
          file:"health-routes.ts",
          lines:"192-195",
          code:"const parseResult = await HealthDataParser.parseFile(...)"
        }
      
      ##componentUsage{id:ui_integration}
        @evidence{
          file:"HealthDataSection.tsx",
          lines:"376",
          code:"<HealthDataImport />"
        }
    
    ##dependencies{id:feature_dependencies, type:graph}
      "Import system dependencies"
      
      ##infrastructureDependencies{id:system_deps}
        @cluster{services, type:dependency}
          "File system access"
          "Multer middleware"
          "Go acceleration service"
          "Database connection"
        @/cluster
      
      ##parserDependencies{id:format_support}
        @cluster{formats, type:dependency}
          "XML parsing libraries"
          "JSON parsing"
          "CSV parsing"
          "Compression utilities"
        @/cluster
    
    ##impacts{id:affected_features, type:graph}
      "Features impacted by import"
      
      ##dataAvailability{id:dashboard_data}
        @cluster{effects, type:impact}
          "Populates all dashboard views"
          "Enables chart visualizations"
          "Provides coaching data"
          "Updates metrics immediately"
        @/cluster
      
      ##systemLoad{id:processing_impact}
        @cluster{effects, type:impact}
          "Temporary CPU usage spike"
          "Memory usage for parsing"
          "Database write load"
          "Network bandwidth usage"
        @/cluster