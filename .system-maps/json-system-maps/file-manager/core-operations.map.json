
{
  "_tableOfContents": {
    "domain": "file-manager",
    "features": [
      "upload-file",
      "delete-files", 
      "refresh-files",
      "list-view",
      "grid-view",
      "file-selection",
      "web-share",
      "qr-code-generation"
    ],
    "totalFeatures": 8,
    "lastUpdated": "2025-01-10"
  },
  "upload-file": {
    "_meta": {
      "feature": "upload-file",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User clicks upload button and selects files",
    "dataFlow": {
      "request": "FileUploadDialog → useFileUpload → UniversalFileService → /api/upload → files table",
      "response": "Database → API → React Query → FileList refresh",
      "sideEffects": ["Go acceleration for large files", "Category assignment", "Compression optimization"]
    },
    "files": {
      "ui": ["FileUploadDialog.tsx", "useFileUpload.ts", "FileActionsToolbar.tsx"],
      "api": ["server/routes.ts"],
      "data": ["files", "fileCategories"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": ["query:files", "query:categories"],
      "refreshes": ["FileList", "FileActionsToolbar"],
      "triggers": ["file-processing", "metadata-extraction"]
    },
    "errorPaths": {
      "network": "Upload retry with exponential backoff",
      "validation": "File type/size validation errors",
      "business": "Category assignment fallback to uncategorized"
    },
    "dependencies": {
      "internal": ["categories", "universal-file-service"],
      "external": ["Go acceleration service"],
      "shared": ["FileAccelerationService", "UniversalFileService"]
    }
  },
  "delete-files": {
    "_meta": {
      "feature": "delete-files",
      "domain": "file-manager", 
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects files and clicks delete button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileApi.deleteFiles → /api/files/delete → files table",
      "response": "Database → API → React Query invalidation → UI refresh",
      "sideEffects": ["File system cleanup", "Cache invalidation"]
    },
    "files": {
      "ui": ["FileActionsToolbar.tsx", "useFileApi.ts", "useFileManagerState.ts"],
      "api": ["server/routes.ts"],
      "data": ["files"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": ["query:files"],
      "refreshes": ["FileList", "FileActionsToolbar"],
      "triggers": ["file-cleanup"]
    },
    "errorPaths": {
      "network": "Retry deletion with confirmation",
      "validation": "File permission errors",
      "business": "Partial deletion success handling"
    },
    "dependencies": {
      "internal": ["file-selection"],
      "external": [],
      "shared": ["useFileManagerState"]
    }
  },
  "refresh-files": {
    "_meta": {
      "feature": "refresh-files",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User clicks refresh button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileApi.refetchFiles → /api/files → files table",
      "response": "Database → API → React Query → FileList update",
      "sideEffects": ["Cache refresh", "UI synchronization"]
    },
    "files": {
      "ui": ["FileActionsToolbar.tsx", "useFileApi.ts"],
      "api": ["server/routes.ts"],
      "data": ["files", "fileCategories"],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": ["query:files"],
      "refreshes": ["FileList"],
      "triggers": ["ui-sync"]
    },
    "errorPaths": {
      "network": "Show stale data with error indicator",
      "validation": "Display error message",
      "business": "Fallback to cached data"
    },
    "dependencies": {
      "internal": [],
      "external": [],
      "shared": ["useFileApi"]
    }
  },
  "list-view": {
    "_meta": {
      "feature": "list-view",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects list view mode",
    "dataFlow": {
      "request": "ViewToggle → useFileManagerState.setViewMode → FileList re-render",
      "response": "State update → UI layout change",
      "sideEffects": ["View preference saved"]
    },
    "files": {
      "ui": ["FileList.tsx", "useFileManagerState.ts"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": ["FileList"],
      "triggers": ["view-mode-change"]
    },
    "errorPaths": {
      "network": "N/A - local state only",
      "validation": "Fallback to grid view",
      "business": "Default view mode restoration"
    },
    "dependencies": {
      "internal": ["file-selection"],
      "external": [],
      "shared": ["useFileManagerState"]
    }
  },
  "grid-view": {
    "_meta": {
      "feature": "grid-view",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects grid view mode",
    "dataFlow": {
      "request": "ViewToggle → useFileManagerState.setViewMode → FileList re-render",
      "response": "State update → UI layout change",
      "sideEffects": ["View preference saved"]
    },
    "files": {
      "ui": ["FileList.tsx", "useFileManagerState.ts"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": ["FileList"],
      "triggers": ["view-mode-change"]
    },
    "errorPaths": {
      "network": "N/A - local state only",
      "validation": "Fallback to list view",
      "business": "Default view mode restoration"
    },
    "dependencies": {
      "internal": ["file-selection"],
      "external": [],
      "shared": ["useFileManagerState"]
    }
  },
  "file-selection": {
    "_meta": {
      "feature": "file-selection",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User clicks file checkboxes or select all",
    "dataFlow": {
      "request": "FileList checkbox → useFileManagerState.toggleSelection → state update",
      "response": "State update → FileActionsToolbar enable/disable",
      "sideEffects": ["Bulk operation availability"]
    },
    "files": {
      "ui": ["FileList.tsx", "useFileManagerState.ts", "FileActionsToolbar.tsx"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": ["FileActionsToolbar"],
      "triggers": ["bulk-operations-toggle"]
    },
    "errorPaths": {
      "network": "N/A - local state only",
      "validation": "Selection state reset",
      "business": "Clear selection on error"
    },
    "dependencies": {
      "internal": [],
      "external": [],
      "shared": ["useFileManagerState"]
    }
  },
  "web-share": {
    "_meta": {
      "feature": "web-share",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects files and clicks share button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileSharing.shareSelectedFiles → Web Share API",
      "response": "Native share dialog → sharing completion",
      "sideEffects": ["Platform-specific sharing"]
    },
    "files": {
      "ui": ["FileActionsToolbar.tsx", "useFileSharing.ts"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": ["native-sharing"]
    },
    "errorPaths": {
      "network": "Fallback to copy URL",
      "validation": "Share availability check",
      "business": "Platform compatibility fallback"
    },
    "dependencies": {
      "internal": ["file-selection"],
      "external": ["Web Share API"],
      "shared": ["useFileSharing"]
    }
  },
  "qr-code-generation": {
    "_meta": {
      "feature": "qr-code-generation",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects files and clicks QR code button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileSharing.generateAndShowQRCode → QrCodeDialog",
      "response": "QR code generation → Modal display",
      "sideEffects": ["QR code image generation"]
    },
    "files": {
      "ui": ["FileActionsToolbar.tsx", "useFileSharing.ts", "QrCodeDialog.tsx"],
      "api": [],
      "data": [],
      "types": ["shared/schema.ts"]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": ["qr-modal-display"]
    },
    "errorPaths": {
      "network": "QR generation failure message",
      "validation": "File URL validation",
      "business": "Fallback to text URLs"
    },
    "dependencies": {
      "internal": ["file-selection"],
      "external": ["QR code library"],
      "shared": ["useFileSharing", "QrCodeDialog"]
    }
  }
}
