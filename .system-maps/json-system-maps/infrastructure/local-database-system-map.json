{
  "_meta": {
    "domain": "infrastructure",
    "lastUpdated": "2025-01-08",
    "status": "active"
  },
  "tableOfContents": {
    "database-setup": {
      "features": ["setup-script", "schema-sync", "user-seeding", "connection-switching"],
      "components": [],
      "endpoints": []
    },
    "testing-verification": {
      "features": ["setup-verification"],
      "components": [],
      "endpoints": []
    }
  },
  "featureGroups": {
    "database-setup": {
      "description": "Local PostgreSQL database setup and configuration",
      "features": {
        "setup-script": {
          "_meta": {
            "feature": "setup-script",
            "domain": "database-setup",
            "status": "active"
          },
          "trigger": "Developer runs 'npm run db:setup-local'",
          "dataFlow": {
            "request": "CLI → setup-local-db.sh → PostgreSQL commands → setup-local-schema.ts → seed-default-user.ts",
            "response": "Database created → .env.local generated → Schema applied → Default user created → Connection verified",
            "sideEffects": ["PostgreSQL user creation", "Database privilege grants", "Default application user creation"]
          },
          "files": {
            "scripts": ["setup-local-db.sh"],
            "config": [".env.local"],
            "data": ["wellness_ai_local", "wellness_user"]
          },
          "cacheFlow": {
            "invalidates": [],
            "refreshes": [],
            "triggers": ["schema-sync", "user-seeding"]
          },
          "errorPaths": {
            "postgresql": "Check PostgreSQL service status and permissions",
            "permissions": "Verify user has database creation privileges"
          },
          "dependencies": {
            "external": ["PostgreSQL@14"],
            "internal": ["schema-sync"]
          }
        },
        "schema-sync": {
          "_meta": {
            "feature": "schema-sync",
            "domain": "database-setup",
            "status": "active"
          },
          "trigger": "Automatic after setup-script or manual 'tsx scripts/setup-local-schema.ts'",
          "dataFlow": {
            "request": "Script → .env.local → PostgreSQL connection → Drizzle schema push",
            "response": "Schema applied → Indexes created → Tables verified",
            "sideEffects": ["Performance index creation", "Table structure updates"]
          },
          "files": {
            "scripts": ["scripts/setup-local-schema.ts"],
            "config": ["drizzle.config.local.ts"],
            "migrations": ["migrations/create_indexes.sql"],
            "data": ["all schema tables"]
          },
          "cacheFlow": {
            "invalidates": [],
            "refreshes": [],
            "triggers": ["user-seeding", "connection-switching"]
          },
          "errorPaths": {
            "connection": "Verify .env.local DATABASE_URL configuration",
            "schema": "Check Drizzle config and schema definitions"
          },
          "dependencies": {
            "external": ["drizzle-kit", "pg"],
            "internal": ["setup-script"],
            "shared": ["shared/schema.ts"]
          }
        },
        "user-seeding": {
          "_meta": {
            "feature": "user-seeding",
            "domain": "database-setup",
            "status": "active"
          },
          "trigger": "Automatic after schema-sync or manual 'npm run db:seed-user'",
          "dataFlow": {
            "request": "Script → Database connection → Check existing user → Insert if missing",
            "response": "User created with ID=1 → Sequence updated → Success confirmation",
            "sideEffects": ["Default user creation", "Sequence adjustment for next users"]
          },
          "files": {
            "scripts": ["scripts/seed-default-user.ts"],
            "config": ["package.json"],
            "data": ["users table (ID=1)"]
          },
          "cacheFlow": {
            "invalidates": [],
            "refreshes": [],
            "triggers": ["Enables file upload operations"]
          },
          "errorPaths": {
            "duplicate": "Safely skips if user already exists",
            "connection": "Database connection error handling"
          },
          "dependencies": {
            "external": ["pg", "drizzle-orm"],
            "internal": ["schema-sync"],
            "shared": ["shared/schema.ts"]
          }
        },
        "connection-switching": {
          "_meta": {
            "feature": "connection-switching",
            "domain": "database-setup",
            "status": "active"
          },
          "trigger": "App startup with environment detection",
          "dataFlow": {
            "request": "App start → Environment detection → Database connection selection",
            "response": "Local PostgreSQL (dev) or Neon (Replit) → db/pool export",
            "sideEffects": ["Conditional pg module loading", "Connection pool creation"]
          },
          "files": {
            "core": ["server/db.ts"],
            "config": [".env.local", ".env"],
            "types": ["shared/schema.ts"]
          },
          "cacheFlow": {
            "invalidates": [],
            "refreshes": [],
            "triggers": ["All database operations"]
          },
          "errorPaths": {
            "replit": "Uses Neon fallback with helpful error messages",
            "local": "Provides PostgreSQL setup guidance"
          },
          "dependencies": {
            "external": ["pg", "@neondatabase/serverless"],
            "internal": ["schema-sync"],
            "conditional": ["pg module only in local development"]
          }
        }
      }
    },
    "testing-verification": {
      "description": "Database setup verification and testing",
      "features": {
        "setup-verification": {
          "_meta": {
            "feature": "setup-verification",
            "domain": "testing-verification",
            "status": "active"
          },
          "trigger": "Developer runs 'npm run test:local-db'",
          "dataFlow": {
            "request": "Test script → Local database connection → Table queries",
            "response": "Connection verified → Table counts → Success report",
            "sideEffects": ["Connection validation", "Schema verification"]
          },
          "files": {
            "tests": ["test-local-setup.js"],
            "config": ["package.json"]
          },
          "cacheFlow": {
            "invalidates": [],
            "refreshes": [],
            "triggers": []
          },
          "errorPaths": {
            "connection": "Database connection troubleshooting steps",
            "schema": "Schema setup verification guidance"
          },
          "dependencies": {
            "internal": ["connection-switching"],
            "external": ["pg"]
          }
        }
      }
    }
  },
  "integrationStatus": {
    "setup-script": {
      "status": "active",
      "lastVerified": "2025-01-07",
      "evidence": "Successfully creates PostgreSQL database and user",
      "knownIssues": []
    },
    "schema-sync": {
      "status": "active",
      "lastVerified": "2025-01-07",
      "evidence": "Drizzle schema push completes successfully with all indexes",
      "knownIssues": []
    },
    "user-seeding": {
      "status": "active",
      "lastVerified": "2025-01-08",
      "evidence": "Default user with ID=1 created successfully, fixes file upload foreign key constraint",
      "knownIssues": ["Fixed: File uploads failing due to missing user ID=1"]
    },
    "connection-switching": {
      "status": "active",
      "lastVerified": "2025-01-07",
      "evidence": "App starts successfully in both Replit and local environments",
      "knownIssues": [
        "Fixed: PostgreSQL import issue with conditional loading",
        "Enhanced: Environment detection with REPLIT_DB_URL checks"
      ]
    },
    "setup-verification": {
      "status": "active",
      "lastVerified": "2025-01-07",
      "evidence": "Test script successfully connects and validates schema",
      "knownIssues": []
    }
  },
  "database": {
    "tablesCreated": [
      "atomic_facts", "chat_messages", "connected_devices", "conversation_messages",
      "conversations", "file_access_log", "file_categories", "file_retention_settings",
      "files", "health_data", "health_data_access_log", "memory_access_log",
      "memory_consolidation_log", "memory_entries", "memory_graph_metrics",
      "memory_relationships", "memory_triggers", "sample_health_data",
      "user_health_consent", "users"
    ],
    "indexesApplied": [
      "Performance indexes for files, chat_messages, health_data, memory_entries",
      "GIN indexes for metadata and content search",
      "Composite indexes for user-scoped queries"
    ],
    "defaultData": [
      "users table: Default user with ID=1 (username: default_user) for file operations and FIXED_USER_ID references"
    ]
  }
}