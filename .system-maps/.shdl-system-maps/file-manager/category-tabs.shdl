@context{domain:file_manager, feature_group:display_organization, format:shdl, version:2.0.0, complexity:medium, enforcement:strict}
@meta{last_updated:"2025-01-01T10:00:00Z", validation_status:complete, token_estimate:650, critical_paths:6, processing_priority:2}

#CATEGORY_TABS{confidence:1.0, integration_status:complete, @standard}
  ##feature_definition{id:category_tabs_root, type:navigation_system, confidence:1.0}
    "Tab-based category navigation and filtering system"
    →primary_user_workflow[view_tabs→select_category→filter_files→see_counts]
    →dependencies[category_data, file_filtering, tab_navigation]
    →user_workflows[browse_categories, filter_by_category, view_file_counts]

  @cluster{core_workflow, confidence:1.0}
    ##tab_navigation_workflow{id:category_filtering_flow, type:user_navigation, confidence:1.0}
      "Category tab selection and file filtering"
      @processing{
        render_category_tabs→user_clicks_tab→update_active_tab→
        filter_files_by_category→update_file_display→show_counts
      }
      @data_flow{
        tab_data:[categories_array, special_tabs],
        state_update:[setActiveTab(categoryId)],
        file_filtering:[activeTab_determines_visible_files],
        count_calculation:[real_time_file_counts]
      }
  @/cluster

  @cluster{frontend_components, confidence:1.0}
    ##presentation_layer{id:tab_ui_components, type:client_side, confidence:1.0}
      CategoryTabs{
        path:"client/src/components/filemanager/CategoryTabs.tsx",
        props:{
          categories:"FileCategory[]",
          files:"FileItem[]",
          activeTab:"string",
          onTabChange:"(tab: string) => void",
          totalFilesCount:"number"
        },
        special_tabs:[
          {id:"all", name:"All Files", icon:"Folder"},
          {id:"uncategorized", name:"Uncategorized", icon:"FolderOpen"}
        ],
        status:verified
      },
      TabButton{
        structure:{
          icon:category_icon_or_default,
          label:category_name,
          count:files_in_category,
          state:active_or_inactive
        },
        styling:{
          base:"flex items-center gap-2 px-3 py-2",
          active:"bg-primary text-primary-foreground",
          inactive:"hover:bg-muted"
        }
      }

    ##tab_layout{id:visual_organization, confidence:1.0}
      container_styling{
        wrapper:"flex gap-2 flex-wrap",
        responsive:wraps_on_small_screens,
        scrollable:horizontal_overflow_auto
      },
      tab_elements{
        icon_display:{
          source:"category.icon || default_icon",
          size:"h-4 w-4",
          alignment:"inline with text"
        },
        count_badge:{
          format:"({count})",
          styling:"text-sm opacity-70",
          calculation:"real-time based on files"
        }
      }
  @/cluster

  @cluster{filtering_logic, confidence:1.0}
    ##file_filtering{id:category_based_filtering, confidence:1.0}
      filter_implementation{
        location:"FileManagerSection.tsx:70-79",
        logic:{
          all:"return all files",
          uncategorized:"files.filter(f => !f.categoryId)",
          category:"files.filter(f => f.categoryId === activeTab)"
        },
        memoization:"useMemo for performance"
      },
      special_categories{
        all:{
          id:"all",
          shows:"every file regardless of category",
          count:"total file count"
        },
        uncategorized:{
          id:"uncategorized",
          shows:"files with categoryId === null",
          count:"computed dynamically"
        }
      }
  @/cluster

  @cluster{count_calculation, confidence:1.0}
    ##file_counting{id:dynamic_counts, confidence:1.0}
      count_logic{
        implementation:"files.filter(predicate).length",
        updates:"automatically when files change",
        performance:"computed on each render"
      },
      display_format{
        pattern:"Category Name (X)",
        zero_handling:"still shows tab with (0)",
        loading_state:"counts update after file fetch"
      }
  @/cluster

  @cluster{state_management, confidence:1.0}
    ##active_tab_state{id:navigation_state, confidence:1.0}
      state_location{
        hook:"useFileManagerState",
        property:"activeTab",
        setter:"setActiveTab",
        default:"all"
      },
      state_persistence{
        across_refreshes:"maintained in React state",
        on_category_delete:"fallback to 'all'",
        on_mount:"default to 'all'"
      }
  @/cluster

  @cluster{user_categories, confidence:1.0}
    ##custom_categories{id:user_defined_tabs, confidence:1.0}
      category_source{
        api:"GET /api/categories",
        includes:"system and user categories",
        real_time:"updates via React Query"
      },
      tab_generation{
        mapping:"categories.map(cat => tab)",
        ordering:"after special tabs",
        properties:"id, name, icon, color"
      }
  @/cluster

  @cluster{visual_indicators, confidence:1.0}
    ##active_state{id:selected_tab_indication, confidence:1.0}
      visual_feedback{
        background:"bg-primary",
        text_color:"text-primary-foreground",
        transition:"smooth color change"
      },
      hover_state{
        inactive_tabs:"hover:bg-muted",
        cursor:"pointer",
        disabled:"none currently"
      }
  @/cluster

  @cluster{edge_cases, confidence:1.0}
    ##tab_edge_handling{id:special_cases, confidence:1.0}
      no_categories{
        shows:"only All and Uncategorized tabs",
        behavior:"normal filtering still works"
      },
      deleted_category{
        files:"become uncategorized",
        active_tab:"switches to 'all' if needed"
      },
      many_categories{
        layout:"wraps to multiple lines",
        scrolling:"horizontal on single line",
        performance:"no pagination implemented"
      }
  @/cluster

@processing{
  flow_sequence:[
    load_categories, render_tabs, calculate_counts,
    handle_clicks, update_state, filter_files
  ],
  critical_paths:[
    category_loading, count_calculation, filter_application
  ],
  performance_considerations:[
    count_computation_on_each_render,
    potential_optimization_with_memoization
  ]
}

@dependencies{
  frontend:[
    React, CategoryTabs_component, useFileManagerState,
    FileCategory_type, FileItem_type
  ],
  icons:[
    Lucide_React_icons, custom_category_icons
  ]
}

@integration_evidence{
  verified_flows:[
    "Tabs render for all categories",
    "Special tabs (All, Uncategorized) always present",
    "Click changes active tab",
    "File list filters based on active tab",
    "Counts update dynamically",
    "Active tab styling applied correctly"
  ],
  category_features:[
    "System categories shown",
    "User categories shown",
    "Real-time count updates",
    "Proper uncategorized filtering"
  ]
}