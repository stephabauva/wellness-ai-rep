{
  "features": {
    "memory-detection": {
      "description": "Automatically detects and extracts memorable information from user messages during chat interactions.",
      "userFlow": [
        "User sends a message in chat",
        "Background memory detection analyzes message",
        "System extracts facts and creates memory entries",
        "Memory is stored with confidence scoring and categorization"
      ],
      "components": [
        "memory-service",
        "simple-memory-detection",
        "enhanced-memory-service"
      ]
    },
    "memory-retrieval": {
      "description": "Retrieves relevant memories to enhance AI responses with contextual information.",
      "userFlow": [
        "User sends a new message",
        "System builds context from recent conversation",
        "Memory search finds relevant past information",
        "Top memories included in AI system prompt"
      ],
      "components": [
        "memory-service",
        "intelligent-memory-retrieval",
        "performance-memory-core"
      ]
    },
    "memory-relationships": {
      "description": "Advanced memory graph that connects related memories and detects contradictions.",
      "userFlow": [
        "New memory is created",
        "System analyzes relationships with existing memories",
        "Atomic facts are extracted and connected",
        "Memory graph is updated with new relationships"
      ],
      "components": [
        "memory-graph-service",
        "fast-relationship-engine",
        "advanced-memory-ai-service"
      ]
    },
    "memory-overview": {
      "description": "Lightweight memory statistics and counts without loading full memory content to eliminate automatic polling.",
      "userFlow": [
        "User navigates to memory section",
        "System loads memory overview with counts by category",
        "User manually triggers full memory loading when needed",
        "Detailed memories are loaded only on user request"
      ],
      "components": [
        "MemorySection",
        "memory-service"
      ]
    }
  },
  "components": {
    "memory-service": {
      "path": "server/services/memory-service.ts",
      "type": "Service Class",
      "description": "Core memory management with detection, storage, and retrieval capabilities.",
      "calls": ["POST /api/memory/create", "GET /api/memory/contextual"],
      "uses": ["cache-service", "ai-service"],
      "invalidates": ["query:memories"]
    },
    "enhanced-memory-service": {
      "path": "server/services/enhanced-memory-service.ts",
      "type": "Service Class",
      "description": "Enhanced memory operations with background processing and optimization.",
      "calls": [],
      "uses": ["memory-service", "enhanced-background-processor"],
      "invalidates": ["query:memories"]
    },
    "intelligent-memory-retrieval": {
      "path": "server/services/intelligent-memory-retrieval.ts",
      "type": "Service Class",
      "description": "Phase 3 advanced memory retrieval with query expansion and contextual scoring.",
      "calls": [],
      "uses": ["ai-service", "cache-service"],
      "invalidates": []
    },
    "memory-graph-service": {
      "path": "server/services/memory-graph-service.ts",
      "type": "Service Class",
      "description": "Phase 2 memory relationship mapping and atomic facts extraction.",
      "calls": [],
      "uses": ["fast-relationship-engine", "ai-service"],
      "invalidates": ["query:memory-relationships"]
    },
    "performance-memory-core": {
      "path": "server/services/performance-memory-core.ts",
      "type": "Service Class",
      "description": "Ultra-fast memory operations with aggressive caching and minimal database queries.",
      "calls": [],
      "uses": ["cache-service"],
      "invalidates": []
    },
    "MemorySection": {
      "path": "client/src/components/MemorySection.tsx",
      "type": "React Component",
      "description": "UI component for viewing and managing user memories with manual loading to eliminate automatic polling.",
      "calls": ["GET /api/memories/overview", "GET /api/memories", "POST /api/memories/manual"],
      "uses": [],
      "invalidates": ["query:memories", "query:memories-overview"]
    }
  },
  "apiEndpoints": {
    "POST /api/memory/create": {
      "description": "Creates a new memory entry with confidence scoring and categorization.",
      "handlerFile": "server/routes.ts",
      "requestBody": "{ content: string, userId: number, category?: string, importance?: number }",
      "response": "{ id: string, content: string, category: string, confidence: number }",
      "readsFrom": ["users.id"],
      "modifies": ["memories", "memory_embeddings"]
    },
    "GET /api/memory/contextual": {
      "description": "Retrieves memories relevant to the current conversation context.",
      "handlerFile": "server/routes.ts",
      "requestBody": "",
      "response": "[{ id: string, content: string, relevanceScore: number, retrievalReason: string }]",
      "readsFrom": ["memories", "memory_embeddings", "memory_relationships"],
      "modifies": ["memory_access_logs"]
    },
    "POST /api/memory/intelligent-retrieve": {
      "description": "Phase 3 intelligent memory retrieval with query expansion and adaptive scoring.",
      "handlerFile": "server/routes.ts",
      "requestBody": "{ context: string, userId: number, maxResults?: number }",
      "response": "[{ memory: object, scores: object, retrievalReason: string }]",
      "readsFrom": [
        "memories",
        "memory_embeddings",
        "memory_relationships",
        "atomic_facts"
      ],
      "modifies": ["memory_access_logs"]
    },
    "POST /api/memory/relationship-analysis": {
      "description": "Analyzes relationships between memories for graph building.",
      "handlerFile": "server/routes.ts",
      "requestBody": "{ memoryId: string, userId: number }",
      "response": "{ relationships: object[], clusters: object[] }",
      "readsFrom": ["memories", "memory_relationships", "atomic_facts"],
      "modifies": []
    },
    "GET /api/memories/overview": {
      "description": "Returns lightweight memory statistics and category counts without loading full memory content to eliminate automatic polling.",
      "handlerFile": "server/routes.ts",
      "requestBody": "",
      "response": "{ total: number, categories: { preference: number, personal_info: number, context: number, instruction: number } }",
      "readsFrom": ["memories"],
      "modifies": []
    }
  },
  "database": {
    "schemaFile": "shared/schema.ts",
    "tables": {
      "memories": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "content": { "type": "text" },
          "category": { "type": "text" },
          "importance": { "type": "real" },
          "confidence": { "type": "real" },
          "keywords": { "type": "text[]" },
          "createdAt": { "type": "timestamp" },
          "accessCount": { "type": "integer" }
        },
        "relations": [
          {
            "type": "many-to-one",
            "from": "memories.userId",
            "to": "users.id",
            "description": "Each memory belongs to a user"
          }
        ]
      },
      "memory_embeddings": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "memoryId": { "type": "uuid", "foreignKey": "memories.id" },
          "embedding": { "type": "vector(768)" },
          "createdAt": { "type": "timestamp" }
        }
      },
      "memory_relationships": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "fromMemoryId": { "type": "uuid", "foreignKey": "memories.id" },
          "toMemoryId": { "type": "uuid", "foreignKey": "memories.id" },
          "relationshipType": { "type": "text" },
          "strength": { "type": "real" },
          "createdAt": { "type": "timestamp" }
        }
      },
      "atomic_facts": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "memoryId": { "type": "uuid", "foreignKey": "memories.id" },
          "fact": { "type": "text" },
          "confidence": { "type": "real" },
          "extractedAt": { "type": "timestamp" }
        }
      }
    }
  },
  "dataStores": {
    "query:memories": {
      "type": "React Query Key",
      "description": "Caches user memory data for the UI with disabled automatic polling"
    },
    "query:memories-overview": {
      "type": "React Query Key",
      "description": "Caches lightweight memory statistics and category counts"
    },
    "query:memory-relationships": {
      "type": "React Query Key",
      "description": "Caches memory relationship graph data"
    }
  }
}
