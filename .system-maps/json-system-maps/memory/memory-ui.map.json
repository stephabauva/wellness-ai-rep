{
  "_meta": {
    "feature": "memory-ui",
    "domain": "memory",
    "lastUpdated": "2025-01-08T10:00:00Z",
    "status": "active"
  },
  "trigger": "User navigates to memory section or performs memory management actions",
  "dataFlow": {
    "request": "MemorySection → useQuery → GET /api/memories/* → memory-service → database",
    "response": "Database → memory-service → API → React Query → MemorySection UI updates",
    "sideEffects": ["Cache invalidation", "UI state synchronization", "Memory counts update"]
  },
  "files": {
    "ui": ["client/src/components/MemorySection.tsx"],
    "api": ["server/routes/memory-routes.ts"],
    "data": ["memory_entries", "memory_triggers", "memory_access_log", "query:memories", "query:memories-overview"],
    "types": ["shared/schema.ts"]
  },
  "cacheFlow": {
    "invalidates": ["query:memories", "query:memories-overview"],
    "refreshes": ["MemorySection", "CategoryTabs", "MemoryCards"],
    "triggers": ["memory-count-updates", "category-filter-updates"]
  },
  "errorPaths": {
    "network": "Show error message, retry button available",
    "validation": "Form validation errors displayed inline",
    "business": "Toast notifications for operation failures"
  },
  "dependencies": {
    "internal": ["memory-core", "chat-system"],
    "external": ["React Query", "Tailwind CSS"],
    "shared": ["LoadingSpinner", "ErrorBoundary", "ToastNotifications"]
  },
  "featureGroups": {
    "memory-overview": {
      "trigger": "User navigates to memory section",
      "dataFlow": {
        "request": "MemorySection → useQuery → GET /api/memories/overview",
        "response": "Database counts → API → React Query → Overview UI update"
      },
      "files": {
        "ui": ["MemorySection.tsx"],
        "api": ["memory-routes.ts"],
        "data": ["memory_entries"]
      },
      "userFlow": [
        "User navigates to memory section",
        "System loads lightweight overview with counts by category",
        "User sees total memories and category breakdown without loading full content",
        "Category tabs show counts (All, Preferences, Personal, Context, Instructions)",
        "Overview updates automatically after memory operations"
      ]
    },
    "manual-memory-entry": {
      "trigger": "User clicks 'Add Memory' button",
      "dataFlow": {
        "request": "AddMemoryForm → useState → POST /api/memories/manual",
        "response": "Memory creation → API response → Query invalidation → UI refresh"
      },
      "files": {
        "ui": ["MemorySection.tsx"],
        "api": ["memory-routes.ts"],
        "data": ["memory_entries", "memory_embeddings"]
      },
      "userFlow": [
        "User clicks 'Add Memory' button",
        "Modal opens with memory entry form",
        "User enters content, selects category (preference/personal_info/context/instruction) and importance (1-10)",
        "System validates form inputs",
        "Memory created with embeddings and metadata",
        "Query cache invalidated",
        "UI updates with new memory in appropriate category",
        "Success toast notification shown"
      ]
    },
    "memory-browsing": {
      "trigger": "User clicks 'Show My Stored Memories' button",
      "dataFlow": {
        "request": "ShowMemoriesButton → useQuery → GET /api/memories",
        "response": "Database → API → React Query → Memory cards display"
      },
      "files": {
        "ui": ["MemorySection.tsx"],
        "api": ["memory-routes.ts"],
        "data": ["memory_entries", "memory_access_log"]
      },
      "userFlow": [
        "User clicks 'Show My Stored Memories' button (manual loading for performance)",
        "System loads all memories from database",
        "Memories displayed in cards with category badges and importance levels",
        "Each memory shows content, keywords, creation date, and access count",
        "Category filtering applied client-side",
        "Individual memory management options available"
      ]
    },
    "category-navigation": {
      "trigger": "User clicks category tab (All, Preferences, Personal, Context, Instructions)",
      "dataFlow": {
        "request": "CategoryTab → useState → Client-side filtering",
        "response": "Filtered memories → UI update with category-specific content"
      },
      "files": {
        "ui": ["MemorySection.tsx"],
        "api": [],
        "data": ["client-side-filter-state"]
      },
      "userFlow": [
        "User sees category tabs with counts (All, Preferences, Personal, Context, Instructions)",
        "User clicks on category tab",
        "System filters memories client-side by category",
        "Explanatory card shows category description and purpose",
        "Only memories matching selected category displayed",
        "Category-specific operations available"
      ]
    },
    "bulk-operations": {
      "trigger": "User selects multiple memories via checkboxes",
      "dataFlow": {
        "request": "BulkSelect → useState → DELETE /api/memories/bulk",
        "response": "Bulk deletion → API response → Query invalidation → UI refresh"
      },
      "files": {
        "ui": ["MemorySection.tsx"],
        "api": ["memory-routes.ts"],
        "data": ["memory_entries"]
      },
      "userFlow": [
        "User can select multiple memories with checkboxes",
        "Select all/clear selection options available",
        "Selected count displayed in real-time",
        "Bulk delete button enabled when memories selected",
        "Confirmation dialog shown before bulk deletion",
        "Bulk operation executed with progress feedback",
        "Query cache invalidated",
        "UI updates with removed memories and updated counts"
      ]
    },
    "memory-deletion": {
      "trigger": "User clicks delete button on individual memory",
      "dataFlow": {
        "request": "DeleteButton → confirmation → DELETE /api/memories/:id",
        "response": "Memory deactivation → API response → Query invalidation → UI refresh"
      },
      "files": {
        "ui": ["MemorySection.tsx"],
        "api": ["memory-routes.ts"],
        "data": ["memory_entries"]
      },
      "userFlow": [
        "User clicks delete button on individual memory",
        "Confirmation dialog shown",
        "User confirms deletion",
        "Memory marked as inactive (soft delete)",
        "Query cache invalidated",
        "UI updates memory counts and removes from list",
        "Success notification shown"
      ]
    }
  },
  "apiEndpoints": {
    "GET /api/memories/overview": {
      "description": "Returns lightweight memory statistics and category counts",
      "requestBody": "",
      "response": "{ total: number, categories: { preference: number, personal_info: number, context: number, instruction: number } }",
      "readsFrom": ["memory_entries"],
      "modifies": []
    },
    "GET /api/memories": {
      "description": "Fetches all user memories with category filtering",
      "requestBody": "",
      "response": "[{ id: string, content: string, category: string, importance: number, keywords: string[], createdAt: string, accessCount: number }]",
      "readsFrom": ["memory_entries", "memory_access_log"],
      "modifies": ["memory_access_log"]
    },
    "POST /api/memories/manual": {
      "description": "Creates a new memory entry from manual user input",
      "requestBody": "{ content: string, category: string, importance: number }",
      "response": "{ id: string, content: string, category: string, confidence: number }",
      "readsFrom": ["users.id"],
      "modifies": ["memory_entries", "memory_embeddings"]
    },
    "DELETE /api/memories/:id": {
      "description": "Soft delete individual memory (marks as inactive)",
      "requestBody": "",
      "response": "{ success: boolean }",
      "readsFrom": ["memory_entries"],
      "modifies": ["memory_entries"]
    },
    "DELETE /api/memories/bulk": {
      "description": "Bulk delete multiple memories",
      "requestBody": "{ memoryIds: string[] }",
      "response": "{ successCount: number, totalRequested: number }",
      "readsFrom": ["memory_entries"],
      "modifies": ["memory_entries"]
    }
  },
  "database": {
    "schemaFile": "shared/schema.ts",
    "tables": {
      "memory_entries": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "content": { "type": "text" },
          "category": { "type": "text" },
          "importance": { "type": "real" },
          "keywords": { "type": "text[]" },
          "createdAt": { "type": "timestamp" },
          "accessCount": { "type": "integer" },
          "isActive": { "type": "boolean" }
        }
      },
      "memory_triggers": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "trigger": { "type": "text" },
          "createdAt": { "type": "timestamp" }
        }
      }
    }
  },
  "dataStores": {
    "query:memories": {
      "type": "React Query Key",
      "description": "Caches user memory data with manual loading trigger"
    },
    "query:memories-overview": {
      "type": "React Query Key",
      "description": "Caches lightweight memory statistics and category counts"
    }
  }
}