@context{domain:chat, feature:context_building}
@meta{
  featureName:"context-building",
  featureGroup:"conversation-management", 
  parentFile:"./chat-domain.shdl",
  domain:"chat",
  lastUpdated:"2025-01-01T00:00:00Z",
  mappingVersion:"2.0.0"
}

#ROOT
  ##contextBuilding{id:context_building_feature, type:complete_mapping, @comprehensive}
    "Automatic conversation context for AI responses with message history"
    
    ##userFlow{id:user_workflow, type:user_journey, @sequential}
      "User experience with contextual conversations"
      @processing{
        step1:"User continues existing conversation",
        step2:"AI remembers previous messages",
        step3:"Responses build on prior context", 
        step4:"References to earlier topics work",
        step5:"Conversation flows naturally"
      }
    
    ##systemFlow{id:system_workflow, type:system_processing, @sequential}
      "System context management for conversations"
      @processing{
        process1:"Retrieve conversation history from database",
        process2:"Limit to recent 20 messages for context",
        process3:"Include user and assistant messages",
        process4:"Pass context to AI provider",
        process5:"Generate contextually aware response"
      }
    
    ##dataFlowTrace{id:data_flow, type:context_pipeline, @critical}
      "Context building and usage flow"
      
      ##contextRetrieval{id:history_fetch, type:data_gathering, @blocking}
        "Fetch conversation history for context"
        @processing{
          trigger:"Message send with conversationId",
          source:"conversationMessages table",
          limit:20,
          order:"createdAt ASC"
        }
      
      ##contextProcessing{id:context_preparation, type:layer, @sequential}
        "Context preparation for AI"
        
        ##databaseQuery{id:history_query}
          "Query recent messages"
          @cluster{sql_operation, type:database}
            "SELECT * FROM conversationMessages",
            "WHERE conversationId = ?",
            "ORDER BY createdAt",
            "LIMIT 20"
          @/cluster
        
        ##contextFormatting{id:message_formatting}
          "Format messages for AI context"
          @cluster{formatting, type:data_transform}
            "Map to role/content pairs",
            "Preserve message order",
            "Include attachments metadata",
            "Clean formatting"
          @/cluster
        
        ##aiProviderIntegration{id:context_passing}
          "Pass context to AI provider"
          @cluster{api_format, type:provider_specific}
            "OpenAI: messages array format",
            "Google: history parameter",
            "Role: user/assistant",
            "Content preservation"
          @/cluster
      
      ##contextUsage{id:ai_processing, type:layer}
        "AI uses context for responses"
        @processing{
          contextWindow:"Full conversation history",
          referenceability:"Can reference any prior message",
          continuity:"Maintains conversation flow"
        }
        @cluster{benefits, type:ai_capabilities}
          "Follow-up questions work",
          "Pronoun resolution",
          "Topic continuity",
          "Memory of instructions"
        @/cluster

    ##architecturalLayers{id:architecture, type:dependency_analysis}
      "Context building architecture"
      
      ##presentation{id:frontend_layer, type:ui_layer}
        ##contextTracking{id:frontend_context}
          @cluster{state_management, type:react_context}
            "currentConversationId in AppContext",
            "Passed to message sending",
            "Maintained across session"
          @/cluster
        
        ##contextIndicators{id:ui_feedback}
          @cluster{visual_cues, type:ui_elements}
            "Conversation title display",
            "Message count indicators",
            "Context active status"
          @/cluster
      
      ##businessLogic{id:backend_layer, type:server_layer}
        ##contextRetrieval{id:history_service}
          @cluster{implementation, type:business_logic}
            "Fetch conversation history",
            "Limit and sort messages",
            "Format for AI providers"
          @/cluster
        
        ##aiServiceIntegration{id:context_injection}
          @cluster{services, type:ai_integration}
            "ai-service.ts context handling",
            "Provider-specific formatting",
            "Context size management"
          @/cluster
      
      ##dataLayer{id:persistence_layer, type:data_layer}
        ##conversationStorage{id:context_persistence}
          @cluster{schema, type:database}
            "conversations table - sessions",
            "conversationMessages - history",
            "Indexed by conversationId",
            "Ordered by timestamp"
          @/cluster
        
        ##queryOptimization{id:context_queries}
          @cluster{performance, type:optimization}
            "Indexed conversation lookups",
            "Limited result sets (20)",
            "Efficient ordering"
          @/cluster

    ##contextManagement{id:context_features, type:feature_details}
      "Advanced context management features"
      
      ##contextWindow{id:history_limit}
        @cluster{limits, type:constraints}
          "20 message history default",
          "Prevents token overflow",
          "Maintains relevance",
          "Configurable per provider"
        @/cluster
      
      ##contextPreservation{id:continuity}
        @cluster{preservation, type:features}
          "Conversation ID tracking",
          "Cross-session continuity",
          "Context for new messages",
          "Reference resolution"
        @/cluster
      
      ##contextReset{id:new_conversations}
        @cluster{reset_logic, type:behavior}
          "New conversation = no context",
          "Clear context on new chat",
          "Explicit conversation switch"
        @/cluster

    ##performanceConsiderations{id:optimization, type:efficiency_mapping}
      ##queryEfficiency{id:database_performance}
        @cluster{optimizations, type:performance}
          "Indexed conversation queries",
          "Limited result sets",
          "Cached conversation IDs",
          "Prepared statements"
        @/cluster
      
      ##contextSize{id:token_management}
        @cluster{limits, type:ai_constraints}
          "Balance context vs new content",
          "Provider token limits",
          "Optimal history size",
          "Dynamic adjustment"
        @/cluster

    ##integrationEvidence{id:validation, type:evidence_tracking}
      ##implementationStatus{id:feature_status, type:status_tracking}
        @processing{
          status:"active",
          lastVerified:"2025-01-01T00:00:00Z",
          verificationMethod:"manual",
          evidenceLocation:"server/routes/chat-routes.ts:138-141"
        }
      
      ##codeEvidence{id:implementation_proof}
        @cluster{backend_implementation, type:code_references}
          "conversationHistory query (line 138)",
          "20 message limit (line 140)",
          "Context passing to AI (line 203)",
          "History formatting logic"
        @/cluster

    ##dependencies{id:feature_dependencies, type:dependency_tracking}
      @cluster{internal, type:internal_features}
        "Conversation History",
        "Send Message",
        "Message Display"
      @/cluster
      @cluster{external, type:ai_providers}
        "OpenAI conversation API",
        "Google AI context support"
      @/cluster

    ##impacts{id:feature_impacts, type:impact_analysis}
      @cluster{enables, type:functionality}
        "Multi-turn conversations",
        "Context-aware responses",
        "Natural dialogue flow",
        "Follow-up questions"
      @/cluster
      @cluster{improves, type:user_experience}
        "Conversation coherence",
        "AI understanding",
        "Response relevance"
      @/cluster

@processing{
  mapping_sequence:[userFlow, systemFlow, dataFlowTrace, architecturalLayers],
  quality_gates:[contextManagement, performanceConsiderations],
  validation_requirements:[integrationEvidence],
  relationship_analysis:[dependencies, impacts]
}