@context{domain:file_manager, feature_group:sharing_export, format:shdl, version:2.0.0, complexity:medium, enforcement:strict}
@meta{last_updated:"2025-01-01T10:00:00Z", validation_status:complete, token_estimate:750, critical_paths:7, processing_priority:2}

#QR_CODE_GENERATION{confidence:1.0, integration_status:complete, @standard}
  ##feature_definition{id:qr_code_root, type:sharing_mechanism, confidence:1.0}
    "QR code generation for file sharing across devices"
    →primary_user_workflow[select_files→generate_qr→scan_to_download]
    →dependencies[qr_code_library, file_sharing_hook, dialog_component]
    →user_workflows[single_file_qr, multi_file_qr, mobile_scanning]

  @cluster{core_workflow, confidence:1.0}
    ##qr_generation_workflow{id:primary_qr_flow, type:cross_device_sharing, confidence:1.0}
      "QR code generation and display process"
      @processing{
        select_files→click_qr_button→generate_download_urls→
        encode_to_qr→display_in_modal→user_scans→download_files
      }
      @data_flow{
        trigger:[FileActionsToolbar, qr_code_button],
        generation:[useFileSharing.generateAndShowQRCode],
        encoding:[URL_or_JSON_to_QR],
        display:[QrCodeDialog_modal]
      }

    ##multi_file_encoding{id:bulk_qr_strategy, type:data_encoding, confidence:1.0}
      "Multiple file QR encoding strategy"
      @encoding_logic{
        single_file:"Direct download URL",
        multiple_files:"JSON with download links array",
        size_limit:"QR code data capacity",
        format:{
          files:[
            {name:"file1.pdf", url:"/uploads/xxx"},
            {name:"file2.jpg", url:"/uploads/yyy"}
          ]
        }
      }
  @/cluster

  @cluster{frontend_implementation, confidence:1.0}
    ##qr_generation_hook{id:qr_logic, type:file_sharing_integration, confidence:1.0}
      useFileSharing{
        path:"client/src/hooks/useFileSharing.ts",
        qr_functions:{
          generateAndShowQRCode:"Main QR generation",
          prepareQRData:"Format data for encoding",
          setShowQRCodeDialog:"Modal control"
        },
        state:{
          showQRCodeDialog:"boolean",
          qrCodeData:"base64 image string"
        },
        status:active
      },
      qr_data_preparation{
        single_file:{
          type:"direct_url",
          data:"{baseUrl}/uploads/{fileName}"
        },
        multiple_files:{
          type:"json_payload",
          data:{
            files:"array of {name, url}",
            encoded:"JSON.stringify",
            scanning_note:"Downloads all files"
          }
        }
      }

    ##qr_dialog_component{id:qr_display_modal, type:ui_component, confidence:1.0}
      QrCodeDialog{
        location:"inline in FileManagerSection",
        structure:{
          header:"Share Files via QR Code",
          body:{
            instruction_text:"Scan to download",
            qr_image:"base64 encoded image",
            help_text:"Usage instructions"
          },
          footer:"Close button"
        },
        props:{
          open:"showQRCode state",
          onOpenChange:"setShowQRCode",
          qrCodeData:"generated QR image"
        }
      },
      visual_design{
        qr_display:{
          element:"img tag",
          source:"base64 data URL",
          styling:"border rounded-lg",
          size:"responsive to dialog"
        },
        instructions:{
          single:"Direct download link",
          multiple:"JSON data with all links",
          target:"Downloads folder"
        }
      }
  @/cluster

  @cluster{qr_code_library, confidence:0.9}
    ##library_integration{id:qr_generation_lib, type:external_dependency, confidence:0.9}
      expected_library{
        likely:"qrcode.js or similar",
        import:"not visible in provided code",
        usage:"client-side generation",
        output:"base64 image data"
      },
      generation_options{
        error_correction:"medium",
        size:"suitable for mobile scanning",
        format:"PNG base64",
        color:"black on white"
      }
  @/cluster

  @cluster{data_encoding, confidence:1.0}
    ##encoding_strategies{id:qr_data_formats, confidence:1.0}
      url_encoding{
        use_case:"single file",
        format:"https://domain.com/uploads/file.pdf",
        advantage:"direct download on scan",
        limitation:"one file only"
      },
      json_encoding{
        use_case:"multiple files",
        format:{
          version:"1.0",
          files:[
            {
              name:"display name",
              url:"download URL",
              size:"optional file size",
              type:"optional MIME type"
            }
          ]
        },
        scanning_behavior:"app downloads all files",
        size_consideration:"QR data limit ~3KB"
      }
  @/cluster

  @cluster{mobile_integration, confidence:1.0}
    ##scanning_experience{id:mobile_qr_scanning, confidence:1.0}
      scanning_process{
        device:"any QR scanner app",
        single_file:"opens URL in browser → download",
        multiple_files:"shows JSON → copy → manual process",
        improvement_needed:"dedicated handler app"
      },
      download_behavior{
        ios:"Safari download manager",
        android:"Chrome downloads",
        file_location:"device Downloads folder"
      }
  @/cluster

  @cluster{security_considerations, confidence:1.0}
    ##qr_security{id:access_control, confidence:1.0}
      current_implementation{
        authentication:"none",
        urls:"permanent public links",
        risk:"anyone with QR can download",
        tracking:"not implemented"
      },
      potential_improvements{
        expiring_qr:"time-limited URLs",
        authenticated_qr:"require login",
        one_time_qr:"single use codes",
        tracking:"download analytics"
      }
  @/cluster

  @cluster{ui_feedback, confidence:1.0}
    ##user_experience{id:qr_ux, confidence:1.0}
      generation_feedback{
        loading:"button state during generation",
        success:"modal appears with QR",
        error:"toast notification"
      },
      modal_features{
        dismissible:"click outside or X button",
        copyable:"QR image saveable",
        instructions:"clear usage guide",
        responsive:"mobile-friendly size"
      }
  @/cluster

  @cluster{limitations, confidence:1.0}
    ##current_limitations{id:qr_constraints, confidence:1.0}
      data_size{
        issue:"QR codes have data limits",
        impact:"many files = large JSON",
        mitigation:"could use short URLs"
      },
      json_handling{
        issue:"JSON not user-friendly",
        impact:"poor multi-file experience",
        solution:"need dedicated app/handler"
      },
      security{
        issue:"no access control",
        impact:"public file access",
        solution:"authenticated endpoints"
      }
  @/cluster

@processing{
  flow_sequence:[
    file_selection, qr_trigger, data_preparation,
    qr_generation, modal_display, user_scanning,
    file_download
  ],
  critical_paths:[
    data_encoding, qr_generation, url_accessibility
  ],
  async_operations:[
    qr_library_generation, modal_state_management
  ]
}

@dependencies{
  frontend:[
    React, QR_code_library, useFileSharing,
    Dialog_components
  ],
  encoding:[
    JSON_stringify, base64_image_generation
  ]
}

@integration_evidence{
  verified_flows:[
    "QR button enables with selection",
    "QR modal displays properly",
    "Single file QR generates URL",
    "Multiple file QR generates JSON",
    "Mobile scanning initiates download"
  ],
  user_feedback:[
    "Clear instructions in modal",
    "Visual QR code display",
    "Close button functional"
  ]
}