@context{domain:memory, target:importance_scoring, complexity:medium, enforcement:strict}
@meta{tokens:700, critical_paths:3, validation_rules:5, processing_priority:1}

#ROOT{confidence:1.0}
  ##importance_scoring{id:importance_scoring_feature, type:core_functionality, confidence:1.0, @critical}
    "AI-powered and manual importance scoring for memory prioritization"
    @scoring_range:[0.0-1.0]
    @levels{
      high:[0.8-1.0],
      medium:[0.5-0.79],
      low:[0.0-0.49]
    }
    
    ##data_flow_tracing{id:scoring_flow, type:evaluation_pipeline, confidence:1.0}
      @cluster{automatic_scoring, confidence:1.0}
        ##ai_evaluation{id:importance_calculation, type:ai_processing, confidence:1.0}
          "AI determines importance based on content analysis"
          @factors{
            health_criticality:"Medical conditions, allergies, injuries",
            personal_impact:"Direct effect on user's wellness journey",
            temporal_relevance:"Current vs historical information",
            instruction_priority:"Explicit user directives",
            frequency_mentioned:"Repeated themes across conversations"
          }
          @processing{
            memory_content→ai_analysis→score_calculation→normalization(0-1)
          }
          
        ##score_assignment{id:score_storage, type:data_persistence, confidence:1.0}
          @field:memoryEntries.importanceScore
          @type:real(0.0-1.0)
          @default:0.5
      @/cluster

      @cluster{manual_scoring, confidence:1.0}
        ##user_interface{id:importance_selection, type:user_input, confidence:1.0}
          @component:MemorySection.tsx[FormField:importance]
          @options{
            low:"General information",
            medium:"Important preference",
            high:"Critical health information"
          }
          @mapping{
            low:0.3,
            medium:0.6,
            high:0.9
          }
          
        ##form_processing{id:score_conversion, type:value_mapping, confidence:1.0}
          @processing{
            string_level→numeric_score→validation→storage
          }
          @validation{
            range:[0.0, 1.0],
            required:true
          }
      @/cluster

      @cluster{score_display, confidence:1.0}
        ##visual_representation{id:importance_badges, type:ui_component, confidence:1.0}
          @component:MemorySection.tsx[getImportanceLabel, getImportanceColor]
          @display{
            high:"bg-red-100 text-red-800",
            medium:"bg-orange-100 text-orange-800",
            low:"bg-gray-100 text-gray-800"
          }
          @sorting{
            primary:importanceScore DESC,
            secondary:createdAt DESC
          }
      @/cluster

    ##architectural_layers{id:scoring_architecture, type:comprehensive, confidence:1.0}
      ##presentation_layer{id:scoring_ui, type:react_components, confidence:1.0}
        @components{
          MemorySection.tsx:[importance_dropdown, importance_badge_display],
          Badge:[importance_level_indicator]
        }
        @functions{
          getImportanceLabel(score)→string,
          getImportanceColor(score)→className,
          importanceMap:{low:0.3, medium:0.6, high:0.9}
        }
      }

      ##business_logic_layer{id:scoring_services, type:evaluation_logic, confidence:1.0}
        @services{
          memory-service.ts:[calculateImportance, normalizeScore],
          enhanced-memory-service.ts:[contextualImportanceScoring],
          memory-enhanced-ai-service.ts:[importanceFromContext]
        }
        @algorithms{
          base_scoring:content_analysis,
          contextual_boost:conversation_context,
          decay_function:time_based_reduction
        }
      }

      ##data_layer{id:score_persistence, type:postgresql, confidence:1.0}
        @schema{
          memoryEntries.importanceScore:real DEFAULT 0.5,
          CHECK:importanceScore >= 0 AND importanceScore <= 1
        }
        @indexes{
          idx_memory_importance:btree(importanceScore DESC),
          compound:idx_user_importance(userId, importanceScore)
        }
      }

    ##error_boundaries{id:scoring_errors, type:validation, confidence:1.0}
      @cluster{validation_errors, confidence:1.0}
        ##invalid_score{id:score_range_error, confidence:1.0}
          @validation:score BETWEEN 0.0 AND 1.0
          @response:400_bad_request
          @message:"Importance must be between 0 and 1"
        }
        ##ai_scoring_failure{id:scoring_fallback, confidence:1.0}
          @fallback:default_to_0.5
          @logging:error_logged
        }
      @/cluster

    ##performance_optimization{id:scoring_performance, type:optimization, confidence:1.0}
      @cluster{score_caching, confidence:1.0}
        ##calculation_cache{id:ai_score_cache, confidence:1.0}
          @key:content_hash
          @ttl:10_minutes
          @benefit:avoid_duplicate_ai_calls
        }
        ##sorting_optimization{id:indexed_queries, confidence:1.0}
          @index:importanceScore DESC
          @query_performance:O(log n)
        }
      @/cluster

    ##security_privacy{id:scoring_security, type:data_validation, confidence:1.0}
      @validation{
        score_bounds:[0.0, 1.0],
        no_score_manipulation:server_side_only,
        user_isolation:by_userId
      }

    ##integration_evidence{id:scoring_implementation, type:verification, confidence:1.0}
      @status:active
      @verification:2025-01-15
      @evidence{
        ai_scoring:functional,
        manual_scoring:tested,
        display_working:verified
      }
      @distribution{
        high:15%,
        medium:50%,
        low:35%
      }

@processing{
  critical_paths:[content→ai_scoring→storage, manual_selection→conversion→storage],
  enforcement_points:[score_range_validation, user_authorization],
  quality_gates:[valid_score_range, ai_confidence_check]
}

@validation{
  mandatory_checks:[score_in_range, user_authenticated],
  performance_targets:[scoring_under_1s, ui_update_instant],
  data_integrity:[score_required:true, score_immutable:false]
}