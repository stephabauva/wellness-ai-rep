@context{domain:file_manager, feature_group:display_organization, format:shdl, version:2.0.0, complexity:high, enforcement:strict}
@meta{last_updated:"2025-01-01T10:00:00Z", validation_status:complete, token_estimate:800, critical_paths:10, processing_priority:1}

#CATEGORY_MANAGEMENT{confidence:1.0, integration_status:complete, @critical}
  ##feature_definition{id:category_management_root, type:organizational_system, confidence:1.0}
    "Complete category CRUD system with custom categories and system defaults"
    →primary_user_workflow[create_category→assign_to_files→manage_categories]
    →dependencies[category_api, database_schema, ui_components]
    →user_workflows[create_custom, edit_category, delete_category, assign_categories]

  @cluster{core_workflow, confidence:1.0}
    ##category_creation_workflow{id:create_category_flow, type:administrative, confidence:1.0}
      "Custom category creation process"
      @processing{
        click_new_category→enter_details→select_icon→choose_color→
        save_category→update_category_list→available_for_assignment
      }
      @data_flow{
        ui_trigger:[CategorySelector, create_new_option],
        api_call:[POST_/api/categories],
        database:[insert_into_fileCategories],
        cache_update:[invalidate_categories_query]
      }

    ##category_assignment_workflow{id:file_categorization_flow, type:operational, confidence:1.0}
      "Assigning categories to files"
      @processing{
        select_files→open_category_menu→choose_category→
        bulk_update_files→refresh_ui→update_counts
      }
      @data_flow{
        selection:[multiple_files_selected],
        api_call:[PATCH_/api/files/categorize],
        database:[update_files_set_categoryId],
        ui_update:[file_list_refresh, tab_counts_update]
      }
  @/cluster

  @cluster{frontend_components, confidence:1.0}
    ##presentation_layer{id:category_ui_components, type:client_side, confidence:1.0}
      CategorySelector{
        path:"client/src/components/filemanager/CategorySelector.tsx",
        features:{
          dropdown_menu:"existing categories",
          create_new:"inline creation option",
          icon_preview:"shows category icons",
          color_coding:"visual category identification"
        },
        status:verified
      },
      CategoryDropdown{
        path:"client/src/components/filemanager/CategoryDropdown.tsx",
        props:{
          selectedCategoryId:"string | undefined",
          onCategoryChange:"(id?: string) => void",
          allowClear:"boolean",
          placeholder:"string"
        },
        features:[
          "System categories",
          "User categories",
          "Create new inline",
          "Clear selection"
        ],
        status:active
      }

    ##category_editor{id:crud_interface, confidence:1.0}
      creation_form{
        fields:[
          {name:"text", required:true},
          {description:"text", optional:true},
          {icon:"icon_selector", default:"Folder"},
          {color:"color_picker", default:"gray"}
        ],
        validation:"client_and_server_side",
        submission:"via_mutation"
      },
      edit_interface{
        trigger:"settings_or_context_menu",
        allows:["rename", "change_icon", "change_color"],
        restrictions:"cannot_edit_system_categories"
      }
  @/cluster

  @cluster{backend_services, confidence:1.0}
    ##api_layer{id:category_endpoints, type:server_side, confidence:1.0}
      category_routes{
        path:"server/routes/category-routes.ts",
        endpoints:{
          list:"GET /api/categories",
          create:"POST /api/categories",
          update:"PUT /api/categories/:id",
          delete:"DELETE /api/categories/:id"
        },
        status:expected_but_may_be_inline
      },
      category_service{
        path:"server/services/category-service.ts",
        functions:[
          getCategoryById,
          getUserCategories,
          createCategory,
          updateCategory,
          deleteCategory
        ],
        validations:[
          "user_ownership",
          "name_uniqueness",
          "system_category_protection"
        ],
        status:active
      }
  @/cluster

  @cluster{data_layer, confidence:1.0}
    ##database_schema{id:category_persistence, confidence:1.0}
      fileCategories_table{
        columns:{
          id:"uuid PRIMARY KEY",
          name:"text NOT NULL",
          description:"text NULL",
          icon:"text NULL",
          color:"text NULL",
          isCustom:"boolean DEFAULT false",
          userId:"integer REFERENCES users(id)",
          createdAt:"timestamp DEFAULT NOW()"
        },
        system_categories:{
          condition:"isCustom = false AND userId IS NULL",
          examples:["Documents", "Images", "Data"],
          immutable:true
        },
        user_categories:{
          condition:"isCustom = true AND userId = ?",
          mutable:true,
          deletable:true
        }
      }

    ##data_relationships{id:category_file_linking, confidence:1.0}
      file_category_association{
        files_table:"categoryId REFERENCES fileCategories(id)",
        nullable:true,
        on_delete:"SET NULL",
        uncategorized:"categoryId IS NULL"
      }
  @/cluster

  @cluster{category_types, confidence:1.0}
    ##system_categories{id:predefined_categories, confidence:1.0}
      default_categories{
        list:[
          {name:"Documents", icon:"FileText", color:"blue"},
          {name:"Images", icon:"Image", color:"green"},
          {name:"Data", icon:"Database", color:"purple"}
        ],
        properties:{
          isCustom:false,
          userId:null,
          deletable:false,
          editable:false
        },
        availability:"all_users"
      }

    ##custom_categories{id:user_categories, confidence:1.0}
      user_defined{
        creation:"via UI or API",
        ownership:"tied to userId",
        limits:"none currently enforced",
        sharing:"not implemented"
      },
      properties{
        customizable:["name", "description", "icon", "color"],
        icon_options:"predefined_icon_set",
        color_options:"predefined_or_hex",
        validation:"name_required_and_unique"
      }
  @/cluster

  @cluster{category_operations, confidence:1.0}
    ##crud_operations{id:category_lifecycle, confidence:1.0}
      create{
        endpoint:"POST /api/categories",
        required_fields:["name"],
        auto_generated:["id", "createdAt", "userId"],
        returns:"created_category"
      },
      read{
        endpoint:"GET /api/categories",
        filters:"user_categories + system_categories",
        includes:"file_counts",
        sorting:"name_ascending"
      },
      update{
        endpoint:"PUT /api/categories/:id",
        allowed_fields:["name", "description", "icon", "color"],
        validation:"user_owns_category",
        restrictions:"cannot_update_system"
      },
      delete{
        endpoint:"DELETE /api/categories/:id",
        behavior:"soft_delete_or_cascade",
        side_effects:"uncategorize_associated_files",
        restrictions:"cannot_delete_system"
      }
  @/cluster

  @cluster{ui_integration, confidence:1.0}
    ##category_display{id:visual_representation, confidence:1.0}
      icon_system{
        library:"Lucide_React",
        mapping:"icon_name_to_component",
        fallback:"Folder_icon",
        size_variants:["sm", "md", "lg"]
      },
      color_system{
        format:"tailwind_classes_or_hex",
        application:"badges_and_backgrounds",
        contrast:"automatic_text_color"
      },
      category_badges{
        locations:["file_list", "file_cards", "details_view"],
        format:"icon + name + color",
        interactive:"click_to_filter"
      }
  @/cluster

  @cluster{error_handling, confidence:1.0}
    ##error_scenarios{id:category_errors, confidence:1.0}
      validation_errors{
        duplicate_name:"Category name already exists",
        empty_name:"Category name is required",
        invalid_color:"Invalid color format"
      },
      permission_errors{
        wrong_user:"Cannot modify another user's category",
        system_category:"Cannot modify system categories"
      },
      consistency_errors{
        orphaned_files:"Handle gracefully on delete",
        missing_category:"Show as uncategorized"
      }
  @/cluster

@processing{
  flow_sequence:[
    category_operations, validation, persistence,
    cache_invalidation, ui_updates, file_association
  ],
  critical_paths:[
    create_category, assign_to_files, delete_handling
  ],
  cascading_effects:[
    category_delete→uncategorize_files,
    category_create→available_in_selectors
  ]
}

@dependencies{
  frontend:[
    React, TanStack_Query, CategorySelector,
    CategoryDropdown, Lucide_icons
  ],
  backend:[
    Express, Drizzle_ORM, PostgreSQL,
    category-service, validation_schemas
  ]
}

@integration_evidence{
  verified_flows:[
    "Create custom category from selector",
    "Assign category to multiple files",
    "Categories appear in tabs",
    "System categories non-editable",
    "Category deletion uncategorizes files"
  ],
  features_tested:[
    "CRUD operations",
    "Icon and color selection",
    "User isolation",
    "System category protection"
  ]
}