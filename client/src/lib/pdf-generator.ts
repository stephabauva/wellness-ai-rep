import { jsPDF } from "jspdf";
import 'jspdf-autotable';
import { format } from "date-fns";

// Add type declaration for autotable
declare module "jspdf" {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface HealthReportData {
  user: {
    name: string;
    email: string;
    goalType: string;
  };
  date: string;
  summary: {
    title: string;
    content: string;
  };
  stats: {
    steps: number;
    sleep: string;
    heartRate: number;
    weight: number;
  };
  trends: {
    activity: Array<{
      date: string;
      steps: number;
      active: number;
    }>;
    sleep: Array<{
      date: string;
      duration: number;
      quality: string;
    }>;
  };
  recommendations: string[];
}

export const generatePDF = (data: HealthReportData): void => {
  // Create a new jsPDF instance
  const doc = new jsPDF();
  
  // Set document properties
  doc.setProperties({
    title: 'WellnessAI Health Report',
    author: 'WellnessAI',
    subject: 'Health and Wellness Report',
    keywords: 'health, wellness, fitness, report',
  });
  
  // Add header
  doc.setFillColor(16, 185, 129); // primary color
  doc.rect(0, 0, 210, 20, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.text('WellnessAI Health Report', 105, 12, { align: 'center' });
  
  // Add user info
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(12);
  doc.text(`User: ${data.user.name}`, 14, 30);
  doc.text(`Email: ${data.user.email}`, 14, 37);
  doc.text(`Goal: ${data.user.goalType}`, 14, 44);
  doc.text(`Report Date: ${format(new Date(data.date), 'MMMM d, yyyy')}`, 14, 51);
  
  // Add summary section
  doc.setFontSize(16);
  doc.setTextColor(16, 185, 129);
  doc.text('Summary', 14, 65);
  doc.setDrawColor(16, 185, 129);
  doc.line(14, 67, 196, 67);
  
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  const summaryLines = doc.splitTextToSize(data.summary.content, 180);
  doc.text(summaryLines, 14, 75);
  
  // Add stats
  doc.setFontSize(16);
  doc.setTextColor(16, 185, 129);
  doc.text('Current Stats', 14, 105);
  doc.line(14, 107, 196, 107);
  
  doc.autoTable({
    startY: 112,
    head: [['Metric', 'Value', 'Status']],
    body: [
      ['Daily Steps', data.stats.steps.toLocaleString(), data.stats.steps > 7500 ? 'Good' : 'Needs Improvement'],
      ['Sleep Duration', data.stats.sleep, data.stats.sleep.includes('7h') ? 'Good' : 'Needs Improvement'],
      ['Heart Rate', `${data.stats.heartRate} bpm`, data.stats.heartRate < 80 ? 'Normal' : 'Elevated'],
      ['Weight', `${data.stats.weight} lbs`, '-'],
    ],
    headStyles: { fillColor: [16, 185, 129], textColor: [255, 255, 255] },
    alternateRowStyles: { fillColor: [240, 240, 240] },
    columnStyles: {
      0: { cellWidth: 60 },
      1: { cellWidth: 60 },
      2: { cellWidth: 60 }
    }
  });
  
  // Add trend data
  doc.setFontSize(16);
  doc.setTextColor(16, 185, 129);
  doc.text('Activity Trends', 14, 155);
  doc.line(14, 157, 196, 157);
  
  // Activity trend data
  doc.autoTable({
    startY: 162,
    head: [['Date', 'Steps', 'Active Minutes']],
    body: data.trends.activity.map(item => [
      item.date,
      item.steps.toLocaleString(),
      item.active.toString()
    ]),
    headStyles: { fillColor: [96, 165, 250], textColor: [255, 255, 255] }, // secondary color
  });
  
  // Add recommendations
  doc.setFontSize(16);
  doc.setTextColor(16, 185, 129);
  doc.text('Recommendations', 14, 210);
  doc.line(14, 212, 196, 212);
  
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  
  let yPos = 220;
  data.recommendations.forEach((rec, index) => {
    doc.text(`${index + 1}. ${rec}`, 14, yPos);
    yPos += 7;
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated by WellnessAI - Page ${i} of ${pageCount}`, 105, 285, { align: 'center' });
  }
  
  // Save the PDF
  doc.save('WellnessAI_Health_Report.pdf');
};
