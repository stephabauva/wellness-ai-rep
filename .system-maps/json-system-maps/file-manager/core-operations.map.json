{
  "_tableOfContents": {
    "domain": "file-manager",
    "features": [
      "upload-file",
      "delete-files",
      "refresh-files",
      "list-view",
      "grid-view",
      "file-selection",
      "web-share",
      "qr-code-generation",
      "thumbnail-display"
    ],
    "totalFeatures": 9,
    "lastUpdated": "2025-07-10"
  },
  "upload-file": {
    "_meta": {
      "feature": "upload-file",
      "domain": "file-manager",
      "lastUpdated": "2025-07-11",
      "status": "active"
    },
    "trigger": "User clicks upload button and selects files",
    "dataFlow": {
      "request": "FileUploadDialog → useFileUpload → uploadFile() → compressFile() → UniversalFileService.initialize() (lazy) → /api/upload → files table",
      "response": "Database → API → React Query → FileList refresh with proper thumbnails",
      "sideEffects": [
        "Lazy Go service initialization only when compressing files",
        "Category assignment",
        "Smart compression (media files excluded)",
        "Debug logging for uploads"
      ]
    },
    "files": {
      "ui": [
        "FileUploadDialog.tsx",
        "useFileUpload.ts",
        "FileActionsToolbar.tsx"
      ],
      "api": [
        "server/routes.ts"
      ],
      "data": [
        "files",
        "fileCategories"
      ],
      "types": [
        "shared/schema.ts"
      ],
      "services": [
        "universal-file-service.ts",
        "file-compression.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [
        "query:files",
        "query:categories"
      ],
      "refreshes": [
        "FileList",
        "FileActionsToolbar"
      ],
      "triggers": [
        "file-processing",
        "metadata-extraction",
        "thumbnail-generation"
      ]
    },
    "errorPaths": {
      "network": "Upload retry with exponential backoff",
      "validation": "File type/size validation errors",
      "business": "Category assignment fallback to uncategorized",
      "compression": "Fallback to original file if compression fails"
    },
    "dependencies": {
      "internal": [
        "categories",
        "universal-file-service",
        "thumbnail-display"
      ],
      "external": [
        "Go acceleration service"
      ],
      "shared": [
        "FileAccelerationService",
        "UniversalFileService"
      ]
    }
  },
  "delete-files": {
    "_meta": {
      "feature": "delete-files",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects files and clicks delete button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileApi.deleteFiles → /api/files/delete → files table",
      "response": "Database → API → React Query invalidation → UI refresh",
      "sideEffects": [
        "File system cleanup",
        "Cache invalidation"
      ]
    },
    "files": {
      "ui": [
        "FileActionsToolbar.tsx",
        "useFileApi.ts",
        "useFileManagerState.ts"
      ],
      "api": [
        "server/routes.ts"
      ],
      "data": [
        "files"
      ],
      "types": [
        "shared/schema.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [
        "query:files"
      ],
      "refreshes": [
        "FileList",
        "FileActionsToolbar"
      ],
      "triggers": [
        "file-cleanup"
      ]
    },
    "errorPaths": {
      "network": "Retry deletion with confirmation",
      "validation": "File permission errors",
      "business": "Partial deletion success handling"
    },
    "dependencies": {
      "internal": [
        "file-selection"
      ],
      "external": [],
      "shared": [
        "useFileManagerState"
      ]
    }
  },
  "refresh-files": {
    "_meta": {
      "feature": "refresh-files",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User clicks refresh button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileApi.refetchFiles → /api/files → files table",
      "response": "Database → API → React Query → FileList update",
      "sideEffects": [
        "Cache refresh",
        "UI synchronization"
      ]
    },
    "files": {
      "ui": [
        "FileActionsToolbar.tsx",
        "useFileApi.ts"
      ],
      "api": [
        "server/routes.ts"
      ],
      "data": [
        "files",
        "fileCategories"
      ],
      "types": [
        "shared/schema.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [
        "query:files"
      ],
      "refreshes": [
        "FileList"
      ],
      "triggers": [
        "ui-sync"
      ]
    },
    "errorPaths": {
      "network": "Show stale data with error indicator",
      "validation": "Display error message",
      "business": "Fallback to cached data"
    },
    "dependencies": {
      "internal": [],
      "external": [],
      "shared": [
        "useFileApi"
      ]
    }
  },
  "list-view": {
    "_meta": {
      "feature": "list-view",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects list view mode",
    "dataFlow": {
      "request": "ViewToggle → useFileManagerState.setViewMode → FileList re-render",
      "response": "State update → UI layout change → Thumbnail display",
      "sideEffects": [
        "View preference saved",
        "Thumbnail generation for visible files"
      ]
    },
    "files": {
      "ui": [
        "client/src/components/filemanager/FileList.tsx",
        "client/src/hooks/useFileManagerState.ts"
      ],
      "api": [],
      "data": [],
      "types": [
        "shared/schema.ts"
      ],
      "utils": [
        "client/src/utils/fileManagerUtils.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [
        "FileList"
      ],
      "triggers": [
        "view-mode-change"
      ]
    },
    "errorPaths": {
      "network": "N/A - local state only",
      "validation": "Fallback to grid view",
      "business": "Default view mode restoration"
    },
    "dependencies": {
      "internal": [
        "file-selection"
      ],
      "external": [],
      "shared": [
        "useFileManagerState"
      ]
    }
  },
  "grid-view": {
    "_meta": {
      "feature": "grid-view",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects grid view mode",
    "dataFlow": {
      "request": "ViewToggle → useFileManagerState.setViewMode → FileList re-render",
      "response": "State update → UI layout change → Enhanced thumbnail display",
      "sideEffects": [
        "View preference saved",
        "Larger thumbnail generation for grid layout"
      ]
    },
    "files": {
      "ui": [
        "client/src/components/filemanager/FileList.tsx",
        "client/src/hooks/useFileManagerState.ts"
      ],
      "api": [],
      "data": [],
      "types": [
        "shared/schema.ts"
      ],
      "utils": [
        "client/src/utils/fileManagerUtils.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [
        "FileList"
      ],
      "triggers": [
        "view-mode-change"
      ]
    },
    "errorPaths": {
      "network": "N/A - local state only",
      "validation": "Fallback to list view",
      "business": "Default view mode restoration"
    },
    "dependencies": {
      "internal": [
        "file-selection"
      ],
      "external": [],
      "shared": [
        "useFileManagerState"
      ]
    }
  },
  "file-selection": {
    "_meta": {
      "feature": "file-selection",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User clicks file checkboxes or select all",
    "dataFlow": {
      "request": "FileList checkbox → useFileManagerState.toggleSelection → state update",
      "response": "State update → FileActionsToolbar enable/disable",
      "sideEffects": [
        "Bulk operation availability"
      ]
    },
    "files": {
      "ui": [
        "FileList.tsx",
        "useFileManagerState.ts",
        "FileActionsToolbar.tsx"
      ],
      "api": [],
      "data": [],
      "types": [
        "shared/schema.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [
        "FileActionsToolbar"
      ],
      "triggers": [
        "bulk-operations-toggle"
      ]
    },
    "errorPaths": {
      "network": "N/A - local state only",
      "validation": "Selection state reset",
      "business": "Clear selection on error"
    },
    "dependencies": {
      "internal": [],
      "external": [],
      "shared": [
        "useFileManagerState"
      ]
    }
  },
  "web-share": {
    "_meta": {
      "feature": "web-share",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects files and clicks share button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileSharing.shareSelectedFiles → Web Share API",
      "response": "Native share dialog → sharing completion",
      "sideEffects": [
        "Platform-specific sharing"
      ]
    },
    "files": {
      "ui": [
        "FileActionsToolbar.tsx",
        "useFileSharing.ts"
      ],
      "api": [],
      "data": [],
      "types": [
        "shared/schema.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": [
        "native-sharing"
      ]
    },
    "errorPaths": {
      "network": "Fallback to copy URL",
      "validation": "Share availability check",
      "business": "Platform compatibility fallback"
    },
    "dependencies": {
      "internal": [
        "file-selection"
      ],
      "external": [
        "Web Share API"
      ],
      "shared": [
        "useFileSharing"
      ]
    }
  },
  "qr-code-generation": {
    "_meta": {
      "feature": "qr-code-generation",
      "domain": "file-manager",
      "lastUpdated": "2025-01-10",
      "status": "active"
    },
    "trigger": "User selects files and clicks QR code button",
    "dataFlow": {
      "request": "FileActionsToolbar → useFileSharing.generateAndShowQRCode → QrCodeDialog",
      "response": "QR code generation → Modal display",
      "sideEffects": [
        "QR code image generation"
      ]
    },
    "files": {
      "ui": [
        "FileActionsToolbar.tsx",
        "useFileSharing.ts",
        "QrCodeDialog.tsx"
      ],
      "api": [],
      "data": [],
      "types": [
        "shared/schema.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [],
      "triggers": [
        "qr-modal-display"
      ]
    },
    "errorPaths": {
      "network": "QR generation failure message",
      "validation": "File URL validation",
      "business": "Fallback to text URLs"
    },
    "dependencies": {
      "internal": [
        "file-selection"
      ],
      "external": [
        "QR code library"
      ],
      "shared": [
        "useFileSharing",
        "QrCodeDialog"
      ]
    }
  },
  "thumbnail-display": {
    "_meta": {
      "feature": "thumbnail-display",
      "domain": "file-manager",
      "lastUpdated": "2025-07-10",
      "status": "active"
    },
    "trigger": "Files are displayed in list or grid view",
    "dataFlow": {
      "request": "FileList renders → Image files display actual thumbnails, non-images show getFileIcon utility with size parameter",
      "response": "Proper image thumbnails for uploaded files with fallback to sized icons",
      "sideEffects": [
        "Improved user experience",
        "Visual file type identification",
        "Context-aware icon sizing",
        "Debug logging for thumbnail loading"
      ]
    },
    "files": {
      "ui": [
        "client/src/components/filemanager/FileList.tsx"
      ],
      "api": [],
      "data": [],
      "types": [
        "shared/schema.ts"
      ],
      "utils": [
        "client/src/utils/fileManagerUtils.ts"
      ],
      "hooks": [
        "client/src/hooks/useFileUpload.ts"
      ]
    },
    "cacheFlow": {
      "invalidates": [],
      "refreshes": [
        "FileList"
      ],
      "triggers": [
        "thumbnail-generation",
        "icon-size-adjustment",
        "image-load-debugging"
      ]
    },
    "errorPaths": {
      "network": "Image loading fallback to icon with detailed console logging",
      "validation": "Fallback to default file icon with correct size",
      "business": "Graceful degradation to text representation with debug info"
    },
    "dependencies": {
      "internal": [
        "list-view",
        "grid-view",
        "upload-file"
      ],
      "external": [
        "lucide-react icons"
      ],
      "shared": [
        "fileManagerUtils",
        "compression-skip-for-media"
      ]
    }
  },
  "dependencies": {
    "crossDomain": [
      {
        "file": "client/src/services/file-compression.ts",
        "importedBy": [
          {
            "domain": "shared/utilities",
            "file": "client/src/utils/compression-test.ts"
          },
          {
            "domain": "shared/hooks",
            "file": "client/src/hooks/useOptimizedUpload.ts"
          }
        ]
      },
      {
        "file": "client/src/hooks/useFileManagement.ts",
        "importedBy": [
          {
            "domain": "chat",
            "file": "client/src/hooks/useChatActions.ts"
          },
          {
            "domain": "chat",
            "file": "client/src/components/MessageDisplayArea.tsx"
          },
          {
            "domain": "chat",
            "file": "client/src/components/ChatInputArea.tsx"
          },
          {
            "domain": "unknown/needs-classification",
            "file": "client/src/components/AttachmentPreview.tsx"
          }
        ]
      },
      {
        "file": "client/src/components/FileManagerSection.tsx",
        "importedBy": [
          {
            "domain": "unknown/needs-classification",
            "file": "client/src/pages/home.tsx"
          }
        ]
      },
      {
        "file": "server/services/go-file-service.ts",
        "importedBy": [
          {
            "domain": "infrastructure/routing",
            "file": "server/routes/shared-dependencies.ts"
          }
        ]
      }
    ],
    "internal": 14
  },
  "lastUpdated": "2025-07-11T21:54:27.646Z",
  "dependencyAnalysis": {
    "lastAnalyzed": "2025-07-11T21:54:27.646Z",
    "crossDomainFiles": 4,
    "internalFiles": 14,
    "totalDependencies": 17
  }
}