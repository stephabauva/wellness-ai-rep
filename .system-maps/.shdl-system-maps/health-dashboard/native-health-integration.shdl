@context{domain:health_dashboard, feature:native_health_integration, version:1.0}

#ROOT
  ##nativeHealthIntegration{id:native_health_system, type:feature, @critical}
    "Native health platform integration for iOS HealthKit and Android Health Connect"
    
    ##dataFlowTrace{id:complete_cycle, type:workflow, @critical}
      "Complete data flow for native health integration"
      
      ##userAction{id:trigger, type:interaction, @active}
        "User initiates native health sync"
        @processing{
          trigger:"Click 'Sync with Health App' button",
          permission:"Request health data access",
          platforms:["iOS HealthKit", "Android Health Connect", "Google Fit"]
        }
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side native integration handling"
        
        ##componentStructure{id:integration_component}
          "NativeHealthIntegration component"
          @file{path:"client/src/components/health/NativeHealthIntegration.tsx"}
          @cluster{props, type:interface}
            "onDataImported: (result) => void"
            "onError: (error) => void"
          @/cluster
        
        ##capabilityDetection{id:platform_check}
          "Detect platform capabilities"
          @processing{
            endpoint:"/api/native-health/capabilities",
            headers:"x-capacitor-platform",
            response:{
              platform: "ios|android|web",
              isCapacitor: "boolean",
              healthDataAccess: "boolean",
              supportedProviders: ["HealthKit", "Google Fit"]
            }
          }
        
        ##nativeServiceCall{id:capacitor_bridge}
          "Call native health service"
          @cluster{service_calls, type:native}
            "NativeHealthService.checkPermissions()"
            "NativeHealthService.requestPermissions()"
            "NativeHealthService.syncHealthData(options)"
          @/cluster
          @file{path:"client/src/services/native-health-service.ts"}
        
        ##dataTypeMapping{id:health_metrics}
          "Map native metrics to app schema"
          @cluster{metrics, type:mapping}
            "Steps → steps"
            "Heart Rate → heart_rate"
            "Sleep Analysis → sleep stages"
            "Workouts → activity data"
            "Nutrition → nutrition metrics"
          @/cluster
      
      ##nativeLayer{id:platform_integration, type:layer}
        "Platform-specific native code"
        
        ##iosIntegration{id:healthkit}
          "iOS HealthKit integration"
          @file{path:"ios/App/App/HealthKitManager.swift"}
          @cluster{capabilities, type:ios}
            "Read permissions for health data"
            "Background sync capability"
            "Data type queries"
            "Sample aggregation"
          @/cluster
        
        ##androidIntegration{id:health_connect}
          "Android Health Connect integration"
          @cluster{capabilities, type:android}
            "Health Connect API"
            "Google Fit fallback"
            "Permission management"
            "Data synchronization"
          @/cluster
        
        ##capacitorPlugin{id:bridge_layer}
          "Capacitor plugin bridge"
          @file{path:"ios/App/App/HealthKitPlugin.m"}
          @processing{
            methods:[
              "checkPermissions",
              "requestPermissions", 
              "queryHealthData",
              "getAvailableDataTypes"
            ]
          }
      
      ##dataProcessing{id:sync_processing, type:layer}
        "Process synced health data"
        
        ##dataTransformation{id:format_conversion}
          "Convert native formats to app schema"
          @processing{
            dateConversion:"Native dates to ISO strings",
            unitConversion:"Platform units to standard",
            aggregation:"Combine duplicate readings",
            categorization:"Assign health categories"
          }
        
        ##batchPreparation{id:import_batching}
          "Prepare data for batch import"
          @cluster{batching, type:optimization}
            "Group by data type"
            "Chunk large datasets"
            "Remove duplicates"
            "Validate values"
          @/cluster
        
        ##apiSubmission{id:data_upload}
          "Submit health data to backend"
          @processing{
            endpoint:"/api/health-data/import",
            method:"POST",
            format:"JSON batch format",
            chunking:"1000 records per request"
          }
    
    ##architecturalLayers{id:layers, type:architecture}
      "Native integration architecture"
      
      ##presentationLayer{id:ui_components}
        @cluster{components, type:react}
          "NativeHealthIntegration.tsx"
          "Platform-specific UI elements"
          "Permission request dialogs"
          "Sync progress indicators"
        @/cluster
      
      ##serviceLayer{id:native_services}
        @cluster{services, type:typescript}
          "NativeHealthService.ts"
          "Platform detection logic"
          "Permission management"
          "Data transformation"
        @/cluster
      
      ##nativeLayer{id:platform_code}
        @cluster{native_code, type:platform}
          "Swift code for iOS"
          "Kotlin/Java for Android"
          "Capacitor plugin bridge"
          "Platform API wrappers"
        @/cluster
      
      ##integrationLayer{id:backend_sync}
        @cluster{api, type:backend}
          "Import endpoints"
          "Batch processing"
          "Deduplication logic"
          "Storage operations"
        @/cluster
    
    ##errorBoundaries{id:error_handling, type:reliability}
      "Native integration error handling"
      
      ##permissionErrors{id:access_denied}
        @cluster{handling, type:errors}
          "Permission denied handling"
          "Partial permission grants"
          "Settings redirect guidance"
          "Fallback to manual import"
        @/cluster
      
      ##syncErrors{id:sync_failures}
        @cluster{handling, type:errors}
          "Network connectivity issues"
          "Platform API failures"
          "Data format mismatches"
          "Timeout handling"
        @/cluster
      
      ##platformErrors{id:compatibility}
        @cluster{handling, type:errors}
          "Unsupported platform detection"
          "Version compatibility checks"
          "Feature availability"
          "Graceful degradation"
        @/cluster
    
    ##performanceConsiderations{id:optimization, type:performance}
      "Native sync performance"
      
      ##dataEfficiency{id:sync_optimization}
        @cluster{strategies, type:performance}
          "Incremental sync support"
          "Date range filtering"
          "Selective data types"
          "Background processing"
        @/cluster
      
      ##batteryOptimization{id:mobile_efficiency}
        @cluster{optimizations, type:mobile}
          "Batch API calls"
          "WiFi-only sync option"
          "Low power mode detection"
          "Scheduled sync windows"
        @/cluster
    
    ##securityConsiderations{id:security, type:protection}
      "Native health data security"
      
      ##permissionModel{id:access_control}
        @cluster{security, type:permissions}
          "Granular permission requests"
          "Read-only access"
          "User consent tracking"
          "Permission revocation handling"
        @/cluster
      
      ##dataProtection{id:health_privacy}
        @cluster{privacy, type:protection}
          "Encrypted data transfer"
          "No local storage of raw data"
          "Secure credential handling"
          "Platform security compliance"
        @/cluster
    
    ##integrationEvidence{id:verified_integration, type:validation}
      "Integration verification"
      
      ##componentUsage{id:dashboard_integration}
        @evidence{
          file:"HealthDataSection.tsx",
          lines:"481-499",
          code:"<NativeHealthIntegration onDataImported={...} />"
        }
      
      ##capabilityEndpoint{id:platform_detection}
        @evidence{
          file:"health-routes.ts",
          lines:"313-337",
          code:"app.get('/api/native-health/capabilities', ...)"
        }
      
      ##nativeFiles{id:platform_code}
        @evidence{
          files:[
            "ios/App/App/HealthKitManager.swift",
            "ios/App/App/HealthKitPlugin.m",
            "client/src/services/native-health-service.ts"
          ]
        }
    
    ##dependencies{id:feature_dependencies, type:graph}
      "Native integration dependencies"
      
      ##platformDependencies{id:native_apis}
        @cluster{platforms, type:dependency}
          "iOS HealthKit framework"
          "Android Health Connect API"
          "Capacitor runtime"
          "Platform permissions system"
        @/cluster
      
      ##appDependencies{id:integration_deps}
        @cluster{internal, type:dependency}
          "Health data import system"
          "User authentication"
          "Data transformation services"
          "Storage infrastructure"
        @/cluster
    
    ##impacts{id:affected_features, type:graph}
      "Features impacted by native integration"
      
      ##dataFreshness{id:real_time_data}
        @cluster{effects, type:impact}
          "Real-time health data access"
          "Automatic background sync"
          "No manual export needed"
          "Continuous data stream"
        @/cluster
      
      ##userExperience{id:seamless_integration}
        @cluster{effects, type:impact}
          "One-tap data sync"
          "Native permission flows"
          "Platform-consistent UI"
          "Reduced friction"
        @/cluster