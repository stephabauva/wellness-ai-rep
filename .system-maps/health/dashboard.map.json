{
  "tableOfContents": {
    "core-dashboard": {
      "features": ["dashboard-display", "metrics-overview"],
      "components": ["HealthDataSection", "HealthMetricsCard"],
      "endpoints": ["GET /api/health-data", "GET /api/health-data/categories"]
    }
  },
  "integrationStatus": {
    "dashboard-display": {
      "status": "active",
      "lastVerified": "2025-01-28",
      "knownIssues": []
    },
    "metrics-overview": {
      "status": "active",
      "lastVerified": "2025-01-28",
      "knownIssues": []
    }
  },
  "lastUpdated": "2025-01-28T18:20:00Z",
  "dependencies": [],
  "featureGroups": {
    "core-dashboard": {
      "description": "Core health dashboard display and metrics overview functionality.",
      "features": {
        "dashboard-display": {
          "description": "Main health dashboard interface showing categorized health metrics.",
          "userFlow": [
            "User navigates to health section",
            "Dashboard loads with visible metrics",
            "User views categorized health data"
          ],
          "systemFlow": [
            "HealthDataSection renders",
            "useHealthDataApi fetches data",
            "HealthMetricsCard components display metrics"
          ],
          "components": ["HealthDataSection", "HealthMetricsCard"],
          "apiIntegration": {
            "expectedEndpoints": ["GET /api/health-data", "GET /api/health-data/categories"],
            "actualEndpoints": ["GET /api/health-data", "GET /api/health-data/categories"],
            "integrationGaps": []
          }
        },
        "metrics-overview": {
          "description": "Overview display of key health metrics with time-based filtering.",
          "userFlow": [
            "User selects time range",
            "Dashboard updates with filtered data",
            "User views metric trends"
          ],
          "systemFlow": [
            "Time range selection updates state",
            "API calls with date parameters",
            "Charts re-render with filtered data"
          ],
          "components": ["HealthMetricsCard", "useHealthDataApi"]
        }
      }
    }
  },
  "components": {
    "HealthDataSection": {
      "path": "client/src/components/HealthDataSection.tsx",
      "type": "React Component",
      "description": "Main container for health dashboard display.",
      "calls": ["GET /api/health-data", "GET /api/health-data/categories"],
      "uses": ["useHealthDataApi", "HealthMetricsCard"],
      "invalidates": ["query:healthData"]
    },
    "HealthMetricsCard": {
      "path": "client/src/components/HealthMetricsCard.tsx",
      "type": "React Component",
      "description": "Displays categorized health metrics with charts.",
      "calls": [],
      "uses": ["ActivityTrendChart", "HeartRateChart", "SleepQualityChart"],
      "invalidates": []
    },
    "useHealthDataApi": {
      "path": "client/src/hooks/useHealthDataApi.ts",
      "type": "React Hook",
      "description": "Fetches health data with time filtering.",
      "calls": ["GET /api/health-data", "GET /api/health-data/categories"],
      "uses": [],
      "invalidates": ["query:healthData"]
    }
  },
  "apiEndpoints": {
    "GET /api/health-data": {
      "description": "Fetches health data with time range filtering.",
      "handlerFile": "server/routes.ts",
      "response": "[HealthMetric]",
      "readsFrom": ["healthData"],
      "modifies": []
    },
    "GET /api/health-data/categories": {
      "description": "Fetches health data grouped by category.",
      "handlerFile": "server/routes.ts",
      "response": "{ [categoryName]: [HealthMetric] }",
      "readsFrom": ["healthData"],
      "modifies": []
    }
  },
  "database": {
    "schemaFile": "shared/schema.ts",
    "tables": {
      "healthData": {
        "columns": {
          "id": { "type": "serial", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "dataType": { "type": "text" },
          "value": { "type": "text" },
          "timestamp": { "type": "timestamp" },
          "category": { "type": "text" }
        }
      }
    }
  },
  "dataStores": {
    "query:healthData": {
      "type": "React Query Key",
      "description": "Caches health data with time-based filtering."
    }
  }
}