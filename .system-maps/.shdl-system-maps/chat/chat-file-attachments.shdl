@context{domain:chat, feature:file_attachments}
@meta{
  featureName:"file-attachments",
  featureGroup:"attachments-media", 
  parentFile:"./chat-domain.shdl",
  domain:"chat",
  lastUpdated:"2025-01-01T00:00:00Z",
  mappingVersion:"2.0.0"
}

#ROOT
  ##fileAttachments{id:file_attachments_feature, type:complete_mapping, @comprehensive}
    "Upload and attach files to messages with preview and management"
    
    ##userFlow{id:user_workflow, type:user_journey, @sequential}
      "User experience for file attachments"
      @processing{
        step1:"User clicks paperclip icon in chat input",
        step2:"File picker dialog opens",
        step3:"User selects one or more files", 
        step4:"Files preview below input field",
        step5:"Files sent with message to AI"
      }
    
    ##systemFlow{id:system_workflow, type:system_processing, @sequential}
      "System handling of file attachments"
      @processing{
        process1:"Handle file selection event",
        process2:"Upload files to server storage",
        process3:"Generate preview for display",
        process4:"Associate files with message",
        process5:"Include file context for AI"
      }
    
    ##dataFlowTrace{id:data_flow, type:attachment_pipeline, @critical}
      "File attachment data flow"
      
      ##fileSelection{id:file_input, type:user_action, @blocking}
        "File selection and validation"
        @processing{
          trigger:"Click paperclip button",
          input:"<input type='file' multiple>",
          validation:"File type and size checks"
        }
      
      ##uploadFlow{id:file_upload, type:layer, @sequential}
        "File upload processing"
        
        ##clientUpload{id:frontend_upload}
          "Client-side upload handling"
          @cluster{upload_process, type:file_handling}
            "handleFileChange in useChatActions",
            "uploadFileMutation.mutate per file",
            "FormData creation",
            "Progress tracking"
          @/cluster
        
        ##serverProcessing{id:backend_upload}
          "Server-side file processing"
          @cluster{api_endpoint, type:file_storage}
            "POST /api/files/upload",
            "Multer middleware",
            "Disk storage strategy",
            "Unique filename generation"
          @/cluster
        
        ##databaseStorage{id:file_metadata}
          "File metadata persistence"
          @cluster{database_ops, type:persistence}
            "INSERT into files table",
            "Link to conversation/message",
            "Retention policy setting",
            "Category assignment"
          @/cluster
      
      ##attachmentManagement{id:file_state, type:layer}
        "Attachment state management"
        @processing{
          hook:"useFileManagement",
          state:"attachedFiles array",
          operations:"add, remove, clear"
        }
        @cluster{file_structure, type:data_model}
          "id: unique identifier",
          "fileName: storage name",
          "displayName: original name",
          "fileType: MIME type",
          "fileSize: bytes",
          "url: preview/access URL"
        @/cluster

    ##architecturalLayers{id:architecture, type:dependency_analysis}
      "File attachment architecture"
      
      ##presentation{id:frontend_layer, type:ui_layer}
        ##components{id:ui_components, @critical}
          @cluster{primary, type:main_features}
            "ChatInputArea - File input button",
            "AttachmentPreview - File display"
          @/cluster
          @cluster{ui_elements, type:interface}
            "Paperclip icon button",
            "Hidden file input",
            "Preview cards",
            "Remove buttons"
          @/cluster
        
        ##hooks{id:file_hooks}
          @cluster{custom_hooks, type:state_management}
            "useFileManagement - Core logic",
            "useChatActions - Integration",
            "uploadFileMutation - API calls"
          @/cluster
        
        ##filePreview{id:preview_rendering}
          @cluster{preview_types, type:display}
            "Image thumbnails",
            "File type icons",
            "File name display",
            "Size information"
          @/cluster
      
      ##businessLogic{id:backend_layer, type:server_layer}
        ##fileRoutes{id:api_routes, @critical}
          @cluster{endpoints, type:file_apis}
            "POST /api/files/upload",
            "GET /uploads/:filename",
            "DELETE /api/files/:id"
          @/cluster
        
        ##fileServices{id:file_processing}
          @cluster{services, type:business_logic}
            "File storage service",
            "Thumbnail generation",
            "Virus scanning (if enabled)",
            "Compression service"
          @/cluster
        
        ##retentionLogic{id:lifecycle_management}
          @cluster{retention, type:policies}
            "attachmentRetentionService",
            "Category-based retention",
            "Scheduled deletion",
            "Policy enforcement"
          @/cluster
      
      ##dataLayer{id:persistence_layer, type:data_layer}
        ##fileStorage{id:disk_storage}
          @cluster{storage, type:filesystem}
            "uploads/ directory",
            "Unique filenames",
            "Original name preserved",
            "Organized by date"
          @/cluster
        
        ##database{id:file_metadata, @critical}
          @cluster{schema, type:tables}
            "files table structure",
            "conversationId link",
            "messageId association",
            "Retention metadata"
          @/cluster

    ##attachmentFeatures{id:feature_capabilities, type:functionality}
      "Rich attachment features"
      
      ##supportedTypes{id:file_types}
        @cluster{formats, type:supported}
          "Images: jpg, png, gif, webp",
          "Documents: pdf, doc, txt",
          "Data: csv, json, xml",
          "Archives: zip, tar"
        @/cluster
      
      ##previewCapabilities{id:preview_features}
        @cluster{previews, type:display_options}
          "Image thumbnails",
          "File type icons",
          "Metadata display",
          "Quick actions"
        @/cluster
      
      ##aiIntegration{id:ai_context}
        @cluster{ai_features, type:integration}
          "Image analysis by AI",
          "Document content extraction",
          "Context from file names",
          "Multi-modal responses"
        @/cluster

    ##performanceConsiderations{id:optimization, type:efficiency_mapping}
      ##uploadOptimization{id:upload_performance}
        @cluster{optimizations, type:performance}
          "Parallel file uploads",
          "Progress tracking",
          "Chunked uploads for large files",
          "Background processing"
        @/cluster
      
      ##previewPerformance{id:preview_optimization}
        @cluster{techniques, type:efficiency}
          "Lazy loading images",
          "Thumbnail caching",
          "Optimized preview sizes",
          "Virtual rendering for many files"
        @/cluster

    ##securityConsiderations{id:security, type:protection_mapping}
      ##uploadSecurity{id:file_security}
        @cluster{protections, type:security}
          "File type validation",
          "Size limits (25MB)",
          "Filename sanitization",
          "Path traversal prevention"
        @/cluster

    ##integrationEvidence{id:validation, type:evidence_tracking}
      ##implementationStatus{id:feature_status, type:status_tracking}
        @processing{
          status:"active",
          lastVerified:"2025-01-01T00:00:00Z",
          verificationMethod:"manual",
          evidenceLocation:"client/src/hooks/useFileManagement.ts"
        }
      
      ##testingEvidence{id:test_coverage}
        @cluster{tests, type:validation}
          "AttachmentPreview.test.tsx",
          "File upload integration tests"
        @/cluster

    ##dependencies{id:feature_dependencies, type:dependency_tracking}
      @cluster{internal, type:internal_features}
        "Send Message",
        "Attachment Preview",
        "File Manager (shared logic)"
      @/cluster
      @cluster{libraries, type:external}
        "Multer for uploads",
        "FormData API"
      @/cluster

    ##impacts{id:feature_impacts, type:impact_analysis}
      @cluster{enables, type:functionality}
        "Rich media messages",
        "Document sharing",
        "Visual communication",
        "Multi-modal AI"
      @/cluster
      @cluster{integrates, type:shared_systems}
        "File Manager system",
        "Retention policies",
        "Storage management"
      @/cluster

@processing{
  mapping_sequence:[userFlow, systemFlow, dataFlowTrace, architecturalLayers],
  quality_gates:[attachmentFeatures, performanceConsiderations, securityConsiderations],
  validation_requirements:[integrationEvidence],
  relationship_analysis:[dependencies, impacts]
}