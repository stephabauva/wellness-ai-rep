@context{domain:health_dashboard, feature:metrics_overview, version:1.0}

#ROOT
  ##metricsOverview{id:key_metrics_display, type:feature, @critical}
    "Key metrics overview showing most important health indicators"
    
    ##dataFlowTrace{id:complete_cycle, type:workflow, @critical}
      "Complete data flow for metrics overview display"
      
      ##userAction{id:trigger, type:interaction, @passive}
        "Metrics overview loads automatically with dashboard"
        @processing{
          trigger:"Dashboard component mount",
          visibility_check:"User visibility preferences applied"
        }
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side metrics processing and display"
        
        ##triggerComponent{id:initiator}
          "KeyMetricsOverview component"
          @file{path:"client/src/components/health/KeyMetricsOverview.tsx"}
          @ref:dataProcessing
        
        ##dataProcessing{id:metric_extraction}
          @cluster{functions, type:processing}
            "getLatestMetricValue() - Extract most recent value"
            "getLatestMetricUnit() - Get unit for display"
            "calculateChange() - Calculate percentage change"
            "calculateProgress() - Progress towards goals"
            "getHeartRateStatus() - Determine HR status"
          @/cluster
        
        ##stateManagement{id:component_state}
          @cluster{state, type:react}
            "visibilitySettings from React Query"
            "isRemovalMode prop state"
            "selectedMetricsForRemoval array"
          @/cluster
        
        ##reactQueryHooks{id:query_system}
          @cluster{hooks, type:tanstack_query}
            "queryKey: ['/api/health-consent/visibility']"
            "Fetches user's metric visibility preferences"
          @/cluster
        
        ##apiCalls{id:visibility_fetch, @critical}
          "API call for visibility settings"
          @processing{
            endpoint:"/api/health-consent/visibility",
            method:"GET",
            purpose:"Fetch which metrics to display"
          }
      
      ##dataTransformation{id:metric_processing, type:layer}
        "Transform raw health data into display metrics"
        
        ##metricConfiguration{id:metric_mapping}
          "Predefined metric configurations"
          @cluster{configs, type:mapping}
            {
              "steps": { title: "Daily Steps", unit: "steps", icon: Activity, goalValue: 10000 },
              "heart_rate": { title: "Heart Rate", unit: "bpm", icon: Heart, hasStatus: true },
              "sleep_duration": { title: "Sleep Duration", unit: "hours", icon: Moon, goalValue: 8 },
              "active_energy": { title: "Active Calories", unit: "cal", icon: Zap, goalValue: 500 },
              "water_intake": { title: "Water Intake", unit: "oz", icon: Droplets, goalValue: 64 }
            }
          @/cluster
        
        ##visibilityFiltering{id:metric_filtering}
          "Filter metrics based on user preferences"
          @processing{
            visible_metrics:"Array from dashboard_preferences",
            hidden_metrics:"Explicitly hidden metrics",
            default_metrics:"['steps', 'heart_rate', 'sleep_duration', 'active_energy']"
          }
        
        ##metricEnhancement{id:add_context}
          "Add contextual information to metrics"
          @cluster{enhancements, type:calculation}
            "Progress bars for goal-based metrics"
            "Status colors (green/yellow/red) for ranges"
            "Trend indicators from historical data"
            "Change percentages between readings"
          @/cluster
      
      ##renderingFlow{id:ui_generation, type:layer}
        "Generate UI for each visible metric"
        
        ##componentMapping{id:metric_to_ui}
          "Map each metric to StatCard component"
          @processing{
            iteration:"visibleMetrics.map()",
            component:"StatCard with metric-specific props"
          }
        
        ##conditionalRendering{id:removal_mode}
          "Handle metric removal mode"
          @cluster{ui_elements, type:conditional}
            "Checkbox overlay when isRemovalMode = true"
            "Selection state management"
            "Batch removal handling"
          @/cluster
        
        ##emptyState{id:no_metrics}
          "Handle case when no metrics selected"
          @processing{
            condition:"visibleMetrics.length === 0",
            display:"Guidance message to add metrics"
          }
    
    ##architecturalLayers{id:layers, type:architecture}
      "Architectural components for metrics overview"
      
      ##presentationLayer{id:ui_components}
        @cluster{components, type:react}
          "KeyMetricsOverview.tsx - Main container"
          "StatCard component - Individual metric display"
          "Checkbox component - Removal selection"
          "Icon components from lucide-react"
        @/cluster
        @cluster{layout, type:ui}
          "Responsive grid (1-4 columns)"
          "Relative positioning for overlays"
          "Conditional styling for states"
        @/cluster
      
      ##businessLogicLayer{id:metric_logic}
        @cluster{calculations, type:business_logic}
          "Latest value extraction algorithm"
          "Percentage change calculation"
          "Goal progress computation"
          "Status determination logic"
        @/cluster
        @cluster{configurations, type:data}
          "Metric type configurations"
          "Default visibility settings"
          "Goal values per metric type"
        @/cluster
      
      ##dataAccessLayer{id:data_source}
        @cluster{props, type:data_flow}
          "healthData prop from parent"
          "Visibility settings from API"
          "Selection state management"
        @/cluster
    
    ##errorBoundaries{id:error_handling, type:reliability}
      "Error handling strategies"
      
      ##dataValidation{id:input_validation}
        @cluster{checks, type:validation}
          "Null/undefined health data handling"
          "Missing metric configuration fallback"
          "Invalid value parsing protection"
        @/cluster
      
      ##uiProtection{id:render_safety}
        @cluster{safeguards, type:ui}
          "Default 'N/A' for missing values"
          "Fallback icon for unknown metrics"
          "Empty state for no visible metrics"
        @/cluster
    
    ##performanceConsiderations{id:optimization, type:performance}
      "Performance optimizations"
      
      ##dataProcessing{id:efficient_extraction}
        @cluster{optimizations, type:performance}
          "Sort once, extract latest value"
          "Memoized metric configurations"
          "Early return for empty data"
        @/cluster
      
      ##renderOptimization{id:ui_performance}
        @cluster{strategies, type:rendering}
          "Key-based rendering for metrics"
          "Conditional component mounting"
          "Static configuration objects"
        @/cluster
    
    ##securityConsiderations{id:security, type:protection}
      "Security and privacy measures"
      
      ##dataPrivacy{id:visibility_control}
        @cluster{controls, type:privacy}
          "Respect user visibility settings"
          "No display of hidden metrics"
          "Category-level filtering support"
        @/cluster
      
      ##stateProtection{id:data_integrity}
        @cluster{safeguards, type:security}
          "Immutable metric configurations"
          "Controlled state updates only"
          "No direct data manipulation"
        @/cluster
    
    ##integrationEvidence{id:verified_integration, type:validation}
      "Evidence of component integration"
      
      ##parentIntegration{id:dashboard_connection}
        @evidence{
          file:"HealthDataSection.tsx",
          lines:"417-422",
          code:"<KeyMetricsOverview healthData={allHealthData} ... />"
        }
      
      ##visibilityIntegration{id:settings_api}
        @evidence{
          file:"KeyMetricsOverview.tsx",
          lines:"66-73",
          code:"const { data: visibilitySettings } = useQuery({...})"
        }
      
      ##metricProcessing{id:data_functions}
        @evidence{
          file:"KeyMetricsOverview.tsx",
          lines:"26-36",
          code:"const getLatestMetricValue = (...) => {...}"
        }
    
    ##dependencies{id:feature_dependencies, type:graph}
      "Component dependencies"
      
      ##dataDependencies{id:data_source}
        @cluster{sources, type:dependency}
          "Health data from parent component"
          "Visibility settings from API"
          "Metric configurations (hardcoded)"
        @/cluster
      
      ##uiDependencies{id:ui_libraries}
        @cluster{libraries, type:dependency}
          "StatCard component"
          "@tanstack/react-query"
          "lucide-react icons"
          "Shadcn/ui checkbox"
        @/cluster
    
    ##impacts{id:affected_features, type:graph}
      "Features impacted by metrics overview"
      
      ##visualImpact{id:dashboard_appearance}
        @cluster{effects, type:impact}
          "Primary visual element of dashboard"
          "Sets expectations for data freshness"
          "Influences user engagement patterns"
        @/cluster
      
      ##functionalImpact{id:feature_interaction}
        @cluster{effects, type:impact}
          "Metric removal affects all views"
          "Goal progress drives coaching insights"
          "Status indicators inform alerts"
        @/cluster