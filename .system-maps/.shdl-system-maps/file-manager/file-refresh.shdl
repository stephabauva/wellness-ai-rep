@context{domain:file_manager, feature_group:core_operations, format:shdl, version:2.0.0, complexity:low, enforcement:strict}
@meta{last_updated:"2025-01-01T10:00:00Z", validation_status:complete, token_estimate:450, critical_paths:4, processing_priority:2}

#FILE_REFRESH{confidence:1.0, integration_status:complete, @standard}
  ##feature_definition{id:file_refresh_root, type:utility, confidence:1.0}
    "Manual and automatic file list refresh functionality"
    →primary_user_workflow[click_refresh→fetch_latest→update_display]
    →dependencies[file_api, tanstack_query]
    →user_workflows[manual_refresh, auto_refresh_after_operations]

  @cluster{core_workflow, confidence:1.0}
    ##refresh_workflow{id:primary_refresh_flow, type:user_journey, confidence:1.0}
      "File list refresh process"
      @processing{
        user_clicks_refresh→trigger_refetch→api_call→
        database_query→response_processing→ui_update
      }
      @data_flow{
        ui_trigger:[FileActionsToolbar, refresh_button, RotateCcw_icon],
        query_refetch:[useFileApi.refetchFiles],
        api_call:[GET_/api/files],
        ui_update:[FileList_rerender]
      }

    ##auto_refresh_workflow{id:automatic_refresh, type:system_triggered, confidence:1.0}
      "Automatic refresh after operations"
      @processing{
        operation_success→query_invalidation→automatic_refetch→ui_update
      }
      @triggers{
        after_upload:invalidateQueries(["files"]),
        after_delete:invalidateQueries(["files"]),
        after_categorize:invalidateQueries(["files"])
      }
  @/cluster

  @cluster{frontend_components, confidence:1.0}
    ##presentation_layer{id:ui_components, type:client_side, confidence:1.0}
      FileActionsToolbar{
        path:"client/src/components/filemanager/FileActionsToolbar.tsx",
        refresh_button:{
          icon:"RotateCcw",
          onClick:"onRefresh",
          disabled_during_loading:true
        },
        status:verified
      },
      FileManagerSection{
        path:"client/src/components/FileManagerSection.tsx",
        props_drilling:{
          refetchFiles→FileActionsToolbar.onRefresh
        },
        status:verified
      }

    ##frontend_logic{id:hooks, confidence:1.0}
      useFileApi{
        path:"client/src/hooks/useFileApi.ts",
        refetch_function:{
          name:"refetchFiles",
          source:"useQuery",
          triggers_network_request:true
        },
        query_configuration:{
          queryKey:["files", "/api/files"],
          queryFn:fetch("/api/files"),
          staleTime:0
        },
        status:active
      }
  @/cluster

  @cluster{backend_services, confidence:1.0}
    ##api_layer{id:server_endpoint, confidence:1.0}
      files_endpoint{
        path:"server/routes/file-routes.ts",
        endpoint:"GET /api/files",
        handler_lines:"123-192",
        operations:[
          fetch_user_files,
          join_with_categories,
          filter_deleted,
          sort_by_date
        ],
        status:active
      }
  @/cluster

  @cluster{data_layer, confidence:1.0}
    ##database_query{id:files_fetch, confidence:1.0}
      files_query{
        tables:[files, fileCategories],
        join:"LEFT JOIN fileCategories ON files.categoryId = fileCategories.id",
        filter:"WHERE userId = ? AND isDeleted = false",
        sort:"ORDER BY createdAt DESC",
        status:active
      }
  @/cluster

  @cluster{state_management, confidence:1.0}
    ##loading_states{id:ui_feedback, confidence:1.0}
      loading_indicator{
        controlled_by:"isLoadingFiles",
        shows:skeleton_loader,
        blocks_interactions:true
      },
      error_handling{
        error_state:"filesError",
        retry_mechanism:"refetchFiles",
        user_feedback:error_toast
      }
  @/cluster

  @cluster{performance_optimizations, confidence:1.0}
    ##caching_strategy{id:query_cache, confidence:1.0}
      tanstack_query_cache{
        cache_key:["files", "/api/files"],
        stale_time:0,
        cache_time:5_minutes,
        background_refetch:true
      },
      deduplication{
        concurrent_requests:prevented,
        in_flight_deduplication:true
      }
  @/cluster

@processing{
  flow_sequence:[
    refresh_trigger, query_refetch, network_request,
    database_query, response_processing, cache_update, ui_rerender
  ],
  critical_paths:[
    network_request, database_query
  ],
  optimization_points:[
    query_deduplication, loading_state_management
  ]
}

@dependencies{
  frontend:[
    React, TanStack_Query, useFileApi
  ],
  backend:[
    Express, Drizzle_ORM, PostgreSQL
  ]
}

@integration_evidence{
  verified_flows:[
    "Manual refresh button works",
    "Auto-refresh after upload",
    "Loading states display correctly",
    "Error states handled gracefully"
  ]
}