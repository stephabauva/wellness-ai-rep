{
  "lastUpdated": "2025-06-26T10:00:00Z",
  "dependencies": ["memory", "files"],
  "featureGroups": {
    "core-messaging": {
      "description": "Handles the fundamental real-time chat experience, including sending, receiving, and displaying messages.",
      "features": {
        "send-message": {
          "description": "Allows the user to send a text message, with or without attachments, to the AI coach.",
          "userFlow": [
            "User types a message in the ChatInputArea.",
            "User clicks the send button or presses Enter.",
            "The `useChatActions` hook calls `startStreaming` from `useStreamingChat`.",
            "A POST request is sent to `/api/messages/stream`."
          ],
          "components": [
            {
              "name": "ChatInputArea",
              "path": "client/src/components/ChatInputArea.tsx",
              "description": "The UI component for typing messages and handling send actions.",
              "uses": ["useChatActions", "AudioRecorder"]
            },
            {
              "name": "useChatActions",
              "path": "client/src/hooks/useChatActions.ts",
              "description": "A hook that consolidates all user actions within the chat interface, including sending messages and managing attachments.",
              "uses": ["useStreamingChat", "useAppContext", "useFileManagement"]
            }
          ]
        },
        "receive-streaming-response": {
          "description": "Displays the AI's response in real-time as it is being generated.",
          "userFlow": [
            "The frontend establishes a connection to the `/api/messages/stream` endpoint.",
            "Server-Sent Events (SSE) are received with message chunks.",
            "The `useStreamingChat` hook processes these events, updating the `streamingMessage` state.",
            "The `MessageDisplayArea` component renders the incoming message."
          ],
          "components": [
            {
              "name": "MessageDisplayArea",
              "path": "client/src/components/MessageDisplayArea.tsx",
              "description": "Renders the list of messages, including the live streaming message.",
              "uses": ["ChatMessage"]
            },
            {
              "name": "useStreamingChat",
              "path": "client/src/hooks/useStreamingChat.ts",
              "description": "Manages the real-time connection to the streaming API and handles incoming message events.",
              "calls": ["/api/messages/stream"]
            }
          ]
        },
        "conversation-history": {
          "description": "Allows the user to view past conversations and switch between them.",
          "userFlow": [
            "User clicks the 'History' button in the `ChatSection` header.",
            "The `ConversationHistory` modal opens, listing past conversations.",
            "User clicks on a conversation to load it.",
            "`useChatMessages` fetches the messages for the selected conversation."
          ],
          "components": [
            {
              "name": "ConversationHistory",
              "path": "client/src/components/ConversationHistory.tsx",
              "description": "A modal component that displays a list of past conversations.",
              "uses": ["useChatMessages"]
            },
            {
              "name": "useChatMessages",
              "path": "client/src/hooks/useChatMessages.ts",
              "description": "Manages the state of messages for the current conversation.",
              "calls": ["/api/messages"]
            }
          ]
        }
      }
    },
    "input-enhancements": {
      "description": "Features that provide alternative methods for message input beyond typing.",
      "features": {
        "file-attachment": {
          "description": "Allows users to attach files to their messages.",
          "userFlow": [
            "User clicks the 'Paperclip' icon in `ChatInputArea`.",
            "The `useFileManagement` hook's `handleFileChange` function is triggered.",
            "A POST request is sent to `/api/upload` to upload the file.",
            "The file is displayed in the `AttachmentPreview` component."
          ],
          "components": [
            {
              "name": "useFileManagement",
              "path": "client/src/hooks/useFileManagement.ts",
              "description": "Handles file uploads, previews, and removal.",
              "calls": ["/api/upload"]
            },
            {
              "name": "AttachmentPreview",
              "path": "client/src/components/AttachmentPreview.tsx",
              "description": "Displays a preview of the attached files before sending."
            }
          ]
        },
        "camera-capture": {
          "description": "Allows users to take a photo and attach it to their message.",
          "userFlow": [
            "User clicks the 'Camera' icon in `ChatInputArea`.",
            "A modal with the camera feed opens.",
            "User clicks 'Capture Photo'.",
            "The photo is sent to `useFileManagement`'s `uploadFileMutation`."
          ],
          "components": [
            {
              "name": "ChatInputArea",
              "path": "client/src/components/ChatInputArea.tsx",
              "description": "Contains the UI and logic for opening and managing the camera modal."
            }
          ]
        },
        "audio-recording": {
          "description": "Allows users to record their voice, transcribe it to text, and use it as their message.",
          "userFlow": [
            "User clicks the microphone icon in `AudioRecorder`.",
            "`useAudioRecording` hook starts recording.",
            "User stops recording.",
            "The audio is sent to the `/api/transcribe` endpoint.",
            "The transcribed text is set as the input message."
          ],
          "components": [
            {
              "name": "AudioRecorder",
              "path": "client/src/components/AudioRecorder.tsx",
              "description": "The UI component for the audio recording button and state.",
              "uses": ["useAudioRecording"]
            },
            {
              "name": "useAudioRecording",
              "path": "client/src/hooks/useAudioRecording.ts",
              "description": "Handles the logic for recording audio from the microphone and sending it for transcription.",
              "calls": ["/api/transcribe"]
            }
          ]
        }
      }
    },
    "advanced-features": {
      "description": "Enhancements built on top of the core messaging functionality.",
      "features": {
        "chatgpt-style-memory": {
          "description": "Provides the AI with context from past conversations through real-time deduplication and memory-enhanced system prompts.",
          "userFlow": [
            "When a user sends a message, the `aiService` on the backend calls `chatGPTMemoryEnhancement.buildEnhancedSystemPrompt`.",
            "In parallel, `chatGPTMemoryEnhancement.processWithDeduplication` is called to analyze the message for potential new memories.",
            "The AI response is generated with the enhanced context."
          ],
          "components": [
            {
              "name": "ChatGPTMemoryEnhancement",
              "path": "server/services/chatgpt-memory-enhancement.ts",
              "description": "The core service for providing ChatGPT-like memory capabilities.",
              "uses": ["memoryService", "db"]
            }
          ]
        },
        "context-aware-prompts": {
          "description": "Builds a detailed context for the AI, including persona, memories, and conversation history.",
          "userFlow": [
            "Before calling the AI provider, the `aiService` uses `chatContextService.buildChatContext`.",
            "This service gathers the coaching persona, relevant memories, and formats the conversation history.",
            "The final, context-rich prompt is sent to the AI."
          ],
          "components": [
            {
              "name": "ChatContextService",
              "path": "server/services/chat-context-service.ts",
              "description": "A service responsible for constructing the full context for an AI chat interaction.",
              "uses": ["memoryService"]
            }
          ]
        }
      }
    }
  },
  "components": {
    "ChatSection": {
      "path": "client/src/components/ChatSection.tsx",
      "description": "The main parent component for the entire chat interface.",
      "uses": [
        "useChatMessages",
        "useChatActions",
        "MessageDisplayArea",
        "ChatInputArea",
        "ConversationHistory"
      ]
    }
  },
  "apiEndpoints": {
    "/api/messages/stream": {
      "method": "POST",
      "description": "The primary endpoint for sending and receiving chat messages in real-time using Server-Sent Events (SSE).",
      "path": "server/routes.ts",
      "handler": "app.post('/api/messages/stream', ...)",
      "readsFrom": ["conversations", "conversationMessages", "users"],
      "modifies": ["conversations", "conversationMessages"],
      "calls": ["aiService.getChatResponseStream"]
    },
    "/api/messages": {
      "method": "GET",
      "description": "Fetches the messages for a specific conversation.",
      "path": "server/routes.ts",
      "handler": "app.get('/api/messages', ...)",
      "readsFrom": ["chatMessages"],
      "modifies": []
    },
    "/api/upload": {
      "method": "POST",
      "description": "Uploads a file to be attached to a message.",
      "path": "server/routes.ts",
      "handler": "app.post('/api/upload', ...)",
      "readsFrom": [],
      "modifies": ["files"]
    },
    "/api/transcribe": {
      "method": "POST",
      "description": "Transcribes an audio file to text.",
      "path": "server/routes.ts",
      "handler": "app.post('/api/transcribe', ...)",
      "readsFrom": [],
      "modifies": []
    }
  },
  "database": {
    "tables": {
      "conversations": {
        "schema": "shared/schema.ts",
        "description": "Stores metadata for each conversation, such as the title and user ID."
      },
      "conversationMessages": {
        "schema": "shared/schema.ts",
        "description": "Stores individual messages within each conversation, including the role (user/assistant) and content."
      },
      "chatMessages": {
        "schema": "shared/schema.ts",
        "description": "Legacy table for chat messages. New development should use `conversationMessages`."
      },
      "files": {
        "schema": "shared/schema.ts",
        "description": "Stores information about uploaded files."
      }
    }
  }
}
