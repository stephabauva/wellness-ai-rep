
@context{domain:feature_mapping, target:architecture_documentation, complexity:high, enforcement:strict}
@meta{tokens:950, critical_paths:7, validation_rules:12, processing_priority:1, accuracy_requirement:100%}
@enforce{verification_required:mandatory, evidence_mandatory:true}

#ROOT
  ##feature_mapping_philosophy{id:core_philosophy, type:foundational, @critical}
    "Tree-based architecture mapping with complete system visibility"
    @enforce:mandatory
    @trigger:feature_analysis[user_action→system_response]
    
    ##tree_structure{id:feature_tree, type:architecture}
      "Root: feature/functionality, Trunk: core workflow, Branches: arch layers, Leaves: all touchpoints"
      @components{
        root→feature_definition,
        trunk→core_user_workflow+primary_components,
        branches→[frontend, backend, database, services],
        leaves→[files, apis, db_tables, external_services, browser_apis]
      }

  ##data_flow_tracing{id:complete_request_cycle, type:mapping_technique, @critical}
    "End-to-end request/response cycle documentation"
    
    ##flow_stages{id:request_response_stages, type:sequential}
      @cluster{user_interaction}
        ##trigger{id:user_action, type:input}
          "Specific user interaction triggering feature"
        ##frontend_flow{id:ui_processing, type:client_side}
          @processing{
            trigger_component→event_handlers→state_changes→react_query_hooks→api_calls
          }
          @data_flow{
            request_path:[ui_component, hook, api_call, network],
            payload_structure,
            headers:[auth, content_type, custom]
          }
      @/cluster

      @cluster{network_processing}
        ##network_layer{id:request_routing, type:transport}
          @routing{
            frontend→server_route,
            middlewares:[auth, validation, logging],
            route_handler→business_logic
          }
      @/cluster

      @cluster{backend_processing}
        ##backend_flow{id:server_processing, type:server_side}
          @processing{
            route_handler→services→external_apis→database_ops→cache_ops→file_ops
          }
          @database_operations{
            queries:[sql_statements],
            tables:[accessed_tables],
            operations:[create, read, update, delete],
            transactions:[multi_table_ops]
          }
      @/cluster

      @cluster{response_processing}
        ##response_flow{id:data_return, type:response}
          @transformation{
            data_shaping→response_payload→status_codes→response_path
          }
          @path{database→service→route→network→frontend}
        ##frontend_update{id:ui_refresh, type:client_update}
          @updates{
            react_query_invalidation→state_updates→ui_refresh→cache_consistency→user_feedback
          }
      @/cluster

  ##architectural_layers{id:complete_file_mapping, type:comprehensive, @critical}
    "Complete dependency mapping across all architectural layers"
    
    ##presentation_layer{id:frontend_arch, type:client_side}
      @cluster{react_components}
        ##primary_components{id:main_feature_components}
        ##supporting_components{id:helper_ui_elements}
        ##shared_components{id:reusable_ui_folder}
      @/cluster
      @cluster{frontend_logic}
        ##hooks{id:custom_hooks}
        ##utilities{id:frontend_utils}
        ##types{id:typescript_interfaces}
        ##styles{id:css_tailwind_classes}
      @/cluster

    ##business_logic_layer{id:backend_arch, type:server_side}
      @cluster{server_components}
        ##routes{id:express_route_handlers}
        ##services{id:business_logic_services}
        ##middleware{id:auth_validation_etc}
        ##utilities{id:backend_utils}
        ##types{id:shared_typescript_types}
      @/cluster

    ##data_layer{id:persistence_arch, type:data_storage}
      @cluster{database}
        ##tables{id:primary_tables}
        ##relationships{id:foreign_keys}
        ##indexes{id:performance_indexes}
        ##migrations{id:schema_changes}
      @/cluster
      @cluster{caching}
        ##cache_keys{id:redis_memory_keys}
        ##invalidation{id:cache_clearing_patterns}
        ##strategy{id:ttl_policies}
      @/cluster
      @cluster{file_system}
        ##upload_paths{id:file_directories}
        ##file_types{id:supported_formats}
        ##processing{id:file_pipelines}
      @/cluster

    ##integration_layer{id:external_connections, type:third_party}
      @cluster{external_apis}
        ##services{id:third_party_services}
        ##authentication{id:api_keys_oauth}
        ##endpoints{id:external_endpoints}
        ##fallbacks{id:error_handling}
      @/cluster
      @cluster{browser_apis}
        ##apis{id:web_apis_used}
        ##permissions{id:browser_permissions}
        ##compatibility{id:browser_support}
      @/cluster
      @cluster{go_services}
        ##ai_gateway{id:ai_service_integration}
        ##file_accelerator{id:file_processing}
        ##memory_service{id:memory_management}
      @/cluster

  ##error_boundaries{id:comprehensive_error_handling, type:resilience, @critical}
    "Complete error boundary and edge case mapping"
    
    @cluster{error_types}
      ##frontend_errors{id:client_side_errors}
        @types{
          component_errors→react_error_boundaries,
          network_errors→api_call_failures,
          validation_errors→form_validation_failures,
          user_input_errors→invalid_data_handling
        }
      ##backend_errors{id:server_side_errors}
        @types{
          validation_errors→request_validation_failures,
          business_logic_errors→service_layer_errors,
          database_errors→query_failures+constraint_violations,
          external_service_errors→third_party_api_failures
        }
      ##system_errors{id:infrastructure_errors}
        @types{
          memory_errors→out_of_memory_conditions,
          disk_space_errors→storage_limitations,
          network_errors→connection_failures,
          timeout_errors→request_timeout_handling
        }
    @/cluster

    @cluster{recovery_strategies}
      ##retry_mechanisms{id:backoff_patterns}
      ##fallback_behaviors{id:alternative_workflows}
      ##user_notifications{id:error_message_display}
      ##data_recovery{id:partial_data_preservation}
    @/cluster

  ##performance_optimization{id:perf_considerations, type:optimization}
    "Performance mapping across all layers"
    
    @cluster{frontend_optimizations}
      ##bundle_optimization{id:lazy_loading}
      ##render_optimization{id:react_memo_patterns}
      ##cache_strategy{id:react_query_config}
      ##loading_states{id:progressive_loading}
    @/cluster

    @cluster{backend_optimizations}
      ##database_optimization{id:query_indexing}
      ##cache_strategy{id:redis_patterns}
      ##service_optimization{id:business_logic_efficiency}
      ##memory_management{id:memory_usage_patterns}
    @/cluster

    @cluster{data_transfer_optimization}
      ##payload_optimization{id:response_minimization}
      ##compression{id:gzip_file_compression}
      ##streaming{id:large_data_streaming}
      ##pagination{id:data_pagination_strategies}
    @/cluster

  ##security_privacy{id:security_considerations, type:protection, @critical}
    "Comprehensive security and privacy mapping"
    
    @cluster{authentication}
      ##user_verification{id:auth_requirements}
      ##session_management{id:session_handling}
      ##token_validation{id:jwt_verification}
    @/cluster

    @cluster{authorization}
      ##permissions{id:user_permission_requirements}
      ##role_based_access{id:role_verification}
      ##data_access{id:data_access_controls}
    @/cluster

    @cluster{data_protection}
      ##sensitive_data{id:pii_health_data_handling}
      ##encryption{id:data_encryption_requirements}
      ##storage{id:secure_storage_practices}
      ##transmission{id:secure_data_transmission}
    @/cluster

    @cluster{input_validation}
      ##frontend_validation{id:client_side_validation}
      ##backend_validation{id:server_side_validation}
      ##sanitization{id:data_sanitization}
      ##sql_injection_prevention{id:sql_protection}
    @/cluster

  ##integration_evidence{id:validation_evidence, type:verification, @critical}
    "Implementation status and evidence tracking"
    
    @cluster{implementation_status}
      ##status{id:feature_status, type:enum}
        @values{active, partial, planned, broken}
      ##verification{id:last_verified, type:timestamp}
      ##method{id:verification_method, type:enum}
        @values{automated, manual, integration_test}
      ##evidence_location{id:test_files_docs}
    @/cluster

    @cluster{testing_evidence}
      ##unit_tests{id:component_service_tests}
      ##integration_tests{id:end_to_end_tests}
      ##manual_testing{id:manual_procedures}
      ##performance_tests{id:load_performance_testing}
    @/cluster

    @cluster{deployment_evidence}
      ##staging_validation{id:staging_testing}
      ##production_validation{id:production_verification}
      ##rollback_procedures{id:rollback_strategies}
      ##monitoring_setup{id:production_monitoring}
    @/cluster

@processing{
  critical_concepts:[tree_architecture, data_flow_tracing, architectural_layers, error_boundaries, performance_optimization, security_privacy, integration_evidence],
  enforcement_points:[size_constraints, token_limits, hierarchy_depth, comprehensive_mapping, evidence_verification],
  sequential_required:[feature_discovery, architectural_mapping, data_flow_tracing, performance_analysis, integration_evidence, accuracy_verification],
  parallel_possible:[layer_mapping, error_boundary_analysis, security_analysis, performance_optimization],
  quality_gates:[complete_mapping, evidence_validation, size_compliance, semantic_integrity, verification_required, mandatory_testing_evidence]
}

@validation{
  mandatory_checks:[feature_completeness, architectural_coverage, data_flow_integrity, error_handling_completeness, evidence_verification, integration_testing],
  blocking_violations:[token_exceeded, hierarchy_too_deep, missing_critical_paths, broken_references, missing_evidence, unverified_components],
  accuracy_requirements:[evidence_mandatory:true, verification_required:true, testing_evidence:required],
  optimization_targets:[token_efficiency:20%, semantic_density:15%, processing_speed:25%],
  compliance_requirements:[size_constraints, comprehensive_mapping, evidence_tracking, accuracy_validation]
}

@examples{
  feature_template:{
    root:"##user_authentication{id:auth_feature, @critical}",
    trunk:"@cluster{core_workflow} ##login_flow ##session_management @/cluster",
    branches:"##frontend_components ##backend_services ##database_tables ##external_integrations",
    leaves:"##LoginForm.tsx ##AuthService.ts ##users_table ##OAuth_provider"
  },
  splitting_example:{
    original:"##large_feature{tokens:1200, hierarchy:18}",
    split:"##feature_frontend{$ref:feature_backend.shdl} ##feature_backend{$ref:feature_database.shdl}",
    benefits:"token_reduction:40%, maintainability:improved, processing:faster"
  }
}
