{
  "tableOfContents": {
    "dashboard-core": ["components", "database", "data-stores"]
  },
  "lastUpdated": "2025-01-28T18:20:00Z",
  "dependencies": [],
  "featureGroups": {
    "dashboard-core": {
      "description": "Core dashboard infrastructure and shared components. Individual feature groups are in separate sub-domain maps.",
      "features": {
        "components": {
          "description": "Shared dashboard components used across all health dashboard features",
          "userFlow": [
            "Components provide reusable UI elements for health dashboard",
            "Components integrate with health data APIs and user settings",
            "Components support metrics management, filtering, and data operations"
          ],
          "components": [
            {
              "name": "HealthDataSection",
              "path": "client/src/components/HealthDataSection.tsx",
              "description": "Main container for the health dashboard. Manages state for metrics management, time filtering, and all health data operations.",
              "uses": [
                "useHealthDataApi",
                "useHealthVisibilitySettings",
                "useHealthReport",
                "HealthMetricsCard",
                "AddMetricsModal",
                "RemoveMetricsModal",
                "HealthDataImport",
                "NativeHealthIntegration"
              ]
            },
            {
              "name": "HealthMetricsCard",
              "path": "client/src/components/HealthMetricsCard.tsx",
              "description": "Displays a category of health metrics with charts and provides checkboxes for selection during removal mode. Filters its own display based on visibility settings and time range.",
              "uses": [
                "ActivityTrendChart",
                "HeartRateChart",
                "SleepQualityChart"
              ]
            }
          ]
        }
      }
    }
  },
  "components": {
    "HealthDataSection": {
      "path": "client/src/components/HealthDataSection.tsx",
      "type": "React Component",
      "description": "Main container for the health dashboard. Manages state for metrics management, time filtering, and all health data operations.",
      "calls": [
        "PATCH /api/health-consent/visibility",
        "DELETE /api/health-data/reset"
      ],
      "uses": [
        "useHealthDataApi",
        "useHealthVisibilitySettings",
        "useHealthReport",
        "HealthMetricsCard",
        "AddMetricsModal",
        "RemoveMetricsModal",
        "HealthDataImport",
        "NativeHealthIntegration"
      ],
      "invalidates": [
        "query:healthVisibilitySettings",
        "query:healthData"
      ]
    },
    "HealthMetricsCard": {
      "path": "client/src/components/HealthMetricsCard.tsx",
      "type": "React Component",
      "description": "Displays a category of health metrics with charts and provides checkboxes for selection during removal mode. Filters its own display based on visibility settings and time range.",
      "calls": [],
      "uses": [
        "ActivityTrendChart",
        "HeartRateChart",
        "SleepQualityChart"
      ],
      "invalidates": []
    },
    "AddMetricsModal": {
      "path": "client/src/components/health/AddMetricsModal.tsx",
      "type": "React Component",
      "description": "Modal dialog for adding new metrics to dashboard. Shows available metric categories with checkboxes.",
      "calls": [],
      "uses": [
        "useHealthVisibilitySettings"
      ],
      "invalidates": []
    },
    "RemoveMetricsModal": {
      "path": "client/src/components/health/RemoveMetricsModal.tsx",
      "type": "React Component",
      "description": "Modal dialog for removing metrics from dashboard. Shows currently visible metrics with checkboxes for removal.",
      "calls": [],
      "uses": [
        "useHealthVisibilitySettings"
      ],
      "invalidates": []
    },
    "HealthDataImport": {
      "path": "client/src/components/health/HealthDataImport.tsx",
      "type": "React Component",
      "description": "Component for importing health data from various file formats (Apple Health, Google Fit, etc.).",
      "calls": [
        "POST /api/health-data/import"
      ],
      "uses": [
        "useFileUpload"
      ],
      "invalidates": [
        "query:healthData"
      ]
    },
    "NativeHealthIntegration": {
      "path": "client/src/components/health/NativeHealthIntegration.tsx",
      "type": "React Component",
      "description": "Handles synchronization with native health apps (HealthKit/Google Fit) when running on mobile devices.",
      "calls": [
        "POST /api/health-data/native-sync"
      ],
      "uses": [
        "native-health-service"
      ],
      "invalidates": [
        "query:healthData"
      ]
    },
    "useHealthDataApi": {
      "path": "client/src/hooks/useHealthDataApi.ts",
      "type": "React Hook",
      "description": "Fetches health data with time range filtering and provides data reset functionality.",
      "calls": [
        "GET /api/health-data/categories",
        "GET /api/health-data",
        "DELETE /api/health-data/reset"
      ],
      "uses": [],
      "invalidates": [
        "query:healthData"
      ]
    },
    "useHealthVisibilitySettings": {
      "path": "client/src/hooks/useHealthVisibilitySettings.ts",
      "type": "React Hook",
      "description": "Manages fetching and updating the user's visibility preferences for metrics.",
      "calls": [
        "GET /api/health-consent/visibility",
        "PATCH /api/health-consent/visibility"
      ],
      "uses": [],
      "invalidates": [
        "query:healthVisibilitySettings"
      ]
    },
    "useHealthReport": {
      "path": "client/src/hooks/useHealthReport.ts",
      "type": "React Hook",
      "description": "Generates PDF reports of health data for download.",
      "calls": [
        "POST /api/health-data/export/pdf"
      ],
      "uses": [],
      "invalidates": []
    }
  },
  "database": {
    "schemaFile": "shared/schema.ts",
    "tables": {
      "users": {
        "columns": {
          "id": { "type": "serial", "primaryKey": true },
          "preferences": { "type": "jsonb" }
        }
      },
      "healthData": {
        "columns": {
          "id": { "type": "serial", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "dataType": { "type": "text" },
          "value": { "type": "text" },
          "timestamp": { "type": "timestamp" },
          "source": { "type": "text" },
          "metadata": { "type": "jsonb" }
        }
      }
    }
  },
  "dataStores": {
    "query:healthVisibilitySettings": {
      "type": "React Query Key",
      "description": "Caches the user's health metric visibility settings on the client. Used by useHealthVisibilitySettings."
    },
    "query:healthData": {
      "type": "React Query Key",
      "description": "Caches health data with time-based filtering. Invalidated when new data is imported or data is reset."
    }
  },
  "apiEndpoints": {
    "GET /api/health-consent/visibility": {
      "method": "GET",
      "handler": "server/routes/health-routes.ts",
      "description": "Fetches the user's current dashboard visibility settings from their preferences.",
      "readsFrom": [
        "users.preferences.healthVisibilitySettings"
      ],
      "modifies": []
    },
    "PATCH /api/health-consent/visibility": {
      "method": "PATCH",
      "handler": "server/routes/health-routes.ts",
      "description": "Updates the user's dashboard visibility settings in their preferences.",
      "readsFrom": [
        "users"
      ],
      "modifies": [
        "users.preferences.healthVisibilitySettings"
      ]
    },
    "GET /api/health-data": {
      "method": "GET",
      "handler": "server/routes/health-routes.ts",
      "description": "Fetches a list of all health data records for the user within a given time range.",
      "readsFrom": [
        "healthData"
      ],
      "modifies": []
    },
    "GET /api/health-data/categories": {
      "method": "GET",
      "handler": "server/routes/health-routes.ts",
      "description": "Fetches health data records, grouped by category, with time range filtering.",
      "readsFrom": [
        "healthData"
      ],
      "modifies": []
    },
    "DELETE /api/health-data/reset": {
      "method": "DELETE",
      "handler": "server/routes/health-routes.ts",
      "description": "Deletes all health data for the current user.",
      "readsFrom": [
        "healthData"
      ],
      "modifies": [
        "healthData"
      ]
    },
    "POST /api/health-data/export/pdf": {
      "method": "POST",
      "handler": "server/routes/health-routes.ts",
      "description": "Generates a PDF report of the user's health data.",
      "readsFrom": [
        "healthData",
        "users"
      ],
      "modifies": []
    },
    "POST /api/health-data/import": {
      "method": "POST",
      "handler": "server/routes/health-routes.ts",
      "description": "Imports health data from uploaded files (Apple Health, Google Fit, etc.).",
      "readsFrom": [
        "healthData"
      ],
      "modifies": [
        "healthData"
      ]
    },
    "POST /api/health-data/native-sync": {
      "method": "POST",
      "handler": "server/routes/health-routes.ts",
      "description": "Synchronizes health data from native mobile health apps.",
      "readsFrom": [
        "healthData"
      ],
      "modifies": [
        "healthData"
      ]
    }
  },
  "subDomains": {
    "metrics-management": "./dashboard/metrics-management.map.json",
    "data-filtering": "./dashboard/data-filtering.map.json",
    "data-operations": "./dashboard/data-operations.map.json"
  }
}