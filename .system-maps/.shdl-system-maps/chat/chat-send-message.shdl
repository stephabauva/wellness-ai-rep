@context{domain:chat, feature:send_message}
@meta{
  featureName:"send-message",
  featureGroup:"core-messaging", 
  parentFile:"./chat-domain.shdl",
  domain:"chat",
  lastUpdated:"2025-01-01T00:00:00Z",
  mappingVersion:"2.0.0"
}

#ROOT
  ##sendMessage{id:send_message_feature, type:complete_mapping, @comprehensive}
    "Send text messages with optional attachments to AI assistant"
    
    ##userFlow{id:user_workflow, type:user_journey, @sequential}
      "User interaction workflow for sending messages"
      @processing{
        step1:"User types message text in input field",
        step2:"User optionally attaches files or captures photos", 
        step3:"User presses send button or hits Enter key",
        step4:"Message appears immediately in chat (optimistic update)",
        step5:"AI response begins streaming in real-time"
      }
    
    ##systemFlow{id:system_workflow, type:system_processing, @sequential}
      "System processing workflow for message sending"
      @processing{
        process1:"Validate message content and attachments",
        process2:"Create optimistic UI update for user message",
        process3:"Initiate streaming request to AI service",
        process4:"Save message to database asynchronously",
        process5:"Process and stream AI response in chunks"
      }
    
    ##dataFlowTrace{id:data_flow, type:request_response, @critical}
      "Complete request/response cycle for message sending"
      
      ##userAction{id:trigger, type:interaction, @blocking}
        "User sends message via input field"
        @processing{user_input→handleSendMessage}
      
      ##frontendFlow{id:client_processing, type:layer, @sequential}
        "Client-side message processing and state management"
        
        ##triggerComponent{id:initiator}
          "ChatInputArea component initiates the action"
          @ref:ChatInputArea.tsx
        
        ##eventHandlers{id:handlers}
          @cluster{functions, type:handlers}
            "handleSendMessage in useChatActions hook",
            "handleKeyPress for Enter key detection"
          @/cluster
        
        ##stateChanges{id:react_state}
          @cluster{updates, type:react_state}
            "inputMessage state cleared",
            "attachedFiles state cleared",
            "optimisticMessage added to context",
            "streamingActive set to true"
          @/cluster
        
        ##reactQueryHooks{id:query_system}
          @cluster{hooks, type:tanstack_query}
            "useChatMessages for message state",
            "sendMessageMutation for API calls"
          @/cluster
        
        ##apiCalls{id:network_requests, @critical}
          "Streaming API call configuration"
          @processing{
            endpoint:"/api/messages/stream",
            method:"POST",
            requestPayload:{
              content:"string",
              conversationId:"string | null",
              coachingMode:"string",
              aiProvider:"string",
              aiModel:"string",
              attachments:"AttachedFile[]",
              automaticModelSelection:"boolean"
            }
          }
          @cluster{requestPath, type:flow}
            "ChatInputArea → useChatActions → useStreamingChat → fetch API"
          @/cluster
          @cluster{headers, type:metadata}
            "Content-Type: application/json"
          @/cluster
      
      ##networkLayer{id:transport, type:layer}
        "Network transport using Server-Sent Events (SSE)"
        @processing{
          requestRoute:"POST /api/messages/stream",
          routeHandler:"chat-routes.ts → app.post('/api/messages/stream')"
        }
        @cluster{middlewares, type:processing}
          "CORS headers for SSE",
          "Request body parsing"
        @/cluster
      
      ##backendFlow{id:server_processing, type:layer, @sequential}
        "Server-side message processing and AI integration"
        
        ##routeHandler{id:entry_point}
          "chat-routes.ts handles streaming endpoint"
          @ref:messageSchema.parse
        
        ##servicesCalled{id:business_logic}
          @cluster{services, type:business_logic}
            "aiService.getChatResponseStream",
            "storage.getUser",
            "attachmentRetentionService.categorizeAttachment"
          @/cluster
        
        ##externalApiCalls{id:third_party}
          @cluster{external_services, type:api_calls}
            "OpenAI GPT-4o API",
            "Google Gemini 2.0 Flash API"
          @/cluster
        
        ##databaseOperations{id:data_layer, @critical}
          "Database operations for message persistence"
          @cluster{queries, type:sql}
            "SELECT from users for preferences",
            "INSERT into conversations (if new)",
            "INSERT into conversationMessages",
            "INSERT into files (for attachments)"
          @/cluster
          @cluster{tables, type:schema}
            "users", "conversations", "conversationMessages", "files"
          @/cluster
          @cluster{operations, type:crud}
            "CREATE conversation if needed",
            "CREATE user message",
            "CREATE AI response message"
          @/cluster
        
        ##cacheOperations{id:cache_layer}
          @cluster{cache_actions, type:cache}
            "User preferences cached",
            "AI model selection cached"
          @/cluster
      
      ##responseFlow{id:response_processing, type:layer, @sequential}
        "SSE response streaming to client"
        @cluster{dataTransformation, type:processing}
          "Chunk AI response into SSE events",
          "Format as data: JSON payloads"
        @/cluster
        @processing{
          responsePayload:{
            type:"chunk|complete|error|done",
            content:"string (for chunks)",
            conversationId:"string (on done)"
          },
          statusCodes:"200 for SSE stream"
        }
        @cluster{responsePath, type:flow}
          "AI Service → Route Handler → SSE Stream → Frontend"
        @/cluster
      
      ##frontendUpdateFlow{id:ui_refresh, type:layer}
        "Frontend state updates during streaming"
        @cluster{reactQueryInvalidation, type:cache_invalidation}
          "Messages query invalidated on completion"
        @/cluster
        @cluster{stateUpdates, type:component_state}
          "streamingMessage state updated per chunk",
          "isThinking state toggled",
          "addOptimisticMessage for instant UI"
        @/cluster
        @cluster{uiRefresh, type:rendering}
          "MessageDisplayArea re-renders",
          "SmoothStreamingText animates text"
        @/cluster
        @cluster{userFeedback, type:ux}
          "Immediate message appearance",
          "Thinking indicator",
          "Smooth text streaming"
        @/cluster

    ##architecturalLayers{id:architecture, type:dependency_analysis}
      "Complete architectural layer dependencies"
      
      ##presentation{id:frontend_layer, type:ui_layer}
        "Frontend components and hooks"
        
        ##components{id:ui_components, @critical}
          @cluster{primary, type:main_features}
            "ChatInputArea.tsx - Message input interface",
            "MessageDisplayArea.tsx - Message rendering"
          @/cluster
          @cluster{supporting, type:helpers}
            "AttachmentPreview.tsx - File preview",
            "Button, Input from ui/"
          @/cluster
        
        ##hooks{id:custom_hooks}
          @cluster{react_hooks, type:state_logic}
            "useChatActions - Message sending logic",
            "useStreamingChat - SSE streaming",
            "useFileManagement - Attachment handling",
            "useAppContext - Global state"
          @/cluster
        
        ##types{id:frontend_types}
          @cluster{typescript_interfaces, type:type_definitions}
            "AttachedFile interface",
            "StreamingMessage interface",
            "AppSettings type"
          @/cluster
      
      ##businessLogic{id:backend_layer, type:server_layer}
        "Server-side message processing"
        
        ##routes{id:api_routes, @critical}
          @cluster{express_handlers, type:route_handlers}
            "POST /api/messages/stream - Streaming endpoint",
            "POST /api/messages - Non-streaming fallback"
          @/cluster
        
        ##services{id:business_services, @critical}
          @cluster{logic_services, type:business_logic}
            "ai-service.ts - AI provider abstraction",
            "storage-service.ts - Message persistence",
            "attachment-retention-service.ts - File handling"
          @/cluster
        
        ##middleware{id:server_middleware}
          @cluster{middleware_stack, type:processing}
            "CORS configuration for SSE",
            "Body parser for JSON"
          @/cluster
      
      ##dataLayer{id:persistence_layer, type:data_layer}
        "Data storage and caching"
        
        ##database{id:relational_db, @critical}
          @cluster{tables, type:schema}
            "conversations - Chat sessions",
            "conversationMessages - Individual messages",
            "files - Uploaded attachments",
            "users - User preferences"
          @/cluster
          @cluster{relationships, type:foreign_keys}
            "conversationMessages.conversationId → conversations.id",
            "files.conversationId → conversations.id",
            "files.messageId → conversationMessages.id"
          @/cluster
      
      ##integration{id:external_layer, type:integration_layer}
        "External service integrations"
        
        ##externalApis{id:third_party_apis}
          @cluster{services, type:external_services}
            "OpenAI Chat Completions API",
            "Google Generative AI API"
          @/cluster
          @cluster{authentication, type:auth_methods}
            "API keys for each provider"
          @/cluster
        
        ##browserApis{id:web_apis}
          @cluster{apis, type:web_apis}
            "Fetch API for streaming",
            "FileReader for attachments"
          @/cluster

    ##errorBoundaries{id:error_handling, type:resilience_mapping}
      "Error handling throughout the message flow"
      
      ##frontendErrors{id:client_errors, type:ui_errors}
        @cluster{validationErrors, type:form_validation}
          "Empty message validation",
          "File size limits"
        @/cluster
        @cluster{networkErrors, type:network_failures}
          "SSE connection failures",
          "Timeout handling"
        @/cluster
      
      ##backendErrors{id:server_errors, type:backend_failures}
        @cluster{validationErrors, type:request_validation}
          "Zod schema validation",
          "Invalid conversation ID"
        @/cluster
        @cluster{externalServiceErrors, type:api_failures}
          "AI provider API failures",
          "Rate limiting"
        @/cluster
      
      ##recoveryStrategies{id:error_recovery, type:resilience}
        @cluster{retryMechanisms, type:retry_logic}
          "Automatic reconnection for SSE",
          "Fallback to non-streaming endpoint"
        @/cluster
        @cluster{userNotifications, type:user_feedback}
          "Toast notifications for errors",
          "Inline error messages"
        @/cluster

    ##performanceConsiderations{id:optimization, type:efficiency_mapping}
      "Performance optimizations for message sending"
      
      ##frontendOptimizations{id:client_performance, type:ui_optimization}
        @cluster{renderOptimization, type:react_optimization}
          "Optimistic updates for instant feedback",
          "React.memo for message components"
        @/cluster
        @cluster{cacheStrategy, type:client_cache}
          "Message deduplication in context"
        @/cluster
      
      ##backendOptimizations{id:server_performance, type:backend_optimization}
        @cluster{streaming, type:data_streaming}
          "SSE for real-time updates",
          "Chunked response processing"
        @/cluster
        @cluster{databaseOptimization, type:query_optimization}
          "Batch file insertions",
          "Indexed conversation lookups"
        @/cluster

    ##securityConsiderations{id:security, type:protection_mapping}
      "Security measures for message handling"
      
      ##inputValidation{id:input_security, type:validation_system}
        @cluster{frontendValidation, type:client_validation}
          "Message length limits",
          "File type restrictions"
        @/cluster
        @cluster{backendValidation, type:server_validation}
          "Zod schema validation",
          "SQL injection prevention"
        @/cluster
      
      ##dataProtection{id:data_security, type:privacy_protection}
        @cluster{transmission, type:secure_transport}
          "HTTPS for all API calls",
          "Secure file uploads"
        @/cluster

    ##integrationEvidence{id:validation, type:evidence_tracking}
      "Integration validation and testing evidence"
      
      ##implementationStatus{id:feature_status, type:status_tracking}
        @processing{
          status:"active",
          lastVerified:"2025-01-01T00:00:00Z",
          verificationMethod:"manual",
          evidenceLocation:"client/src/hooks/useChatActions.ts"
        }
      
      ##testingEvidence{id:test_coverage, type:validation_evidence}
        @cluster{unitTests, type:component_tests}
          "ChatInputArea.test.tsx",
          "MessageDisplayArea.test.tsx"
        @/cluster

    ##dependencies{id:feature_dependencies, type:dependency_tracking}
      @cluster{internal, type:internal_features}
        "Message Streaming feature",
        "Attachment Preview feature",
        "Optimistic Updates feature"
      @/cluster
      @cluster{external, type:third_party}
        "OpenAI API", "Google AI API"
      @/cluster

    ##impacts{id:feature_impacts, type:impact_analysis}
      @cluster{affects, type:affected_features}
        "Conversation History",
        "Memory Integration",
        "Message Display"
      @/cluster
      @cluster{sharedComponents, type:shared_ui}
        "Button, Input components",
        "Toast notifications"
      @/cluster

@processing{
  mapping_sequence:[userFlow, systemFlow, dataFlowTrace, architecturalLayers],
  quality_gates:[errorBoundaries, performanceConsiderations, securityConsiderations],
  validation_requirements:[integrationEvidence],
  relationship_analysis:[dependencies, impacts]
}

@validation{
  required_sections:[userFlow, systemFlow, dataFlowTrace, architecturalLayers],
  optional_sections:[errorBoundaries, performanceConsiderations, securityConsiderations],
  evidence_required:[integrationEvidence],
  relationship_mapping:[dependencies, impacts]
}