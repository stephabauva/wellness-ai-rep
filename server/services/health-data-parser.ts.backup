import { parseString } from 'xml2js';
import { gunzipSync, unzipSync, createGunzip } from 'zlib';
import { Readable } from 'stream';
import { InsertHealthData, HealthDataCategory, HealthMetricType } from '@shared/schema';

export interface ParsedHealthDataPoint {
  dataType: string;
  value: string;
  unit?: string;
  timestamp: Date;
  source?: string;
  category?: HealthDataCategory;
  metadata?: any;
}

export interface ParseResult {
  success: boolean;
  data?: ParsedHealthDataPoint[];
  errors?: string[];
  summary?: {
    totalRecords: number;
    validRecords: number;
    skippedRecords: number;
    categories: Record<string, number>;
  };
}

export class HealthDataParser {
  private static appleHealthTypeMapping: Record<string, { dataType: string; category: HealthDataCategory }> = {
    'HKQuantityTypeIdentifierStepCount': { dataType: 'steps', category: 'lifestyle' },
    'HKQuantityTypeIdentifierBodyMass': { dataType: 'weight', category: 'body_composition' },
    'HKQuantityTypeIdentifierHeartRate': { dataType: 'heart_rate', category: 'cardiovascular' },
    'HKQuantityTypeIdentifierRestingHeartRate': { dataType: 'resting_heart_rate', category: 'cardiovascular' },
    'HKQuantityTypeIdentifierBodyFatPercentage': { dataType: 'body_fat_percentage', category: 'body_composition' },
    'HKQuantityTypeIdentifierLeanBodyMass': { dataType: 'muscle_mass', category: 'body_composition' },
    'HKQuantityTypeIdentifierBodyMassIndex': { dataType: 'bmi', category: 'body_composition' },
    'HKQuantityTypeIdentifierBloodPressureSystolic': { dataType: 'blood_pressure_systolic', category: 'cardiovascular' },
    'HKQuantityTypeIdentifierBloodPressureDiastolic': { dataType: 'blood_pressure_diastolic', category: 'cardiovascular' },
    'HKQuantityTypeIdentifierDistanceWalkingRunning': { dataType: 'daily_activity', category: 'lifestyle' },
    'HKQuantityTypeIdentifierActiveEnergyBurned': { dataType: 'calories_burned', category: 'lifestyle' },
    'HKQuantityTypeIdentifierBasalEnergyBurned': { dataType: 'bmr', category: 'body_composition' },
    'HKCategoryTypeIdentifierSleepAnalysis': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKCategoryValueSleepAnalysisInBed': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKCategoryValueSleepAnalysisAsleep': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKCategoryValueSleepAnalysisAsleepCore': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKCategoryValueSleepAnalysisAsleepDeep': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKCategoryValueSleepAnalysisAsleepREM': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKCategoryValueSleepAnalysisAwake': { dataType: 'sleep_duration', category: 'lifestyle' },
    'HKQuantityTypeIdentifierVO2Max': { dataType: 'vo2_max', category: 'advanced' },
    'HKQuantityTypeIdentifierOxygenSaturation': { dataType: 'oxygen_saturation', category: 'cardiovascular' },
    'HKQuantityTypeIdentifierBloodGlucose': { dataType: 'blood_glucose_random', category: 'medical' },
    'HKQuantityTypeIdentifierBodyTemperature': { dataType: 'body_temperature', category: 'medical' },
  };

  private static googleFitTypeMapping: Record<string, { dataType: string; category: HealthDataCategory }> = {
    'com.google.step_count.delta': { dataType: 'steps', category: 'lifestyle' },
    'com.google.weight': { dataType: 'weight', category: 'body_composition' },
    'com.google.heart_rate.bpm': { dataType: 'heart_rate', category: 'cardiovascular' },
    'com.google.calories.expended': { dataType: 'calories_burned', category: 'lifestyle' },
    'com.google.distance.delta': { dataType: 'daily_activity', category: 'lifestyle' },
    'com.google.body.fat.percentage': { dataType: 'body_fat_percentage', category: 'body_composition' },
    'com.google.sleep.segment': { dataType: 'sleep_duration', category: 'lifestyle' },
    'com.google.blood_pressure': { dataType: 'blood_pressure_systolic', category: 'cardiovascular' },
    'com.google.blood_glucose': { dataType: 'blood_glucose_random', category: 'medical' },
    'com.google.oxygen_saturation': { dataType: 'oxygen_saturation', category: 'cardiovascular' },
  };

  static async parseFile(fileContent: string | Buffer, fileName: string, progressCallback?: (progress: { processed: number; total: number; percentage: number }) => void): Promise<ParseResult> {
    try {
      // Handle compressed files
      let content: string;
      const isGzipped = fileName.toLowerCase().endsWith('.gz');
      const isZipped = fileName.toLowerCase().endsWith('.zip');
      
      if (isGzipped) {
        try {
          // For very large compressed files, use streaming decompression
          if (typeof fileContent === 'string') {
            // Convert string to buffer for decompression
            const buffer = Buffer.from(fileContent, 'binary');
            // Check if decompressed content would be too large
            try {
              content = gunzipSync(buffer).toString('utf8');
            } catch (stringError: any) {
              if (stringError.code === 'ERR_STRING_TOO_LONG') {
                console.log('File too large for standard decompression, using streaming approach...');
                return await this.parseAppleHealthXMLFromBuffer(buffer, fileName.slice(0, -3), progressCallback);
              }
              throw stringError;
            }
          } else {
            try {
              content = gunzipSync(fileContent).toString('utf8');
            } catch (stringError: any) {
              if (stringError.code === 'ERR_STRING_TOO_LONG') {
                console.log('File too large for standard decompression, using streaming approach...');
                return await this.parseAppleHealthXMLFromBuffer(fileContent, fileName.slice(0, -3), progressCallback);
              }
              throw stringError;
            }
          }
          // Remove .gz extension to get the actual file type
          fileName = fileName.slice(0, -3);
          console.log(`Successfully decompressed .gz file: ${fileName}, content length: ${content.length}`);
        } catch (decompressionError) {
          console.error('Failed to decompress .gz file:', decompressionError);
          throw new Error(`Failed to decompress .gz file: ${decompressionError instanceof Error ? decompressionError.message : 'Unknown decompression error'}`);
        }
      } else if (isZipped) {
        return {
          success: false,
          errors: ['ZIP files are not yet supported. Please extract the file and upload the XML/JSON/CSV directly.']
        };
      } else {
        content = typeof fileContent === 'string' ? fileContent : fileContent.toString('utf8');
      }

      const fileExtension = fileName.split('.').pop()?.toLowerCase();
      
      switch (fileExtension) {
        case 'xml':
          return await this.parseAppleHealthXML(content, progressCallback);
        case 'json':
          return await this.parseGoogleFitJSON(content);
        case 'csv':
          return await this.parseGenericCSV(content);
        default:
          return {
            success: false,
            errors: [`Unsupported file format: ${fileExtension}`]
          };
      }
    } catch (error) {
      console.error('Health data parsing error:', error);
      return {
        success: false,
        errors: [`Failed to parse file: ${error instanceof Error ? error.message : 'Unknown error'}`]
      };
    }
  }

  private static async parseAppleHealthXML(xmlContent: string, progressCallback?: (progress: { processed: number; total: number; percentage: number }) => void): Promise<ParseResult> {
    // For very large files, implement chunked processing to prevent memory issues
    if (xmlContent.length > 50 * 1024 * 1024) { // 50MB threshold
      return this.parseAppleHealthXMLChunked(xmlContent, progressCallback);
    }
    
    return new Promise((resolve) => {
      parseString(xmlContent, (err, result) => {
        if (err) {
          resolve({
            success: false,
            errors: [`XML parsing error: ${err.message}`]
          });
          return;
        }

        try {
          const healthData = result?.HealthData;
          if (!healthData?.Record) {
            resolve({
              success: false,
              errors: ['No health records found in XML file']
            });
            return;
          }

          const records = Array.isArray(healthData.Record) ? healthData.Record : [healthData.Record];
          const parsedData: ParsedHealthDataPoint[] = [];
          const errors: string[] = [];
          const categories: Record<string, number> = {};

          for (const record of records) {
            try {
              const type = record.$.type;
              const mapping = this.appleHealthTypeMapping[type];
              
              if (!mapping) {
                continue; // Skip unsupported types
              }

              const dataPoint: ParsedHealthDataPoint = {
                dataType: mapping.dataType,
                value: record.$.value,
                unit: record.$.unit || undefined,
                timestamp: new Date(record.$.startDate || record.$.creationDate),
                source: record.$.sourceName || 'apple_health',
                category: mapping.category,
                metadata: {
                  originalType: type,
                  endDate: record.$.endDate,
                  device: record.$.device
                }
              };

              // Validate timestamp
              if (isNaN(dataPoint.timestamp.getTime())) {
                errors.push(`Invalid timestamp for ${type}: ${record.$.startDate}`);
                continue;
              }

              parsedData.push(dataPoint);
              categories[mapping.category] = (categories[mapping.category] || 0) + 1;

            } catch (recordError) {
              errors.push(`Error parsing record: ${recordError instanceof Error ? recordError.message : 'Unknown error'}`);
            }
          }

          resolve({
            success: true,
            data: parsedData,
            errors: errors.length > 0 ? errors : undefined,
            summary: {
              totalRecords: records.length,
              validRecords: parsedData.length,
              skippedRecords: records.length - parsedData.length,
              categories
            }
          });
        } catch (processingError) {
          resolve({
            success: false,
            errors: [`Error processing parsed XML: ${processingError instanceof Error ? processingError.message : 'Unknown error'}`]
          });
        }
      });
    });
  }

  private static async parseAppleHealthXMLChunked(xmlContent: string, progressCallback?: (progress: { processed: number; total: number; percentage: number }) => void): Promise<ParseResult> {
    try {
      console.log('Processing large Apple Health file with optimized parsing...');
      console.log(`XML content length: ${xmlContent.length} characters`);
      
      // Check if content looks like Apple Health XML
      if (!xmlContent.includes('<HealthData') && !xmlContent.includes('<Record')) {
        return {
          success: false,
          errors: ['File does not appear to be a valid Apple Health export. Missing required XML structure.']
        };
      }

      // For extremely large files (>300MB), use streaming approach
      if (xmlContent.length > 300 * 1024 * 1024) {
        console.log('File extremely large, switching to streaming processing...');
        const buffer = Buffer.from(xmlContent, 'utf8');
        const chunks = [];
        const chunkSize = 2 * 1024 * 1024; // 2MB chunks
        
        for (let i = 0; i < buffer.length; i += chunkSize) {
          chunks.push(buffer.slice(i, i + chunkSize));
        }
        
        return await this.parseAppleHealthXMLFromChunks(chunks, progressCallback);
      }
      
      // Optimized parsing for large files
      const parsedData: ParsedHealthDataPoint[] = [];
      const errors: string[] = [];
      const categories: Record<string, number> = {};
      let recordCount = 0;
      let validRecords = 0;
      
      // Use streaming regex to process records efficiently
      const recordRegex = /<Record[^>]*(?:\/>|>.*?<\/Record>)/g;
      let match;
      
      console.log('Starting optimized record extraction...');
      
      while ((match = recordRegex.exec(xmlContent)) !== null) {
        recordCount++;
        
        try {
          const recordXml = match[0];
          
          // Extract attributes using optimized regex
          const typeMatch = recordXml.match(/\btype="([^"]+)"/);
          const valueMatch = recordXml.match(/\bvalue="([^"]+)"/);
          const unitMatch = recordXml.match(/\bunit="([^"]+)"/);
          
          // Try multiple date fields for compatibility
          let dateMatch = recordXml.match(/\bcreationDate="([^"]+)"/);
          if (!dateMatch) dateMatch = recordXml.match(/\bstartDate="([^"]+)"/);
          if (!dateMatch) dateMatch = recordXml.match(/\bendDate="([^"]+)"/);
          
          const sourceMatch = recordXml.match(/\bsourceName="([^"]+)"/);

          if (!typeMatch || !valueMatch || !dateMatch) {
            if (errors.length < 10) {
              errors.push(`Skipping record ${recordCount}: missing required fields`);
            }
            continue;
          }

          const type = typeMatch[1];
          let mapping = this.appleHealthTypeMapping[type];

          // Handle special sleep analysis cases
          if (!mapping && type === 'HKCategoryTypeIdentifierSleepAnalysis') {
            const value = valueMatch[1];
            mapping = this.appleHealthTypeMapping[`HKCategoryValueSleepAnalysis${value}`];
          }

          if (!mapping) {
            continue; // Skip unsupported types
          }

          const timestamp = new Date(dateMatch[1]);
          if (isNaN(timestamp.getTime())) {
            if (errors.length < 10) {
              errors.push(`Invalid timestamp for ${type}: ${dateMatch[1]}`);
            }
            continue;
          }

          const dataPoint: ParsedHealthDataPoint = {
            dataType: mapping.dataType,
            value: valueMatch[1],
            unit: unitMatch ? unitMatch[1] : undefined,
            timestamp,
            source: sourceMatch ? sourceMatch[1] : 'Apple Health',
            category: mapping.category,
            metadata: {
              originalType: type,
              source: 'apple_health_import'
            }
          };

          parsedData.push(dataPoint);
          validRecords++;
          categories[mapping.category] = (categories[mapping.category] || 0) + 1;

          // Progress reporting and memory management
          if (recordCount % 10000 === 0) {
            console.log(`Processed ${recordCount} records, ${validRecords} valid`);
            
            if (progressCallback) {
              // Estimate progress based on regex position in string
              const progress = (recordRegex.lastIndex / xmlContent.length) * 100;
              progressCallback({
                processed: recordCount,
                total: recordCount * 2, // Rough estimate
                percentage: Math.min(progress, 95)
              });
            }
            
            // Force garbage collection for large batches
            if (global.gc && recordCount % 50000 === 0) {
              global.gc();
            }
          }

        } catch (recordError) {
          if (errors.length < 10) {
            errors.push(`Error processing record ${recordCount}: ${recordError instanceof Error ? recordError.message : 'Unknown error'}`);
          }
        }
      }

      console.log(`Completed processing: ${validRecords} valid records from ${recordCount} total`);

      if (progressCallback) {
        progressCallback({
          processed: recordCount,
          total: recordCount,
          percentage: 100
        });
      }

      return {
        success: validRecords > 0,
        data: parsedData,
        errors: errors.length > 0 ? errors : undefined,
        summary: {
          totalRecords: recordCount,
          validRecords,
          skippedRecords: recordCount - validRecords,
          categories
        }
      };
    } catch (error) {
      console.error('Chunked XML parsing error:', error);
      return {
        success: false,
        errors: [`Failed to parse large XML file: ${error instanceof Error ? error.message : 'Unknown error'}`]
      };
    }
  }

  private static async parseGoogleFitJSON(jsonContent: string): Promise<ParseResult> {
    try {
      const data = JSON.parse(jsonContent);
      const parsedData: ParsedHealthDataPoint[] = [];
      const errors: string[] = [];
      const categories: Record<string, number> = {};
      let totalRecords = 0;

      // Handle different Google Fit export formats
      const buckets = data.bucket || data.buckets || [];
      
      for (const bucket of buckets) {
        const datasets = bucket.dataset || [];
        
        for (const dataset of datasets) {
          const dataTypeName = dataset.dataTypeName;
          const mapping = this.googleFitTypeMapping[dataTypeName];
          
          if (!mapping) {
            continue; // Skip unsupported types
          }

          const points = dataset.point || [];
          
          for (const point of points) {
            totalRecords++;
            
            try {
              let value = '';
              let unit = '';
              
              // Extract value based on Google Fit data structure
              if (point.value && point.value.length > 0) {
                const valueObj = point.value[0];
                if (valueObj.intVal !== undefined) {
                  value = valueObj.intVal.toString();
                } else if (valueObj.fpVal !== undefined) {
                  value = valueObj.fpVal.toString();
                } else if (valueObj.stringVal !== undefined) {
                  value = valueObj.stringVal;
                }
              }

              if (!value) {
                errors.push(`No value found for ${dataTypeName} point`);
                continue;
              }

              // Convert nanoseconds to milliseconds for timestamp
              const startTimeNanos = point.startTimeNanos || point.startTime;
              const timestamp = new Date(parseInt(startTimeNanos) / 1000000);

              if (isNaN(timestamp.getTime())) {
                errors.push(`Invalid timestamp for ${dataTypeName}: ${startTimeNanos}`);
                continue;
              }

              const dataPoint: ParsedHealthDataPoint = {
                dataType: mapping.dataType,
                value: value,
                unit: unit || undefined,
                timestamp: timestamp,
                source: 'google_fit',
                category: mapping.category,
                metadata: {
                  originalType: dataTypeName,
                  endTimeNanos: point.endTimeNanos || point.endTime,
                  originDataSourceId: point.originDataSourceId
                }
              };

              parsedData.push(dataPoint);
              categories[mapping.category] = (categories[mapping.category] || 0) + 1;
            } catch (pointError) {
              errors.push(`Error parsing point: ${pointError instanceof Error ? pointError.message : 'Unknown error'}`);
            }
          }
        }
      }

      return {
        success: true,
        data: parsedData,
        errors: errors.length > 0 ? errors : undefined,
        summary: {
          totalRecords,
          validRecords: parsedData.length,
          skippedRecords: totalRecords - parsedData.length,
          categories
        }
      };
    } catch (error) {
      return {
        success: false,
        errors: [`JSON parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`]
      };
    }
  }

  private static async parseGenericCSV(csvContent: string): Promise<ParseResult> {
    try {
      const lines = csvContent.split('\n').filter(line => line.trim());
      if (lines.length === 0) {
        return {
          success: false,
          errors: ['CSV file appears to be empty']
        };
      }

      const headers = lines[0].split(',').map(h => h.trim().toLowerCase());
      const parsedData: ParsedHealthDataPoint[] = [];
      const errors: string[] = [];
      const categories: Record<string, number> = {};

      // Try to identify common CSV formats
      const timestampIndex = headers.findIndex(h => h.includes('date') || h.includes('time'));
      const valueIndex = headers.findIndex(h => h.includes('value') || h.includes('count') || h.includes('weight'));
      const typeIndex = headers.findIndex(h => h.includes('type') || h.includes('metric'));

      if (timestampIndex === -1 || valueIndex === -1) {
        return {
          success: false,
          errors: ['CSV file must contain date/time and value columns']
        };
      }

      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',').map(v => v.trim());
        
        if (values.length !== headers.length) {
          continue;
        }

        try {
          const timestamp = new Date(values[timestampIndex]);
          const value = values[valueIndex];
          const type = typeIndex >= 0 ? values[typeIndex] : 'unknown';

          if (isNaN(timestamp.getTime()) || !value) {
            continue;
          }

          const category = this.categorizeDataType(type);
          const dataPoint: ParsedHealthDataPoint = {
            dataType: type,
            value: value,
            timestamp: timestamp,
            source: 'csv_import',
            category: category,
            metadata: {
              csvRow: i,
              headers: headers
            }
          };

          parsedData.push(dataPoint);
          categories[category] = (categories[category] || 0) + 1;
        } catch (rowError) {
          errors.push(`Error parsing row ${i}: ${rowError instanceof Error ? rowError.message : 'Unknown error'}`);
        }
      }

      return {
        success: true,
        data: parsedData,
        errors: errors.length > 0 ? errors : undefined,
        summary: {
          totalRecords: lines.length - 1,
          validRecords: parsedData.length,
          skippedRecords: (lines.length - 1) - parsedData.length,
          categories
        }
      };
    } catch (error) {
      return {
        success: false,
        errors: [`CSV parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`]
      };
    }
  }

  private static categorizeDataType(dataType: string): HealthDataCategory {
    const bodyCompositionTypes = ['weight', 'bmi', 'body_fat_percentage', 'muscle_mass', 'bone_mass', 'bmr', 'metabolic_age'];
    const cardiovascularTypes = ['heart_rate', 'resting_heart_rate', 'blood_pressure_systolic', 'blood_pressure_diastolic', 'cholesterol_ldl', 'cholesterol_hdl', 'oxygen_saturation'];
    const lifestyleTypes = ['steps', 'sleep_duration', 'sleep_quality', 'daily_activity', 'calories_burned', 'calories_intake', 'hydration', 'stress_level', 'mood'];
    const medicalTypes = ['blood_glucose_fasting', 'blood_glucose_postprandial', 'blood_glucose_random', 'hba1c', 'insulin_dosage', 'body_temperature'];
    const advancedTypes = ['vo2_max', 'lactate_threshold', 'ecg_data', 'skin_temperature'];

    if (bodyCompositionTypes.includes(dataType)) return 'body_composition';
    if (cardiovascularTypes.includes(dataType)) return 'cardiovascular';
    if (lifestyleTypes.includes(dataType)) return 'lifestyle';
    if (medicalTypes.includes(dataType)) return 'medical';
    if (advancedTypes.includes(dataType)) return 'advanced';
    
    return 'lifestyle'; // Default category
  }

  // Streaming decompression method for very large compressed files
  private static async parseAppleHealthXMLFromBuffer(
    compressedBuffer: Buffer, 
    fileName: string, 
    progressCallback?: (progress: { processed: number; total: number; percentage: number }) => void
  ): Promise<ParseResult> {
    try {
      console.log('Starting streaming decompression for large Apple Health file...');
      
      return new Promise((resolve, reject) => {
        const gunzip = createGunzip();
        const chunks: Buffer[] = [];
        let totalSize = 0;
        
        // Create readable stream from buffer
        const inputStream = new Readable();
        inputStream.push(compressedBuffer);
        inputStream.push(null);
        
        // Handle decompressed chunks
        gunzip.on('data', (chunk: Buffer) => {
          chunks.push(chunk);
          totalSize += chunk.length;
          
          // Progress callback for decompression
          if (progressCallback && totalSize > 0) {
            const estimatedProgress = Math.min(20, (totalSize / (1024 * 1024)) * 2); // Estimate based on MB processed
            progressCallback({
              processed: totalSize,
              total: totalSize * 5, // Rough estimate
              percentage: estimatedProgress
            });
          }
        });
        
        gunzip.on('end', async () => {
          try {
            console.log(`Decompression complete. Total size: ${totalSize} bytes`);
            
            // Process chunks without converting to string to avoid memory limits
            const result = await this.parseAppleHealthXMLFromChunks(chunks, progressCallback);
            resolve(result);
          } catch (parseError) {
            console.error('Error parsing decompressed XML:', parseError);
            reject(parseError);
          }
        });
        
        gunzip.on('error', (error) => {
          console.error('Streaming decompression error:', error);
          reject(new Error(`Streaming decompression failed: ${error.message}`));
        });
        
        // Start the decompression
        inputStream.pipe(gunzip);
      });
      
    } catch (error) {
      console.error('Buffer parsing error:', error);
      return {
        success: false,
        errors: [`Streaming processing error: ${error instanceof Error ? error.message : 'Unknown error'}`]
      };
    }
  }

  // Process XML chunks with memory management for massive files
  private static async parseAppleHealthXMLFromChunks(
    chunks: Buffer[], 
    progressCallback?: (progress: { processed: number; total: number; percentage: number }) => void
  ): Promise<ParseResult> {
    try {
      console.log('Processing Apple Health XML with chunk-based streaming...');
      
      const errors: string[] = [];
      const categories: Record<string, number> = {};
      let processedBytes = 0;
      const totalBytes = chunks.reduce((sum, chunk) => sum + chunk.length, 0);
      
      let xmlBuffer = '';
      let recordCount = 0;
      let validRecords = 0;
      const parsedData: ParsedHealthDataPoint[] = [];
      
      console.log(`Processing ${chunks.length} chunks (${Math.round(totalBytes / 1024 / 1024)}MB total)`);
      
      for (let i = 0; i < chunks.length; i++) {
        const chunk = chunks[i];
        processedBytes += chunk.length;
        
        // Convert chunk to string and add to buffer
        const chunkStr = chunk.toString('utf8');
        xmlBuffer += chunkStr;
        
        // Process complete records in current buffer
        const recordRegex = /<Record[^>]*(?:\/>|>.*?<\/Record>)/g;
        let recordMatch;
        
        while ((recordMatch = recordRegex.exec(xmlBuffer)) !== null) {
          try {
            const recordXml = recordMatch[0];
            recordCount++;
            
            // For very large files, sample every 10th record to reduce memory usage
            if (recordCount % 10 === 0 || totalBytes < 100 * 1024 * 1024) {
              const typeMatch = recordXml.match(/\btype="([^"]+)"/);
              const valueMatch = recordXml.match(/\bvalue="([^"]+)"/);
              const unitMatch = recordXml.match(/\bunit="([^"]+)"/);
              
              let dateMatch = recordXml.match(/\bcreationDate="([^"]+)"/);
              if (!dateMatch) dateMatch = recordXml.match(/\bstartDate="([^"]+)"/);
              if (!dateMatch) dateMatch = recordXml.match(/\bendDate="([^"]+)"/);
              
              const sourceMatch = recordXml.match(/\bsourceName="([^"]+)"/);

              if (typeMatch && valueMatch && dateMatch) {
                const type = typeMatch[1];
                let mapping = this.appleHealthTypeMapping[type];

                if (!mapping && type === 'HKCategoryTypeIdentifierSleepAnalysis') {
                  const value = valueMatch[1];
                  mapping = this.appleHealthTypeMapping[`HKCategoryValueSleepAnalysis${value}`];
                }

                if (mapping) {
                  const timestamp = new Date(dateMatch[1]);
                  if (!isNaN(timestamp.getTime())) {
                    const dataPoint: ParsedHealthDataPoint = {
                      dataType: mapping.dataType,
                      value: valueMatch[1],
                      unit: unitMatch ? unitMatch[1] : undefined,
                      timestamp,
                      source: sourceMatch ? sourceMatch[1] : 'Apple Health',
                      category: mapping.category,
                      metadata: {
                        originalType: type,
                        source: 'apple_health_chunked'
                      }
                    };

                    parsedData.push(dataPoint);
                    validRecords++;
                    categories[mapping.category] = (categories[mapping.category] || 0) + 1;
                  }
                }
              }
            }

          } catch (recordError) {
            if (errors.length < 5) {
              errors.push(`Error processing record ${recordCount}: ${recordError instanceof Error ? recordError.message : 'Unknown error'}`);
            }
          }
        }
        
        // Keep only the remainder after processed records
        const lastRecordEnd = recordRegex.lastIndex || 0;
        xmlBuffer = xmlBuffer.substring(lastRecordEnd);
        recordRegex.lastIndex = 0;
        
        // Clear buffer if it gets too large
        if (xmlBuffer.length > 1024 * 1024) { // 1MB buffer limit
          xmlBuffer = xmlBuffer.substring(xmlBuffer.length - 100000); // Keep last 100KB
        }
        
        // Progress updates
        if (progressCallback && i % 50 === 0) {
          const percentage = Math.round((processedBytes / totalBytes) * 100);
          progressCallback({
            processed: processedBytes,
            total: totalBytes,
            percentage
          });
        }
        
        // Periodic logging and garbage collection
        if (i > 0 && i % 200 === 0) {
          console.log(`Processed ${i}/${chunks.length} chunks, ${validRecords} valid records from ${recordCount} total`);
          
          if (global.gc) {
            global.gc();
          }
        }
      }

      console.log(`Chunk processing complete: ${validRecords} valid records from ${recordCount} total`);

      if (progressCallback) {
        progressCallback({
          processed: totalBytes,
          total: totalBytes,
          percentage: 100
        });
      }

      if (validRecords === 0) {
        return {
          success: false,
          errors: [
            'No valid health records were found in the file.',
            'Please ensure this is a valid Apple Health export.',
            ...errors.slice(0, 3)
          ]
        };
      }

      return {
        success: true,
        data: parsedData,
        errors: errors.length > 0 ? errors : undefined,
        summary: {
          totalRecords: recordCount,
          validRecords,
          skippedRecords: recordCount - validRecords,
          categories
        }
      };

    } catch (error) {
      console.error('Chunk processing error:', error);
      return {
        success: false,
        errors: [`Failed to process chunks: ${error instanceof Error ? error.message : 'Unknown error'}`]
      };
    }
  }
}