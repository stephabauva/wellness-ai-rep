@context{domain:memory, target:add_memory_button, complexity:medium, enforcement:strict}
@meta{tokens:700, critical_paths:3, validation_rules:5, processing_priority:1}

#ROOT{confidence:1.0}
  ##add_memory_button{id:manual_memory_creation, type:ui_functionality, confidence:1.0, @critical}
    "Manual memory creation interface through dedicated button and dialog"
    @capabilities{
      manual_entry_form,
      category_selection,
      importance_setting,
      validation_feedback,
      chatgpt_deduplication
    }
    
    ##data_flow_tracing{id:manual_creation_flow, type:user_interaction_pipeline, confidence:1.0}
      @cluster{ui_interaction, confidence:1.0}
        ##button_trigger{id:add_memory_click, type:user_action, confidence:1.0}
          "User clicks Add Memory button"
          @component:MemorySection.tsx[Dialog trigger]
          @location:CardHeader action area
          @icon:Plus from lucide-react
          @state{
            isManualEntryOpen:boolean,
            controlled_by:useState
          }
          
        ##dialog_display{id:modal_form, type:ui_overlay, confidence:1.0}
          @components{
            Dialog:shadcn_ui_modal,
            Form:react_hook_form,
            fields:[content, category, importance]
          }
          @validation{
            schema:manualMemorySchema,
            resolver:zodResolver
          }
      @/cluster

      @cluster{form_interaction, confidence:1.0}
        ##content_input{id:memory_text_entry, type:form_field, confidence:1.0}
          @field{
            type:Textarea,
            min_length:10,
            max_length:500,
            placeholder:"Enter information you want your AI coach to remember"
          }
          @validation{
            required:true,
            length_constraints:enforced,
            real_time:on_change
          }
          
        ##category_selection{id:memory_categorization, type:dropdown, confidence:1.0}
          @field{
            type:Select,
            options:[preference, personal_info, context, instruction],
            default:preference
          }
          @descriptions{
            preference:"Preferences",
            personal_info:"Personal Info",
            context:"Context",
            instruction:"Instructions"
          }
          
        ##importance_selection{id:priority_setting, type:dropdown, confidence:1.0}
          @field{
            type:Select,
            options:[low, medium, high],
            default:medium
          }
          @mapping{
            low:0.3,
            medium:0.6,
            high:0.9
          }
      @/cluster

      @cluster{submission_processing, confidence:1.0}
        ##form_submission{id:api_request, type:mutation, confidence:1.0}
          @endpoint:POST /api/memories/manual
          @payload{
            content:string,
            category:MemoryCategory,
            importance:number
          }
          @processing{
            validation→deduplication→storage
          }
          
        ##deduplication_check{id:chatgpt_processing, type:background_operation, confidence:1.0}
          @service:ChatGPTMemoryEnhancement
          @operations{
            semantic_hash_generation,
            similarity_checking,
            merge_or_create_decision
          }
          @outcomes{
            created:"New memory saved",
            merged:"Merged with existing",
            skipped:"Duplicate detected"
          }
      @/cluster

      @cluster{user_feedback, confidence:1.0}
        ##success_handling{id:positive_feedback, type:ui_notification, confidence:1.0}
          @actions{
            toast_notification,
            dialog_close,
            form_reset,
            list_refresh
          }
          @messages{
            saved:"Memory saved successfully",
            merged:"Memory merged with existing information"
          }
          
        ##error_handling{id:failure_feedback, type:error_display, confidence:1.0}
          @display{
            inline_field_errors,
            toast_for_api_errors,
            validation_messages
          }
          @recovery{
            preserve_form_data,
            allow_retry,
            clear_error_on_change
          }
      @/cluster

    ##architectural_layers{id:button_architecture, type:frontend_focused, confidence:1.0}
      ##presentation_layer{id:ui_components, type:react_dialog, confidence:1.0}
        @components{
          Button:[trigger_element],
          Dialog:[modal_container],
          Form:[data_entry],
          FormFields:[input_components]
        }
        @libraries{
          shadcn_ui:dialog_system,
          react_hook_form:form_management,
          zod:schema_validation
        }
      }

      ##state_management{id:form_state, type:controlled_components, confidence:1.0}
        @form_state{
          useForm:hook_instance,
          defaultValues:{content:"", category:"preference", importance:"medium"},
          validation:real_time
        }
        @dialog_state{
          isManualEntryOpen:boolean,
          setIsManualEntryOpen:setter
        }
      }

      ##api_integration{id:backend_submission, type:http_mutation, confidence:1.0}
        @mutation{
          useMutation:tanstack_query,
          endpoint:/api/memories/manual,
          invalidation:[memory-overview, memories]
        }
        @error_handling{
          network_errors,
          validation_errors,
          server_errors
        }
      }

    ##error_boundaries{id:form_error_handling, type:comprehensive, confidence:1.0}
      @cluster{validation_errors, confidence:1.0}
        ##field_validation{id:input_errors, confidence:1.0}
          @types{
            too_short:"Min 10 characters",
            too_long:"Max 500 characters",
            required:"Field is required"
          }
        }
        ##submission_errors{id:api_failures, confidence:1.0}
          @handling{
            network_timeout,
            server_validation,
            deduplication_conflicts
          }
        }
      @/cluster

    ##performance_optimization{id:form_performance, type:ui_optimization, confidence:1.0}
      @optimizations{
        debounced_validation,
        memoized_options,
        lazy_dialog_content
      }

    ##security_privacy{id:form_security, type:input_protection, confidence:1.0}
      @measures{
        input_sanitization,
        xss_prevention,
        length_limits
      }

    ##integration_evidence{id:button_implementation, type:verification, confidence:1.0}
      @status:active
      @verification:2025-01-15
      @evidence{
        form_functional:verified,
        deduplication:working,
        validation:comprehensive
      }
      @usage{
        manual_memories:20%_of_total,
        success_rate:95%,
        avg_time_to_complete:30s
      }

@processing{
  critical_paths:[button→dialog→form→submission→feedback],
  enforcement_points:[validation, deduplication, user_feedback],
  quality_gates:[form_validity, api_success, user_notification]
}

@validation{
  mandatory_checks:[content_length, category_valid, importance_valid],
  performance_targets:[dialog_open_under_100ms, submission_under_2s],
  ux_requirements:[clear_labels, helpful_placeholders, immediate_feedback]
}