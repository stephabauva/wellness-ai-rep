{
  "_meta": {
    "feature": "nutrition-inference-service",
    "domain": "health",
    "lastUpdated": "2025-01-08",
    "status": "active"
  },
  "trigger": "User sends food-related message → AI responds → Post-processing extracts nutrition",
  "dataFlow": {
    "request": "Chat Routes → processNutritionData → nutritionInferenceService.extractNutritionFromText → nutritionMemoryService.enhanceNutritionInference → DateContextParser.parseDateContext → NutritionData validation",
    "response": "Validated NutritionData → formatForStorage → storage.createHealthDataBatch → nutritionInferenceService.updateFoodMemories → Memory system updates",
    "sideEffects": [
      "Health data creation",
      "Nutrition metrics aggregation",
      "Cache invalidation for health queries",
      "Food memory pattern updates",
      "Dietary preference tracking"
    ]
  },
  "files": {
    "ui": [],
    "api": [
      "chat-routes.ts (processNutritionData function)"
    ],
    "services": [
      "nutrition-inference-service.ts",
      "nutrition-memory-service.ts",
      "nutrition-aggregation-service.ts",
      "storage.ts (createHealthDataBatch)",
      "memory-service.ts",
      "cache-service.ts (generic cache methods)"
    ],
    "utils": [
      "date-context-parser.ts"
    ],
    "data": [
      "health_data table (nutrition category)",
      "memory_entries table (food_preferences, dietary_restrictions, meal_patterns, nutrition_goals)"
    ],
    "types": [
      "NutritionData interface",
      "nutritionDataSchema",
      "InsertHealthData",
      "DateContext interface",
      "FoodMemoryPattern interface",
      "DietaryInfo interface",
      "DailyNutritionSummary interface",
      "NutritionMealSummary interface",
      "NutritionUpdateRequest interface"
    ],
    "tests": [
      "date-context-parser.test.ts",
      "nutrition-aggregation-service.test.ts"
    ]
  },
  "cacheFlow": {
    "invalidates": [
      "query:health-data",
      "query:nutrition-metrics"
    ],
    "refreshes": [
      "HealthDashboard",
      "NutritionCharts"
    ],
    "triggers": [
      "health-data-aggregation"
    ],
    "crossDomainInvalidates": [
      "query:chat",
      "query:unknown/needs-classification",
      "query:memory",
      "query:shared/services",
      "query:infrastructure/routing"
    ]
  },
  "errorPaths": {
    "parsing": "Returns null for invalid nutrition content",
    "validation": "Zod schema validation with detailed error messages",
    "extraction": "Graceful fallback to empty nutrition data"
  },
  "dependencies": {
    "internal": [
      "health-data-storage",
      "ai-service",
      "memory-service",
      "nutrition-memory-service",
      "nutrition-aggregation-service",
      "cache-service"
    ],
    "external": [
      "zod validation"
    ],
    "shared": [
      "logger-service"
    ]
  },
  "implementation": {
    "extractNutritionFromText": {
      "description": "Main entry point for nutrition extraction from AI responses with memory-enhanced inference",
      "parameters": [
        "responseText",
        "originalMessage",
        "hasImages",
        "timezone",
        "userId"
      ],
      "returns": "Promise<NutritionData | null>",
      "validation": "Uses zod schema for data validation",
      "enhancement": "Memory-enhanced inference uses user's food patterns for improved calorie estimation"
    },
    "updateFoodMemories": {
      "description": "Updates user's food memories after successful nutrition data extraction",
      "parameters": [
        "userId",
        "nutritionData",
        "conversationId"
      ],
      "functionality": [
        "Updates meal patterns based on food items and meal type",
        "Tracks food preferences from identified food items",
        "Infers nutrition goals from calorie and macro intake patterns"
      ]
    },
    "parseNutritionValues": {
      "description": "Uses regex patterns to extract nutrition values from text",
      "patterns": [
        "calories: (\\d+(?:\\.\\d+)?)\\s*(?:calories|kcal|cal)",
        "protein: (\\d+(?:\\.\\d+)?)\\s*(?:grams?|g)\\s*(?:of\\s+)?protein",
        "carbs: (\\d+(?:\\.\\d+)?)\\s*(?:grams?|g)\\s*(?:of\\s+)?(?:carbs|carbohydrates)",
        "fat: (\\d+(?:\\.\\d+)?)\\s*(?:grams?|g)\\s*(?:of\\s+)?fat",
        "fiber: (\\d+(?:\\.\\d+)?)\\s*(?:grams?|g)\\s*(?:of\\s+)?fiber",
        "sugar: (\\d+(?:\\.\\d+)?)\\s*(?:grams?|g)\\s*(?:of\\s+)?sugar",
        "sodium: (\\d+(?:\\.\\d+)?)\\s*(?:mg|milligrams?)\\s*(?:of\\s+)?sodium"
      ]
    },
    "determineConfidence": {
      "description": "Calculates confidence level based on various factors",
      "factors": [
        "user_provided_values",
        "image_analysis",
        "ai_estimates"
      ],
      "levels": {
        "high": "User provided explicit values",
        "medium": "AI estimates with approximations or image analysis",
        "low": "General food mentions without specific values"
      }
    },
    "determineSource": {
      "description": "Identifies the source of nutrition information",
      "sources": {
        "user_provided": "User explicitly mentioned nutrition values",
        "photo_analysis": "AI analyzed food images",
        "ai_inferred": "AI inferred from text descriptions"
      }
    },
    "extractMealType": {
      "description": "Identifies meal type from context",
      "types": [
        "breakfast",
        "lunch",
        "dinner",
        "snack"
      ]
    },
    "extractFoodItems": {
      "description": "Identifies specific food items mentioned",
      "method": "Pattern matching against common food database"
    },
    "parseDateContext": {
      "description": "Parses date context from conversation text using DateContextParser",
      "parameters": [
        "responseText",
        "originalMessage",
        "timezone"
      ],
      "returns": "DateContext object with parsed date and confidence",
      "patterns": [
        "today",
        "yesterday",
        "last Monday",
        "3 days ago",
        "explicit dates (MM/DD)"
      ],
      "validation": "Validates parsed dates are within reasonable range (30 days past, 7 days future)"
    },
    "formatForStorage": {
      "description": "Formats nutrition data for health_data table storage",
      "output": {
        "nutrition_values": "Direct column values",
        "metadata": "JSON metadata with confidence, source, meal type, date context, etc."
      }
    },
    "createNutritionDataFromInference": {
      "description": "Stores inferred nutrition data as individual health data entries",
      "parameters": [
        "userId",
        "nutritionData (formatForStorage output)",
        "conversationId"
      ],
      "returns": "HealthData[] array of created nutrition entries",
      "functionality": [
        "Creates individual health_data records for each nutrition component (calories, protein, carbs, fat, fiber, sugar, sodium)",
        "Assigns nutrition category to all entries",
        "Includes conversation linking metadata",
        "Uses batch insert for efficiency",
        "Invalidates health data cache",
        "Invalidates nutrition aggregation cache for specific date"
      ]
    }
  },
  "nutritionAggregationService": {
    "description": "Task 7 implementation: Daily nutrition aggregation with meal-level granularity",
    "getDailyNutritionSummary": {
      "description": "Aggregates nutrition data by date with meal breakdown",
      "parameters": [
        "userId",
        "date"
      ],
      "returns": "DailyNutritionSummary with totals and meal-level breakdown",
      "caching": "1-hour TTL with cache invalidation on data updates",
      "functionality": [
        "Sums nutrition values by date",
        "Provides meal-level granularity (breakfast, lunch, dinner, snack)",
        "Calculates daily totals for all nutrition components",
        "Includes entry counts for data quality assessment"
      ]
    },
    "getNutritionSummariesByRange": {
      "description": "Gets nutrition summaries for a date range",
      "parameters": [
        "userId",
        "startDate",
        "endDate"
      ],
      "returns": "Array of DailyNutritionSummary objects",
      "usage": "Weekly/monthly nutrition tracking and analysis"
    },
    "updateNutritionEntry": {
      "description": "Updates existing nutrition entries for specific date/meal",
      "parameters": [
        "NutritionUpdateRequest with userId, date, mealType, nutrition values"
      ],
      "functionality": [
        "Finds existing entries by date and meal type",
        "Updates individual nutrition components",
        "Maintains audit trail with updated timestamps",
        "Invalidates relevant cache entries"
      ]
    },
    "getMealNutritionBreakdown": {
      "description": "Gets meal-level nutrition breakdown for a specific date",
      "parameters": [
        "userId",
        "date"
      ],
      "returns": "Object with meal types as keys and NutritionMealSummary as values"
    },
    "getWeeklyNutritionAverages": {
      "description": "Calculates weekly nutrition averages",
      "parameters": [
        "userId",
        "startDate (7 days from this date)"
      ],
      "returns": "Weekly averages for all nutrition components",
      "excludes": "Days with no nutrition data from average calculation"
    }
  },
  "nutritionDataSchema": {
    "calories": "number (0-10000)",
    "protein": "number (0-1000) grams",
    "carbs": "number (0-1000) grams",
    "fat": "number (0-1000) grams",
    "fiber": "number (0-200) grams",
    "sugar": "number (0-500) grams",
    "sodium": "number (0-10000) mg",
    "timestamp": "Date (parsed from conversation context)",
    "confidence": "enum: high|medium|low",
    "source": "enum: user_provided|ai_inferred|photo_analysis",
    "mealType": "enum: breakfast|lunch|dinner|snack (optional)",
    "foodItems": "string[] (optional)",
    "originalText": "string (optional)",
    "dateContext": "object (optional) - confidence, source, originalText of date parsing"
  },
  "validationRules": {
    "nutritionValues": "All nutrition values must be positive numbers within realistic ranges",
    "confidence": "Must be one of: high, medium, low",
    "source": "Must be one of: user_provided, ai_inferred, photo_analysis",
    "timestamp": "Must be valid Date object"
  },
  "integrationPoints": {
    "aiService": "Enhanced system prompts in chat-context-service.ts provide nutrition analysis capabilities",
    "healthDataStorage": "Stores extracted nutrition data in health_data table using storage.createHealthDataBatch",
    "chatPostProcessing": "Integrated into chat-routes.ts streaming and non-streaming endpoints",
    "memorySystem": "Two-way integration: reads meal patterns for enhanced inference, writes food memories for learning"
  },
  "memoryIntegration": {
    "description": "Task 6 implementation: Memory system integration for nutrition inference",
    "categories": {
      "food_preferences": "Tracks foods user enjoys eating",
      "dietary_restrictions": "Critical safety information about allergies and restrictions",
      "meal_patterns": "Typical meals and portion patterns for each meal type",
      "nutrition_goals": "Inferred nutrition goals from intake patterns"
    },
    "enhancementFlow": {
      "description": "Memory-enhanced nutrition inference",
      "process": [
        "Extract food items and meal type from AI response",
        "Query user's meal patterns for matching foods and meal types",
        "Estimate calories based on historical patterns",
        "Apply confidence scoring based on pattern match quality",
        "Use fallback to AI inference if no patterns match"
      ]
    },
    "memoryUpdates": {
      "description": "Learning from nutrition data to improve future inference",
      "triggers": [
        "After successful nutrition data storage",
        "Updates meal patterns with food items and calorie information",
        "Tracks food preferences for frequently mentioned foods",
        "Infers nutrition goals from calorie and macro patterns"
      ]
    },
    "safety": {
      "description": "Dietary restriction and allergy tracking",
      "importance": "Critical safety feature for users with food allergies",
      "storage": "High importance score (0.9-0.95) for dietary restrictions and allergies"
    }
  },
  "postProcessingPipeline": {
    "description": "Automatic nutrition data extraction from AI chat responses",
    "location": "chat-routes.ts:processNutritionData()",
    "integration": "Called after AI response is saved in both streaming and non-streaming endpoints",
    "dataTypes": [
      "calories",
      "protein",
      "carbohydrates",
      "fat",
      "fiber",
      "sugar",
      "sodium"
    ],
    "storage": "Each nutrition component stored as separate health_data record with nutrition category",
    "errorHandling": "Non-blocking background processing with error logging",
    "metadata": {
      "conversationId": "Links nutrition data to chat conversation",
      "extractedFrom": "ai_chat",
      "confidence": "high|medium|low based on information quality",
      "source": "chat_inference"
    }
  },
  "aiPromptEnhancements": {
    "description": "Enhanced AI system prompts with nutrition analysis capabilities",
    "location": "chat-context-service.ts:getNutritionAnalysisPrompt()",
    "features": [
      "Food identification from text and images",
      "Nutritional value estimation with confidence levels",
      "Temporal context recognition (today, yesterday, etc.)",
      "Structured output format for easy parsing",
      "Photo analysis guidance for food images",
      "Example responses for different food scenarios"
    ],
    "outputFormat": {
      "structure": "Estimated calories: X kcal, Protein: X grams, etc.",
      "confidence": "high|medium|low based on information quality",
      "source": "user_provided|ai_inferred|photo_analysis"
    }
  },
  "performanceConsiderations": {
    "regexOptimization": "Optimized regex patterns for fast nutrition value extraction",
    "validationCaching": "Zod schema validation with minimal overhead",
    "memoryUsage": "Lightweight service with minimal memory footprint"
  },
  "securityConsiderations": {
    "inputValidation": "All extracted values validated against realistic ranges",
    "sanitization": "Text input sanitized before processing",
    "dataIntegrity": "Zod schema ensures data structure integrity"
  },
  "testingStrategy": {
    "unitTests": [
      "extractNutritionFromText with various input formats",
      "parseNutritionValues regex pattern matching",
      "determineConfidence logic validation",
      "nutritionDataSchema validation",
      "DateContextParser.parseDateContext with relative dates",
      "DateContextParser.validateDateRange edge cases",
      "Date parsing from explicit formats (MM/DD, MM/DD/YYYY)",
      "Timezone handling and conversion"
    ],
    "integrationTests": [
      "End-to-end nutrition extraction from AI responses",
      "Health data storage integration",
      "Error handling and edge cases",
      "Date context integration with nutrition inference",
      "Temporal nutrition data tracking accuracy"
    ]
  },
  "dateContextParser": {
    "description": "Standalone utility for parsing date context from natural language",
    "location": "server/utils/date-context-parser.ts",
    "capabilities": [
      "Relative date parsing (today, yesterday, X days ago)",
      "Day of week parsing (last Monday, this Friday)",
      "Explicit date parsing (MM/DD, MM/DD/YYYY)",
      "Meal time inference (breakfast, lunch, dinner)",
      "Time of day parsing (morning, afternoon, evening)",
      "Timezone handling and conversion",
      "Date validation within reasonable ranges"
    ],
    "patterns": {
      "today": "today|this morning|this afternoon|this evening|currently",
      "yesterday": "yesterday|last night",
      "daysAgo": "\\d+ days? ago",
      "dayOfWeek": "last|this + day name",
      "explicitDate": "MM/DD or MM/DD/YYYY format",
      "mealTime": "breakfast|lunch|dinner|brunch",
      "timeOfDay": "morning|afternoon|evening|night"
    },
    "validation": {
      "pastRange": "30 days maximum",
      "futureRange": "7 days maximum",
      "fallback": "Current date if parsing fails or out of range"
    }
  },
  "lastUpdated": "2025-07-11T21:54:27.655Z",
  "dependencyAnalysis": {
    "lastAnalyzed": "2025-07-11T21:54:27.655Z",
    "crossDomainFiles": 3,
    "internalFiles": 7,
    "totalDependencies": 10
  }
}