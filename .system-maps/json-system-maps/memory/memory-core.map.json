{
  "_tableOfContents": {
    "domain": "memory",
    "features": [
      "memory-detection",
      "background-processing", 
      "memory-creation",
      "categorization",
      "semantic-labeling",
      "deduplication",
      "context-aware-retrieval",
      "semantic-search",
      "memory-relationships",
      "performance-monitoring"
    ],
    "totalFeatures": 10,
    "lastUpdated": "2025-07-10T21:15:00Z"
  },
  "_meta": {
    "feature": "memory-core",
    "domain": "memory",
    "lastUpdated": "2025-07-10T21:15:00Z",
    "status": "active"
  },
  "trigger": "Chat messages processed or memory operations requested",
  "dataFlow": {
    "request": "Chat message → memory-service → AI analysis → embedding generation → database storage",
    "response": "Context retrieval → semantic search → relevant memories → AI prompt enhancement",
    "sideEffects": ["Background processing", "Memory deduplication", "Cache invalidation", "Performance monitoring"]
  },
  "files": {
    "ui": [],
    "api": ["server/routes/memory-routes.ts", "server/routes.ts"],
    "services": [
      "server/services/memory-service.ts",
      "server/services/chatgpt-memory-enhancement.ts",
      "server/services/enhanced-memory-service.ts",
      "server/services/memory-enhanced-ai-service.ts",
      "server/services/advanced-memory-ai-service.ts",
      "server/services/performance-memory-core.ts",
      "server/services/memory-performance-monitor.ts",
      "server/services/go-memory-service.ts",
      "server/services/cache-service.ts",
      "server/services/memory-graph-service.ts",
      "server/services/memory-relationship-engine.ts",
      "server/services/fast-relationship-engine.ts",
      "server/services/nutrition-memory-service.ts",
      "server/services/intelligent-memory-retrieval.ts",
      "server/services/simple-memory-detection.ts"
    ],
    "data": [
      "memory_entries", "memory_triggers", "memory_access_log", "conversations", "conversation_messages",
      "atomic_facts", "memory_relationships", "memory_consolidation_log", "memory_graph_metrics"
    ],
    "types": ["shared/schema.ts"]
  },
  "cacheFlow": {
    "invalidates": ["query:memories", "query:memories-overview", "memory-embeddings-cache", "similarity-cache"],
    "refreshes": ["MemorySection", "ChatInterface", "AIResponses"],
    "triggers": ["memory-background-processing", "relationship-updates", "consolidation-jobs"]
  },
  "errorPaths": {
    "network": "Retry with exponential backoff, fallback to cached results",
    "validation": "Skip invalid memories, log errors for debugging",
    "business": "Graceful degradation, continue without memory enhancement"
  },
  "dependencies": {
    "internal": ["ai-service", "chat-system", "health-data"],
    "external": ["OpenAI API", "Google AI", "PostgreSQL", "Go Services"],
    "shared": ["cache-service", "performance-monitor", "error-handling"]
  },
  "features": {
    "memory-detection": {
      "$ref": "./memory-detection.feature.json"
    },
    "memory-deduplication": {
      "$ref": "./memory-deduplication.feature.json"
    },
    "memory-retrieval": {
      "$ref": "./memory-retrieval.feature.json"
    },
    "background-processing": {
      "trigger": "Memory detection tasks queued",
      "dataFlow": {
        "request": "Queue → enhanced-memory-service → background processor",
        "response": "Non-blocking processing → cache updates → UI refresh triggers"
      },
      "files": {
        "services": ["enhanced-memory-service.ts", "performance-memory-core.ts", "memory-performance-monitor.ts"],
        "data": ["memory_entries", "memory_graph_metrics"]
      },
      "performanceTarget": "<50ms target"
    },
    "memory-creation": {
      "trigger": "Memory content validated and ready for storage",
      "dataFlow": {
        "request": "Memory data → embedding generation → database storage",
        "response": "Stored memory → indexing → availability for retrieval"
      },
      "files": {
        "services": ["memory-service.ts", "enhanced-memory-service.ts"],
        "data": ["memory_entries", "memory_embeddings", "memory_access_log"]
      }
    },
    "categorization": {
      "trigger": "New memory requires category assignment",
      "dataFlow": {
        "request": "Memory content → AI analysis → category classification",
        "response": "Category assignment → confidence scoring → storage"
      },
      "files": {
        "services": ["memory-service.ts", "nutrition-memory-service.ts"],
        "data": ["memory_entries"]
      }
    },
    "semantic-labeling": {
      "trigger": "Memory content requires semantic label assignment",
      "dataFlow": {
        "request": "Memory content → AI analysis → semantic label extraction",
        "response": "Semantic labels assigned → enhanced categorization → improved UI display"
      },
      "files": {
        "services": ["memory-service.ts", "chatgpt-memory-enhancement.ts"],
        "data": ["memory_entries"],
        "ui": ["MemorySection.tsx"]
      },
      "labelTypes": {
        "food_diet": ["allergy", "preference", "restriction", "dangerous", "mild", "meal-timing"],
        "personal_context": ["background", "health-history", "lifestyle", "medical", "physical-limitation"],
        "goals": ["weight-loss", "muscle-gain", "nutrition", "fitness", "target"],
        "preferences": ["general", "workout", "environment"],
        "instructions": ["behavior", "communication", "reminder"]
      },
      "improvements": [
        "Replaced keyword extraction with semantic categorization",
        "Enhanced UI hierarchy: Category → Semantic Labels → Keywords",
        "AI-powered label assignment for meaningful memory classification"
      ]
    },
    "semantic-search": {
      "trigger": "Memory retrieval query with embedding",
      "dataFlow": {
        "request": "Query embedding → vector similarity → ranked results",
        "response": "Similarity scores → importance weighting → cache update"
      },
      "files": {
        "services": ["memory-service.ts", "go-memory-service.ts", "cache-service.ts"],
        "data": ["memory_entries", "memory_embeddings", "similarity-cache"]
      }
    },
    "memory-relationships": {
      "trigger": "Memory graph analysis for relationship detection",
      "dataFlow": {
        "request": "Memory entries → relationship-engine → graph analysis",
        "response": "Relationship mapping → graph updates → enhanced retrieval"
      },
      "files": {
        "services": ["memory-relationship-engine.ts", "fast-relationship-engine.ts", "memory-graph-service.ts"],
        "data": ["memory_relationships", "atomic_facts", "memory_graph_metrics"]
      }
    },
    "performance-monitoring": {
      "trigger": "Memory operations require performance tracking",
      "dataFlow": {
        "request": "Memory operations → performance-monitor → metrics collection",
        "response": "Performance data → optimization triggers → system adjustments"
      },
      "files": {
        "services": ["memory-performance-monitor.ts", "performance-memory-core.ts"],
        "data": ["memory_graph_metrics", "memory_access_log"]
      }
    }
  },
  "apiEndpoints": {
    "POST /api/memory/create": {
      "description": "Creates memory entry with confidence scoring and embeddings",
      "readsFrom": ["users.id"],
      "modifies": ["memory_entries", "memory_embeddings"]
    },
    "GET /api/memory/contextual": {
      "description": "Retrieves memories relevant to conversation context",
      "readsFrom": ["memory_entries", "memory_embeddings"],
      "modifies": ["memory_access_log"]
    },
    "POST /api/memory/enhanced-detect": {
      "description": "Enhanced memory detection with background processing",
      "readsFrom": ["memory_entries", "conversations"],
      "modifies": ["memory_entries", "memory_triggers"]
    },
    "POST /api/memory/enhanced-retrieve": {
      "description": "Enhanced memory retrieval with relationship context",
      "readsFrom": ["memory_entries", "memory_relationships", "atomic_facts"],
      "modifies": ["memory_access_log"]
    },
    "POST /api/memory/chatgpt-enhancement-test": {
      "description": "Test ChatGPT-style memory enhancement and deduplication",
      "readsFrom": ["memory_entries"],
      "modifies": ["memory_entries", "memory_consolidation_log"]
    }
  },
  "database": {
    "schemaFile": "shared/schema.ts",
    "tables": {
      "memory_entries": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "content": { "type": "text" },
          "category": { "type": "text", "enum": ["preferences", "personal_context", "instructions", "food_diet", "goals"] },
          "labels": { "type": "text[]" },
          "importance": { "type": "real" },
          "keywords": { "type": "text[]" },
          "createdAt": { "type": "timestamp" },
          "accessCount": { "type": "integer" },
          "isActive": { "type": "boolean" },
          "embedding": { "type": "vector" },
          "confidence": { "type": "real" },
          "semanticHash": { "type": "text" }
        }
      },
      "memory_triggers": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "trigger": { "type": "text" },
          "createdAt": { "type": "timestamp" }
        }
      },
      "memory_access_log": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "memoryId": { "type": "uuid", "foreignKey": "memory_entries.id" },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "accessType": { "type": "text" },
          "relevanceScore": { "type": "real" },
          "accessedAt": { "type": "timestamp" }
        }
      },
      "atomic_facts": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "memoryId": { "type": "uuid", "foreignKey": "memory_entries.id" },
          "subject": { "type": "text" },
          "predicate": { "type": "text" },
          "object": { "type": "text" },
          "confidence": { "type": "real" },
          "createdAt": { "type": "timestamp" }
        }
      },
      "memory_relationships": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "sourceMemoryId": { "type": "uuid", "foreignKey": "memory_entries.id" },
          "targetMemoryId": { "type": "uuid", "foreignKey": "memory_entries.id" },
          "relationshipType": { "type": "text" },
          "strength": { "type": "real" },
          "createdAt": { "type": "timestamp" }
        }
      },
      "memory_consolidation_log": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "sourceMemoryId": { "type": "uuid", "foreignKey": "memory_entries.id" },
          "targetMemoryId": { "type": "uuid", "foreignKey": "memory_entries.id" },
          "consolidationType": { "type": "text" },
          "reason": { "type": "text" },
          "createdAt": { "type": "timestamp" }
        }
      },
      "memory_graph_metrics": {
        "columns": {
          "id": { "type": "uuid", "primaryKey": true },
          "userId": { "type": "integer", "foreignKey": "users.id" },
          "metricType": { "type": "text" },
          "value": { "type": "real" },
          "metadata": { "type": "jsonb" },
          "createdAt": { "type": "timestamp" }
        }
      }
    }
  },
  "performanceTargets": {
    "memory-detection": "<50ms background processing",
    "semantic-search": "<100ms for similarity queries",
    "memory-retrieval": "<200ms for contextual memories",
    "deduplication": "<150ms for duplicate detection",
    "background-processing": "Non-blocking with circuit breakers"
  },
  "architectureNotes": {
    "singleton-pattern": "chatgpt-memory-enhancement exported as singleton to prevent duplicate processing",
    "multi-service-architecture": "Modular services for specific memory operations",
    "performance-optimization": "Go services for performance-critical operations",
    "caching-strategy": "Multi-level caching with TTL and invalidation",
    "background-processing": "Non-blocking queues with priority and circuit breakers"
  }
}