@context{domain:file_manager, feature_group:core_operations, format:shdl, version:2.0.0, complexity:medium, enforcement:strict}
@meta{last_updated:"2025-01-01T10:00:00Z", validation_status:complete, token_estimate:750, critical_paths:8, processing_priority:1}

#FILE_DELETION{confidence:1.0, integration_status:complete, @critical}
  ##feature_definition{id:file_deletion_root, type:foundational, confidence:1.0}
    "Complete file deletion system with multi-selection, soft delete, and disk cleanup"
    →primary_user_workflow[select_files→confirm_delete→remove_from_disk→update_database]
    →dependencies[file_api, file_manager_state, file_system]
    →user_workflows[single_deletion, bulk_deletion, selection_management]

  @cluster{core_workflow, confidence:1.0}
    ##file_deletion_workflow{id:primary_deletion_flow, type:user_journey, confidence:1.0}
      "Complete file deletion process from selection to cleanup"
      @processing{
        user_selects_files→deletion_confirmation→api_request→
        disk_file_removal→database_soft_delete→space_calculation→
        ui_notification→list_refresh→selection_clear
      }
      @data_flow{
        ui_trigger:[FileActionsToolbar, delete_button],
        selection_state:[useFileManagerState, selectedFiles_Set],
        deletion_api:[POST_/api/files/delete, file_ids_array],
        cleanup:[disk_removal, database_update, cache_invalidation]
      }

    ##bulk_deletion_workflow{id:multi_file_deletion, type:batch_operation, confidence:1.0}
      "Batch deletion with progress tracking"
      @processing{
        multiple_selection→bulk_validation→batch_delete_request→
        iterate_file_removal→aggregate_results→report_summary
      }
      @data_flow{
        selection:[checkbox_selection, select_all_option],
        batch_processing:[array_of_file_ids, sequential_deletion],
        result_aggregation:[deleted_count, freed_space, not_found_count]
      }
  @/cluster

  @cluster{frontend_components, confidence:1.0}
    ##presentation_layer{id:ui_components, type:client_side, confidence:1.0}
      FileActionsToolbar{
        path:"client/src/components/filemanager/FileActionsToolbar.tsx",
        uses:[selectedFilesCount, onDelete_callback],
        functions:[delete_button_enable, confirmation_dialog],
        status:verified
      },
      FileList{
        path:"client/src/components/filemanager/FileList.tsx",
        uses:[selectedFiles, onSelectFile, checkbox_selection],
        functions:[multi_selection, visual_selection_state],
        status:verified
      },
      FileManagerSection{
        path:"client/src/components/FileManagerSection.tsx",
        uses:[useFileApi, handleDelete],
        functions:[deletion_orchestration, selection_clearing],
        status:verified
      }

    ##frontend_logic{id:hooks_and_state, confidence:1.0}
      useFileApi{
        path:"client/src/hooks/useFileApi.ts",
        functions:[deleteFiles, deleteFilesMutation],
        api_calls:[POST_/api/files/delete],
        query_invalidation:["files", "/api/files"],
        status:active
      },
      useFileManagerState{
        path:"client/src/hooks/useFileManagerState.ts",
        state:[selectedFiles_Set, setSelectedFiles],
        functions:[handleSelectFile, clearSelection],
        status:active
      }
  @/cluster

  @cluster{backend_services, confidence:1.0}
    ##business_logic_layer{id:server_components, type:server_side, confidence:1.0}
      file_routes{
        path:"server/routes/file-routes.ts",
        endpoints:[POST_/api/files/delete],
        functions:[batch_deletion, disk_cleanup, soft_delete],
        status:active
      },
      deletion_handler{
        function:"app.post('/api/files/delete')",
        processing:[
          validate_file_ids,
          iterate_files,
          remove_from_disk,
          mark_as_deleted,
          calculate_freed_space
        ],
        lines:"195-247",
        status:verified
      }

    ##file_system_operations{id:disk_management, confidence:1.0}
      disk_cleanup{
        operations:[existsSync, statSync, unlinkSync],
        error_handling:[file_not_found→continue, permission_error→log],
        space_tracking:[file_size_aggregation, freed_space_calculation],
        status:active
      }
  @/cluster

  @cluster{data_layer, confidence:1.0}
    ##database{id:persistence_operations, confidence:1.0}
      soft_delete_operation{
        table:"files",
        update_fields:{
          isDeleted:true,
          deletedAt:timestamp
        },
        query:"UPDATE files SET isDeleted=true WHERE fileName=?",
        status:active
      },
      file_filtering{
        list_query:"SELECT * FROM files WHERE isDeleted=false",
        ensures:deleted_files_hidden,
        status:active
      }

    ##response_aggregation{id:deletion_results, confidence:1.0}
      deletion_summary{
        deletedCount:total_processed_files,
        actuallyDeleted:successfully_removed_from_disk,
        notFound:files_already_missing,
        freedSpace:total_bytes_freed,
        status:active
      }
  @/cluster

  @cluster{api_endpoints, confidence:1.0}
    ##deletion_endpoint{id:primary_api, confidence:1.0}
      POST_/api/files/delete{
        handler:"server/routes/file-routes.ts:195-247",
        request:{
          fileIds:array_of_strings
        },
        response:{
          deletedCount:number,
          actuallyDeleted:number,
          notFound:number,
          freedSpace:number
        },
        status:active
      }
  @/cluster

  @cluster{user_feedback, confidence:1.0}
    ##notifications{id:deletion_feedback, confidence:1.0}
      success_toast{
        title:"Files Processed",
        description:dynamic_summary_with_counts,
        includes:[deleted_count, freed_space, not_found_info],
        status:active
      },
      error_toast{
        title:"Delete Failed",
        description:error_message,
        variant:"destructive",
        status:active
      }
  @/cluster

  @cluster{error_boundaries, confidence:1.0}
    ##error_handling{id:failure_management, confidence:1.0}
      validation_errors{
        no_file_ids→400_bad_request,
        empty_array→400_bad_request
      },
      file_system_errors{
        file_not_found→continue_gracefully,
        permission_denied→log_and_continue,
        disk_error→500_internal_error
      },
      database_errors{
        update_failure→transaction_rollback,
        connection_error→500_internal_error
      }
  @/cluster

  @cluster{state_management, confidence:1.0}
    ##selection_state{id:ui_state_sync, confidence:1.0}
      selection_persistence{
        storage:React_state_Set,
        sync:automatic_with_file_list,
        cleanup:on_successful_deletion
      },
      optimistic_updates{
        enabled:false,
        reason:"wait_for_server_confirmation",
        ui_blocking:delete_button_disabled_during_operation
      }
  @/cluster

  @cluster{performance_optimizations, confidence:1.0}
    ##optimization_strategies{id:deletion_performance, confidence:1.0}
      batch_processing{
        sequential_deletion:prevents_file_system_overload,
        error_isolation:individual_file_errors_dont_stop_batch,
        progress_tracking:aggregate_results
      },
      cache_invalidation{
        query_keys:["files", "/api/files"],
        timing:after_successful_deletion,
        scope:user_specific
      }
  @/cluster

  @cluster{security_considerations, confidence:1.0}
    ##security_measures{id:deletion_security, confidence:1.0}
      authorization{
        user_validation:FIXED_USER_ID_1,
        file_ownership:verified_through_database,
        cross_user_protection:implicit_through_user_id
      },
      data_integrity{
        soft_delete:maintains_audit_trail,
        physical_deletion:immediate_disk_cleanup,
        recovery_option:possible_through_isDeleted_flag
      }
  @/cluster

@processing{
  flow_sequence:[
    file_selection, deletion_trigger, validation,
    disk_removal, database_update, result_aggregation,
    ui_notification, cache_invalidation, selection_clear
  ],
  critical_paths:[
    disk_removal, database_update, ui_notification
  ],
  error_recovery:[
    continue_on_file_not_found, aggregate_partial_results,
    clear_selection_regardless
  ]
}

@dependencies{
  frontend:[
    React, TanStack_Query, useFileApi, useFileManagerState
  ],
  backend:[
    Express, Node_fs, Drizzle_ORM, PostgreSQL
  ],
  system:[
    File_system_access, Database_transactions
  ]
}

@integration_evidence{
  verified_flows:[
    "Single file deletion works end-to-end",
    "Bulk deletion processes all selected files",
    "Freed space calculation accurate",
    "UI updates correctly after deletion"
  ],
  edge_cases_handled:[
    "Files already deleted from disk",
    "Mixed success/failure in batch",
    "Selection state cleanup"
  ]
}